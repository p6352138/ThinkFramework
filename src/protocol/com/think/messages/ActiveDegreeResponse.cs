/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace com.think.messages
{

  [Serializable]
  public partial class ActiveDegreeResponse : TBase
  {
    private byte _respType;
    private int _active_degree;
    private bool _has_award;
    private List<ActiveMsgResponse> _activeMsgResponseList;
    private List<ActiveAwardResponse> _activeAwardList;
    private ActiveAwardResponse _ActiveAwardResponse;

    public byte RespType
    {
      get
      {
        return _respType;
      }
      set
      {
        __isset.respType = true;
        this._respType = value;
      }
    }

    public int Active_degree
    {
      get
      {
        return _active_degree;
      }
      set
      {
        __isset.active_degree = true;
        this._active_degree = value;
      }
    }

    public bool Has_award
    {
      get
      {
        return _has_award;
      }
      set
      {
        __isset.has_award = true;
        this._has_award = value;
      }
    }

    public List<ActiveMsgResponse> ActiveMsgResponseList
    {
      get
      {
        return _activeMsgResponseList;
      }
      set
      {
        __isset.activeMsgResponseList = true;
        this._activeMsgResponseList = value;
      }
    }

    public List<ActiveAwardResponse> ActiveAwardList
    {
      get
      {
        return _activeAwardList;
      }
      set
      {
        __isset.activeAwardList = true;
        this._activeAwardList = value;
      }
    }

    public ActiveAwardResponse ActiveAwardResponse
    {
      get
      {
        return _ActiveAwardResponse;
      }
      set
      {
        __isset.ActiveAwardResponse = true;
        this._ActiveAwardResponse = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool respType;
      public bool active_degree;
      public bool has_award;
      public bool activeMsgResponseList;
      public bool activeAwardList;
      public bool ActiveAwardResponse;
    }

    public ActiveDegreeResponse() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Byte) {
              RespType = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              Active_degree = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Bool) {
              Has_award = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.List) {
              {
                ActiveMsgResponseList = new List<ActiveMsgResponse>();
                TList _list745 = iprot.ReadListBegin();
                for( int _i746 = 0; _i746 < _list745.Count; ++_i746)
                {
                  ActiveMsgResponse _elem747 = new ActiveMsgResponse();
                  _elem747 = new ActiveMsgResponse();
                  _elem747.Read(iprot);
                  ActiveMsgResponseList.Add(_elem747);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.List) {
              {
                ActiveAwardList = new List<ActiveAwardResponse>();
                TList _list748 = iprot.ReadListBegin();
                for( int _i749 = 0; _i749 < _list748.Count; ++_i749)
                {
                  ActiveAwardResponse _elem750 = new ActiveAwardResponse();
                  _elem750 = new ActiveAwardResponse();
                  _elem750.Read(iprot);
                  ActiveAwardList.Add(_elem750);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.Struct) {
              ActiveAwardResponse = new ActiveAwardResponse();
              ActiveAwardResponse.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("ActiveDegreeResponse");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.respType) {
        field.Name = "respType";
        field.Type = TType.Byte;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(RespType);
        oprot.WriteFieldEnd();
      }
      if (__isset.active_degree) {
        field.Name = "active_degree";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Active_degree);
        oprot.WriteFieldEnd();
      }
      if (__isset.has_award) {
        field.Name = "has_award";
        field.Type = TType.Bool;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(Has_award);
        oprot.WriteFieldEnd();
      }
      if (ActiveMsgResponseList != null && __isset.activeMsgResponseList) {
        field.Name = "activeMsgResponseList";
        field.Type = TType.List;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, ActiveMsgResponseList.Count));
          foreach (ActiveMsgResponse _iter751 in ActiveMsgResponseList)
          {
            _iter751.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (ActiveAwardList != null && __isset.activeAwardList) {
        field.Name = "activeAwardList";
        field.Type = TType.List;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, ActiveAwardList.Count));
          foreach (ActiveAwardResponse _iter752 in ActiveAwardList)
          {
            _iter752.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (ActiveAwardResponse != null && __isset.ActiveAwardResponse) {
        field.Name = "ActiveAwardResponse";
        field.Type = TType.Struct;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        ActiveAwardResponse.Write(oprot);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("ActiveDegreeResponse(");
      sb.Append("RespType: ");
      sb.Append(RespType);
      sb.Append(",Active_degree: ");
      sb.Append(Active_degree);
      sb.Append(",Has_award: ");
      sb.Append(Has_award);
      sb.Append(",ActiveMsgResponseList: ");
      sb.Append(ActiveMsgResponseList);
      sb.Append(",ActiveAwardList: ");
      sb.Append(ActiveAwardList);
      sb.Append(",ActiveAwardResponse: ");
      sb.Append(ActiveAwardResponse== null ? "<null>" : ActiveAwardResponse.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }

}
