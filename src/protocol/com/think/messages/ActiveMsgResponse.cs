/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace com.think.messages
{

  [Serializable]
  public partial class ActiveMsgResponse : TBase
  {
    private int _active_id;
    private string _active_name;
    private int _icon;
    private int _state;
    private byte _cdType;
    private string _progressDesc;
    private int _activeDegree;
    private string _questTarget;

    public int Active_id
    {
      get
      {
        return _active_id;
      }
      set
      {
        __isset.active_id = true;
        this._active_id = value;
      }
    }

    public string Active_name
    {
      get
      {
        return _active_name;
      }
      set
      {
        __isset.active_name = true;
        this._active_name = value;
      }
    }

    public int Icon
    {
      get
      {
        return _icon;
      }
      set
      {
        __isset.icon = true;
        this._icon = value;
      }
    }

    public int State
    {
      get
      {
        return _state;
      }
      set
      {
        __isset.state = true;
        this._state = value;
      }
    }

    public byte CdType
    {
      get
      {
        return _cdType;
      }
      set
      {
        __isset.cdType = true;
        this._cdType = value;
      }
    }

    public string ProgressDesc
    {
      get
      {
        return _progressDesc;
      }
      set
      {
        __isset.progressDesc = true;
        this._progressDesc = value;
      }
    }

    public int ActiveDegree
    {
      get
      {
        return _activeDegree;
      }
      set
      {
        __isset.activeDegree = true;
        this._activeDegree = value;
      }
    }

    public string QuestTarget
    {
      get
      {
        return _questTarget;
      }
      set
      {
        __isset.questTarget = true;
        this._questTarget = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool active_id;
      public bool active_name;
      public bool icon;
      public bool state;
      public bool cdType;
      public bool progressDesc;
      public bool activeDegree;
      public bool questTarget;
    }

    public ActiveMsgResponse() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              Active_id = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Active_name = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              Icon = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              State = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Byte) {
              CdType = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.String) {
              ProgressDesc = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I32) {
              ActiveDegree = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.String) {
              QuestTarget = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("ActiveMsgResponse");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.active_id) {
        field.Name = "active_id";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Active_id);
        oprot.WriteFieldEnd();
      }
      if (Active_name != null && __isset.active_name) {
        field.Name = "active_name";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Active_name);
        oprot.WriteFieldEnd();
      }
      if (__isset.icon) {
        field.Name = "icon";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Icon);
        oprot.WriteFieldEnd();
      }
      if (__isset.state) {
        field.Name = "state";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(State);
        oprot.WriteFieldEnd();
      }
      if (__isset.cdType) {
        field.Name = "cdType";
        field.Type = TType.Byte;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(CdType);
        oprot.WriteFieldEnd();
      }
      if (ProgressDesc != null && __isset.progressDesc) {
        field.Name = "progressDesc";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ProgressDesc);
        oprot.WriteFieldEnd();
      }
      if (__isset.activeDegree) {
        field.Name = "activeDegree";
        field.Type = TType.I32;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ActiveDegree);
        oprot.WriteFieldEnd();
      }
      if (QuestTarget != null && __isset.questTarget) {
        field.Name = "questTarget";
        field.Type = TType.String;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(QuestTarget);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("ActiveMsgResponse(");
      sb.Append("Active_id: ");
      sb.Append(Active_id);
      sb.Append(",Active_name: ");
      sb.Append(Active_name);
      sb.Append(",Icon: ");
      sb.Append(Icon);
      sb.Append(",State: ");
      sb.Append(State);
      sb.Append(",CdType: ");
      sb.Append(CdType);
      sb.Append(",ProgressDesc: ");
      sb.Append(ProgressDesc);
      sb.Append(",ActiveDegree: ");
      sb.Append(ActiveDegree);
      sb.Append(",QuestTarget: ");
      sb.Append(QuestTarget);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
