/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace com.think.messages
{

  [Serializable]
  public partial class AdvPropertyResponse : TBase
  {
    private int _maxHp;
    private int _initiative;
    private int _physicsAttack;
    private int _physicsDefense;
    private int _magicAttack;
    private int _magicDefense;
    private int _skillAttack;
    private int _skillDefense;
    private int _eviteRate;
    private int _criticalHitRate;
    private int _turnBackRate;
    private int _hitRate;
    private int _tenacityRate;
    private int _destroyRate;

    public int MaxHp
    {
      get
      {
        return _maxHp;
      }
      set
      {
        __isset.maxHp = true;
        this._maxHp = value;
      }
    }

    public int Initiative
    {
      get
      {
        return _initiative;
      }
      set
      {
        __isset.initiative = true;
        this._initiative = value;
      }
    }

    public int PhysicsAttack
    {
      get
      {
        return _physicsAttack;
      }
      set
      {
        __isset.physicsAttack = true;
        this._physicsAttack = value;
      }
    }

    public int PhysicsDefense
    {
      get
      {
        return _physicsDefense;
      }
      set
      {
        __isset.physicsDefense = true;
        this._physicsDefense = value;
      }
    }

    public int MagicAttack
    {
      get
      {
        return _magicAttack;
      }
      set
      {
        __isset.magicAttack = true;
        this._magicAttack = value;
      }
    }

    public int MagicDefense
    {
      get
      {
        return _magicDefense;
      }
      set
      {
        __isset.magicDefense = true;
        this._magicDefense = value;
      }
    }

    public int SkillAttack
    {
      get
      {
        return _skillAttack;
      }
      set
      {
        __isset.skillAttack = true;
        this._skillAttack = value;
      }
    }

    public int SkillDefense
    {
      get
      {
        return _skillDefense;
      }
      set
      {
        __isset.skillDefense = true;
        this._skillDefense = value;
      }
    }

    public int EviteRate
    {
      get
      {
        return _eviteRate;
      }
      set
      {
        __isset.eviteRate = true;
        this._eviteRate = value;
      }
    }

    public int CriticalHitRate
    {
      get
      {
        return _criticalHitRate;
      }
      set
      {
        __isset.criticalHitRate = true;
        this._criticalHitRate = value;
      }
    }

    public int TurnBackRate
    {
      get
      {
        return _turnBackRate;
      }
      set
      {
        __isset.turnBackRate = true;
        this._turnBackRate = value;
      }
    }

    public int HitRate
    {
      get
      {
        return _hitRate;
      }
      set
      {
        __isset.hitRate = true;
        this._hitRate = value;
      }
    }

    public int TenacityRate
    {
      get
      {
        return _tenacityRate;
      }
      set
      {
        __isset.tenacityRate = true;
        this._tenacityRate = value;
      }
    }

    public int DestroyRate
    {
      get
      {
        return _destroyRate;
      }
      set
      {
        __isset.destroyRate = true;
        this._destroyRate = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool maxHp;
      public bool initiative;
      public bool physicsAttack;
      public bool physicsDefense;
      public bool magicAttack;
      public bool magicDefense;
      public bool skillAttack;
      public bool skillDefense;
      public bool eviteRate;
      public bool criticalHitRate;
      public bool turnBackRate;
      public bool hitRate;
      public bool tenacityRate;
      public bool destroyRate;
    }

    public AdvPropertyResponse() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              MaxHp = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              Initiative = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              PhysicsAttack = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              PhysicsDefense = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              MagicAttack = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              MagicDefense = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I32) {
              SkillAttack = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.I32) {
              SkillDefense = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.I32) {
              EviteRate = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.I32) {
              CriticalHitRate = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.I32) {
              TurnBackRate = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.I32) {
              HitRate = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.I32) {
              TenacityRate = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 14:
            if (field.Type == TType.I32) {
              DestroyRate = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("AdvPropertyResponse");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.maxHp) {
        field.Name = "maxHp";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(MaxHp);
        oprot.WriteFieldEnd();
      }
      if (__isset.initiative) {
        field.Name = "initiative";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Initiative);
        oprot.WriteFieldEnd();
      }
      if (__isset.physicsAttack) {
        field.Name = "physicsAttack";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(PhysicsAttack);
        oprot.WriteFieldEnd();
      }
      if (__isset.physicsDefense) {
        field.Name = "physicsDefense";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(PhysicsDefense);
        oprot.WriteFieldEnd();
      }
      if (__isset.magicAttack) {
        field.Name = "magicAttack";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(MagicAttack);
        oprot.WriteFieldEnd();
      }
      if (__isset.magicDefense) {
        field.Name = "magicDefense";
        field.Type = TType.I32;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(MagicDefense);
        oprot.WriteFieldEnd();
      }
      if (__isset.skillAttack) {
        field.Name = "skillAttack";
        field.Type = TType.I32;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(SkillAttack);
        oprot.WriteFieldEnd();
      }
      if (__isset.skillDefense) {
        field.Name = "skillDefense";
        field.Type = TType.I32;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(SkillDefense);
        oprot.WriteFieldEnd();
      }
      if (__isset.eviteRate) {
        field.Name = "eviteRate";
        field.Type = TType.I32;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(EviteRate);
        oprot.WriteFieldEnd();
      }
      if (__isset.criticalHitRate) {
        field.Name = "criticalHitRate";
        field.Type = TType.I32;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(CriticalHitRate);
        oprot.WriteFieldEnd();
      }
      if (__isset.turnBackRate) {
        field.Name = "turnBackRate";
        field.Type = TType.I32;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(TurnBackRate);
        oprot.WriteFieldEnd();
      }
      if (__isset.hitRate) {
        field.Name = "hitRate";
        field.Type = TType.I32;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(HitRate);
        oprot.WriteFieldEnd();
      }
      if (__isset.tenacityRate) {
        field.Name = "tenacityRate";
        field.Type = TType.I32;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(TenacityRate);
        oprot.WriteFieldEnd();
      }
      if (__isset.destroyRate) {
        field.Name = "destroyRate";
        field.Type = TType.I32;
        field.ID = 14;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(DestroyRate);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("AdvPropertyResponse(");
      sb.Append("MaxHp: ");
      sb.Append(MaxHp);
      sb.Append(",Initiative: ");
      sb.Append(Initiative);
      sb.Append(",PhysicsAttack: ");
      sb.Append(PhysicsAttack);
      sb.Append(",PhysicsDefense: ");
      sb.Append(PhysicsDefense);
      sb.Append(",MagicAttack: ");
      sb.Append(MagicAttack);
      sb.Append(",MagicDefense: ");
      sb.Append(MagicDefense);
      sb.Append(",SkillAttack: ");
      sb.Append(SkillAttack);
      sb.Append(",SkillDefense: ");
      sb.Append(SkillDefense);
      sb.Append(",EviteRate: ");
      sb.Append(EviteRate);
      sb.Append(",CriticalHitRate: ");
      sb.Append(CriticalHitRate);
      sb.Append(",TurnBackRate: ");
      sb.Append(TurnBackRate);
      sb.Append(",HitRate: ");
      sb.Append(HitRate);
      sb.Append(",TenacityRate: ");
      sb.Append(TenacityRate);
      sb.Append(",DestroyRate: ");
      sb.Append(DestroyRate);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
