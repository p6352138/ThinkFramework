/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace com.think.messages
{

  [Serializable]
  public partial class AlipayRequest : TBase
  {
    private string _out_trade_no;
    private string _subject;
    private int _total_fee;

    public string Out_trade_no
    {
      get
      {
        return _out_trade_no;
      }
      set
      {
        __isset.out_trade_no = true;
        this._out_trade_no = value;
      }
    }

    public string Subject
    {
      get
      {
        return _subject;
      }
      set
      {
        __isset.subject = true;
        this._subject = value;
      }
    }

    public int Total_fee
    {
      get
      {
        return _total_fee;
      }
      set
      {
        __isset.total_fee = true;
        this._total_fee = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool out_trade_no;
      public bool subject;
      public bool total_fee;
    }

    public AlipayRequest() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Out_trade_no = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Subject = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              Total_fee = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("AlipayRequest");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Out_trade_no != null && __isset.out_trade_no) {
        field.Name = "out_trade_no";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Out_trade_no);
        oprot.WriteFieldEnd();
      }
      if (Subject != null && __isset.subject) {
        field.Name = "subject";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Subject);
        oprot.WriteFieldEnd();
      }
      if (__isset.total_fee) {
        field.Name = "total_fee";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Total_fee);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("AlipayRequest(");
      sb.Append("Out_trade_no: ");
      sb.Append(Out_trade_no);
      sb.Append(",Subject: ");
      sb.Append(Subject);
      sb.Append(",Total_fee: ");
      sb.Append(Total_fee);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
