/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace com.think.messages
{

  [Serializable]
  public partial class Answer : TBase
  {
    private int _answer_id;
    private int _answer_icon;
    private string _answer_content;
    private string _answer_award;

    public int Answer_id
    {
      get
      {
        return _answer_id;
      }
      set
      {
        __isset.answer_id = true;
        this._answer_id = value;
      }
    }

    public int Answer_icon
    {
      get
      {
        return _answer_icon;
      }
      set
      {
        __isset.answer_icon = true;
        this._answer_icon = value;
      }
    }

    public string Answer_content
    {
      get
      {
        return _answer_content;
      }
      set
      {
        __isset.answer_content = true;
        this._answer_content = value;
      }
    }

    public string Answer_award
    {
      get
      {
        return _answer_award;
      }
      set
      {
        __isset.answer_award = true;
        this._answer_award = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool answer_id;
      public bool answer_icon;
      public bool answer_content;
      public bool answer_award;
    }

    public Answer() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              Answer_id = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              Answer_icon = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              Answer_content = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              Answer_award = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("Answer");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.answer_id) {
        field.Name = "answer_id";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Answer_id);
        oprot.WriteFieldEnd();
      }
      if (__isset.answer_icon) {
        field.Name = "answer_icon";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Answer_icon);
        oprot.WriteFieldEnd();
      }
      if (Answer_content != null && __isset.answer_content) {
        field.Name = "answer_content";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Answer_content);
        oprot.WriteFieldEnd();
      }
      if (Answer_award != null && __isset.answer_award) {
        field.Name = "answer_award";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Answer_award);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("Answer(");
      sb.Append("Answer_id: ");
      sb.Append(Answer_id);
      sb.Append(",Answer_icon: ");
      sb.Append(Answer_icon);
      sb.Append(",Answer_content: ");
      sb.Append(Answer_content);
      sb.Append(",Answer_award: ");
      sb.Append(Answer_award);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
