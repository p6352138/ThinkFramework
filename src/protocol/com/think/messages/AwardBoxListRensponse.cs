/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace com.think.messages
{

  [Serializable]
  public partial class AwardBoxListRensponse : TBase
  {
    private int _dungeonId;
    private int _dungeonMapID;
    private List<AwardBoxRensponse> _awardBoxRensponseList;

    public int DungeonId
    {
      get
      {
        return _dungeonId;
      }
      set
      {
        __isset.dungeonId = true;
        this._dungeonId = value;
      }
    }

    public int DungeonMapID
    {
      get
      {
        return _dungeonMapID;
      }
      set
      {
        __isset.dungeonMapID = true;
        this._dungeonMapID = value;
      }
    }

    public List<AwardBoxRensponse> AwardBoxRensponseList
    {
      get
      {
        return _awardBoxRensponseList;
      }
      set
      {
        __isset.awardBoxRensponseList = true;
        this._awardBoxRensponseList = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool dungeonId;
      public bool dungeonMapID;
      public bool awardBoxRensponseList;
    }

    public AwardBoxListRensponse() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              DungeonId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              DungeonMapID = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.List) {
              {
                AwardBoxRensponseList = new List<AwardBoxRensponse>();
                TList _list279 = iprot.ReadListBegin();
                for( int _i280 = 0; _i280 < _list279.Count; ++_i280)
                {
                  AwardBoxRensponse _elem281 = new AwardBoxRensponse();
                  _elem281 = new AwardBoxRensponse();
                  _elem281.Read(iprot);
                  AwardBoxRensponseList.Add(_elem281);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("AwardBoxListRensponse");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.dungeonId) {
        field.Name = "dungeonId";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(DungeonId);
        oprot.WriteFieldEnd();
      }
      if (__isset.dungeonMapID) {
        field.Name = "dungeonMapID";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(DungeonMapID);
        oprot.WriteFieldEnd();
      }
      if (AwardBoxRensponseList != null && __isset.awardBoxRensponseList) {
        field.Name = "awardBoxRensponseList";
        field.Type = TType.List;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, AwardBoxRensponseList.Count));
          foreach (AwardBoxRensponse _iter282 in AwardBoxRensponseList)
          {
            _iter282.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("AwardBoxListRensponse(");
      sb.Append("DungeonId: ");
      sb.Append(DungeonId);
      sb.Append(",DungeonMapID: ");
      sb.Append(DungeonMapID);
      sb.Append(",AwardBoxRensponseList: ");
      sb.Append(AwardBoxRensponseList);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
