/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace com.think.messages
{

  [Serializable]
  public partial class AwardBoxRensponse : TBase
  {
    private int _dungeonId;
    private int _dungeonMapID;
    private bool _isHasBox;
    private int _award_id;
    private byte _award_type;
    private short _award_icon;
    private ResourceListResponse _resourceList;

    public int DungeonId
    {
      get
      {
        return _dungeonId;
      }
      set
      {
        __isset.dungeonId = true;
        this._dungeonId = value;
      }
    }

    public int DungeonMapID
    {
      get
      {
        return _dungeonMapID;
      }
      set
      {
        __isset.dungeonMapID = true;
        this._dungeonMapID = value;
      }
    }

    public bool IsHasBox
    {
      get
      {
        return _isHasBox;
      }
      set
      {
        __isset.isHasBox = true;
        this._isHasBox = value;
      }
    }

    public int Award_id
    {
      get
      {
        return _award_id;
      }
      set
      {
        __isset.award_id = true;
        this._award_id = value;
      }
    }

    public byte Award_type
    {
      get
      {
        return _award_type;
      }
      set
      {
        __isset.award_type = true;
        this._award_type = value;
      }
    }

    public short Award_icon
    {
      get
      {
        return _award_icon;
      }
      set
      {
        __isset.award_icon = true;
        this._award_icon = value;
      }
    }

    public ResourceListResponse ResourceList
    {
      get
      {
        return _resourceList;
      }
      set
      {
        __isset.resourceList = true;
        this._resourceList = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool dungeonId;
      public bool dungeonMapID;
      public bool isHasBox;
      public bool award_id;
      public bool award_type;
      public bool award_icon;
      public bool resourceList;
    }

    public AwardBoxRensponse() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              DungeonId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              DungeonMapID = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Bool) {
              IsHasBox = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              Award_id = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Byte) {
              Award_type = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I16) {
              Award_icon = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.Struct) {
              ResourceList = new ResourceListResponse();
              ResourceList.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("AwardBoxRensponse");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.dungeonId) {
        field.Name = "dungeonId";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(DungeonId);
        oprot.WriteFieldEnd();
      }
      if (__isset.dungeonMapID) {
        field.Name = "dungeonMapID";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(DungeonMapID);
        oprot.WriteFieldEnd();
      }
      if (__isset.isHasBox) {
        field.Name = "isHasBox";
        field.Type = TType.Bool;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(IsHasBox);
        oprot.WriteFieldEnd();
      }
      if (__isset.award_id) {
        field.Name = "award_id";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Award_id);
        oprot.WriteFieldEnd();
      }
      if (__isset.award_type) {
        field.Name = "award_type";
        field.Type = TType.Byte;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(Award_type);
        oprot.WriteFieldEnd();
      }
      if (__isset.award_icon) {
        field.Name = "award_icon";
        field.Type = TType.I16;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(Award_icon);
        oprot.WriteFieldEnd();
      }
      if (ResourceList != null && __isset.resourceList) {
        field.Name = "resourceList";
        field.Type = TType.Struct;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        ResourceList.Write(oprot);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("AwardBoxRensponse(");
      sb.Append("DungeonId: ");
      sb.Append(DungeonId);
      sb.Append(",DungeonMapID: ");
      sb.Append(DungeonMapID);
      sb.Append(",IsHasBox: ");
      sb.Append(IsHasBox);
      sb.Append(",Award_id: ");
      sb.Append(Award_id);
      sb.Append(",Award_type: ");
      sb.Append(Award_type);
      sb.Append(",Award_icon: ");
      sb.Append(Award_icon);
      sb.Append(",ResourceList: ");
      sb.Append(ResourceList== null ? "<null>" : ResourceList.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }

}
