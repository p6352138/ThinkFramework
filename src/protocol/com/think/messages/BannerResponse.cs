/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace com.think.messages
{

  [Serializable]
  public partial class BannerResponse : TBase
  {
    private int _banner_id;
    private string _banner_flag;
    private string _banner_name;
    private byte _trait;
    private int _banner_icon;
    private int _upgrade_score;
    private Dictionary<byte, int> _attributeMap;

    public int Banner_id
    {
      get
      {
        return _banner_id;
      }
      set
      {
        __isset.banner_id = true;
        this._banner_id = value;
      }
    }

    public string Banner_flag
    {
      get
      {
        return _banner_flag;
      }
      set
      {
        __isset.banner_flag = true;
        this._banner_flag = value;
      }
    }

    public string Banner_name
    {
      get
      {
        return _banner_name;
      }
      set
      {
        __isset.banner_name = true;
        this._banner_name = value;
      }
    }

    public byte Trait
    {
      get
      {
        return _trait;
      }
      set
      {
        __isset.trait = true;
        this._trait = value;
      }
    }

    public int Banner_icon
    {
      get
      {
        return _banner_icon;
      }
      set
      {
        __isset.banner_icon = true;
        this._banner_icon = value;
      }
    }

    public int Upgrade_score
    {
      get
      {
        return _upgrade_score;
      }
      set
      {
        __isset.upgrade_score = true;
        this._upgrade_score = value;
      }
    }

    public Dictionary<byte, int> AttributeMap
    {
      get
      {
        return _attributeMap;
      }
      set
      {
        __isset.attributeMap = true;
        this._attributeMap = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool banner_id;
      public bool banner_flag;
      public bool banner_name;
      public bool trait;
      public bool banner_icon;
      public bool upgrade_score;
      public bool attributeMap;
    }

    public BannerResponse() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              Banner_id = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Banner_flag = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              Banner_name = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Byte) {
              Trait = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              Banner_icon = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              Upgrade_score = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.Map) {
              {
                AttributeMap = new Dictionary<byte, int>();
                TMap _map699 = iprot.ReadMapBegin();
                for( int _i700 = 0; _i700 < _map699.Count; ++_i700)
                {
                  byte _key701;
                  int _val702;
                  _key701 = iprot.ReadByte();
                  _val702 = iprot.ReadI32();
                  AttributeMap[_key701] = _val702;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("BannerResponse");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.banner_id) {
        field.Name = "banner_id";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Banner_id);
        oprot.WriteFieldEnd();
      }
      if (Banner_flag != null && __isset.banner_flag) {
        field.Name = "banner_flag";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Banner_flag);
        oprot.WriteFieldEnd();
      }
      if (Banner_name != null && __isset.banner_name) {
        field.Name = "banner_name";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Banner_name);
        oprot.WriteFieldEnd();
      }
      if (__isset.trait) {
        field.Name = "trait";
        field.Type = TType.Byte;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(Trait);
        oprot.WriteFieldEnd();
      }
      if (__isset.banner_icon) {
        field.Name = "banner_icon";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Banner_icon);
        oprot.WriteFieldEnd();
      }
      if (__isset.upgrade_score) {
        field.Name = "upgrade_score";
        field.Type = TType.I32;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Upgrade_score);
        oprot.WriteFieldEnd();
      }
      if (AttributeMap != null && __isset.attributeMap) {
        field.Name = "attributeMap";
        field.Type = TType.Map;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.Byte, TType.I32, AttributeMap.Count));
          foreach (byte _iter703 in AttributeMap.Keys)
          {
            oprot.WriteByte(_iter703);
            oprot.WriteI32(AttributeMap[_iter703]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("BannerResponse(");
      sb.Append("Banner_id: ");
      sb.Append(Banner_id);
      sb.Append(",Banner_flag: ");
      sb.Append(Banner_flag);
      sb.Append(",Banner_name: ");
      sb.Append(Banner_name);
      sb.Append(",Trait: ");
      sb.Append(Trait);
      sb.Append(",Banner_icon: ");
      sb.Append(Banner_icon);
      sb.Append(",Upgrade_score: ");
      sb.Append(Upgrade_score);
      sb.Append(",AttributeMap: ");
      sb.Append(AttributeMap);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
