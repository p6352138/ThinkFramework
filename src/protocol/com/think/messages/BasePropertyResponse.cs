/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace com.think.messages
{

  [Serializable]
  public partial class BasePropertyResponse : TBase
  {
    private int _power;
    private int _magic;
    private int _skill;
    private int _powerPotential;
    private int _magicPotential;
    private int _skillPotential;

    public int Power
    {
      get
      {
        return _power;
      }
      set
      {
        __isset.power = true;
        this._power = value;
      }
    }

    public int Magic
    {
      get
      {
        return _magic;
      }
      set
      {
        __isset.magic = true;
        this._magic = value;
      }
    }

    public int Skill
    {
      get
      {
        return _skill;
      }
      set
      {
        __isset.skill = true;
        this._skill = value;
      }
    }

    public int PowerPotential
    {
      get
      {
        return _powerPotential;
      }
      set
      {
        __isset.powerPotential = true;
        this._powerPotential = value;
      }
    }

    public int MagicPotential
    {
      get
      {
        return _magicPotential;
      }
      set
      {
        __isset.magicPotential = true;
        this._magicPotential = value;
      }
    }

    public int SkillPotential
    {
      get
      {
        return _skillPotential;
      }
      set
      {
        __isset.skillPotential = true;
        this._skillPotential = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool power;
      public bool magic;
      public bool skill;
      public bool powerPotential;
      public bool magicPotential;
      public bool skillPotential;
    }

    public BasePropertyResponse() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              Power = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              Magic = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              Skill = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              PowerPotential = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              MagicPotential = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              SkillPotential = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("BasePropertyResponse");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.power) {
        field.Name = "power";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Power);
        oprot.WriteFieldEnd();
      }
      if (__isset.magic) {
        field.Name = "magic";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Magic);
        oprot.WriteFieldEnd();
      }
      if (__isset.skill) {
        field.Name = "skill";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Skill);
        oprot.WriteFieldEnd();
      }
      if (__isset.powerPotential) {
        field.Name = "powerPotential";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(PowerPotential);
        oprot.WriteFieldEnd();
      }
      if (__isset.magicPotential) {
        field.Name = "magicPotential";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(MagicPotential);
        oprot.WriteFieldEnd();
      }
      if (__isset.skillPotential) {
        field.Name = "skillPotential";
        field.Type = TType.I32;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(SkillPotential);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("BasePropertyResponse(");
      sb.Append("Power: ");
      sb.Append(Power);
      sb.Append(",Magic: ");
      sb.Append(Magic);
      sb.Append(",Skill: ");
      sb.Append(Skill);
      sb.Append(",PowerPotential: ");
      sb.Append(PowerPotential);
      sb.Append(",MagicPotential: ");
      sb.Append(MagicPotential);
      sb.Append(",SkillPotential: ");
      sb.Append(SkillPotential);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
