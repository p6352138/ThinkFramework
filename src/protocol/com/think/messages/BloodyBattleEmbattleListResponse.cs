/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace com.think.messages
{

  [Serializable]
  public partial class BloodyBattleEmbattleListResponse : TBase
  {
    private int _dungeonId;
    private int _dungeonMapID;
    private int _dungeon_general_id;
    private List<BloodyBattleEmbattleResponse> _monsterEmbattleResponseList;
    private bool _hadFighted;
    private bool _last_monster;
    private string _generalDesc;
    private string _general_name;

    public int DungeonId
    {
      get
      {
        return _dungeonId;
      }
      set
      {
        __isset.dungeonId = true;
        this._dungeonId = value;
      }
    }

    public int DungeonMapID
    {
      get
      {
        return _dungeonMapID;
      }
      set
      {
        __isset.dungeonMapID = true;
        this._dungeonMapID = value;
      }
    }

    public int Dungeon_general_id
    {
      get
      {
        return _dungeon_general_id;
      }
      set
      {
        __isset.dungeon_general_id = true;
        this._dungeon_general_id = value;
      }
    }

    public List<BloodyBattleEmbattleResponse> MonsterEmbattleResponseList
    {
      get
      {
        return _monsterEmbattleResponseList;
      }
      set
      {
        __isset.monsterEmbattleResponseList = true;
        this._monsterEmbattleResponseList = value;
      }
    }

    public bool HadFighted
    {
      get
      {
        return _hadFighted;
      }
      set
      {
        __isset.hadFighted = true;
        this._hadFighted = value;
      }
    }

    public bool Last_monster
    {
      get
      {
        return _last_monster;
      }
      set
      {
        __isset.last_monster = true;
        this._last_monster = value;
      }
    }

    public string GeneralDesc
    {
      get
      {
        return _generalDesc;
      }
      set
      {
        __isset.generalDesc = true;
        this._generalDesc = value;
      }
    }

    public string General_name
    {
      get
      {
        return _general_name;
      }
      set
      {
        __isset.general_name = true;
        this._general_name = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool dungeonId;
      public bool dungeonMapID;
      public bool dungeon_general_id;
      public bool monsterEmbattleResponseList;
      public bool hadFighted;
      public bool last_monster;
      public bool generalDesc;
      public bool general_name;
    }

    public BloodyBattleEmbattleListResponse() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              DungeonId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              DungeonMapID = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              Dungeon_general_id = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.List) {
              {
                MonsterEmbattleResponseList = new List<BloodyBattleEmbattleResponse>();
                TList _list716 = iprot.ReadListBegin();
                for( int _i717 = 0; _i717 < _list716.Count; ++_i717)
                {
                  BloodyBattleEmbattleResponse _elem718 = new BloodyBattleEmbattleResponse();
                  _elem718 = new BloodyBattleEmbattleResponse();
                  _elem718.Read(iprot);
                  MonsterEmbattleResponseList.Add(_elem718);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Bool) {
              HadFighted = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.Bool) {
              Last_monster = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.String) {
              GeneralDesc = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.String) {
              General_name = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("BloodyBattleEmbattleListResponse");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.dungeonId) {
        field.Name = "dungeonId";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(DungeonId);
        oprot.WriteFieldEnd();
      }
      if (__isset.dungeonMapID) {
        field.Name = "dungeonMapID";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(DungeonMapID);
        oprot.WriteFieldEnd();
      }
      if (__isset.dungeon_general_id) {
        field.Name = "dungeon_general_id";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Dungeon_general_id);
        oprot.WriteFieldEnd();
      }
      if (MonsterEmbattleResponseList != null && __isset.monsterEmbattleResponseList) {
        field.Name = "monsterEmbattleResponseList";
        field.Type = TType.List;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, MonsterEmbattleResponseList.Count));
          foreach (BloodyBattleEmbattleResponse _iter719 in MonsterEmbattleResponseList)
          {
            _iter719.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.hadFighted) {
        field.Name = "hadFighted";
        field.Type = TType.Bool;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(HadFighted);
        oprot.WriteFieldEnd();
      }
      if (__isset.last_monster) {
        field.Name = "last_monster";
        field.Type = TType.Bool;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(Last_monster);
        oprot.WriteFieldEnd();
      }
      if (GeneralDesc != null && __isset.generalDesc) {
        field.Name = "generalDesc";
        field.Type = TType.String;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(GeneralDesc);
        oprot.WriteFieldEnd();
      }
      if (General_name != null && __isset.general_name) {
        field.Name = "general_name";
        field.Type = TType.String;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(General_name);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("BloodyBattleEmbattleListResponse(");
      sb.Append("DungeonId: ");
      sb.Append(DungeonId);
      sb.Append(",DungeonMapID: ");
      sb.Append(DungeonMapID);
      sb.Append(",Dungeon_general_id: ");
      sb.Append(Dungeon_general_id);
      sb.Append(",MonsterEmbattleResponseList: ");
      sb.Append(MonsterEmbattleResponseList);
      sb.Append(",HadFighted: ");
      sb.Append(HadFighted);
      sb.Append(",Last_monster: ");
      sb.Append(Last_monster);
      sb.Append(",GeneralDesc: ");
      sb.Append(GeneralDesc);
      sb.Append(",General_name: ");
      sb.Append(General_name);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
