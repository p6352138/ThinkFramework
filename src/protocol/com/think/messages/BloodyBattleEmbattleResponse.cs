/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace com.think.messages
{

  [Serializable]
  public partial class BloodyBattleEmbattleResponse : TBase
  {
    private byte _site_id;
    private int _general_id;
    private string _general_name;
    private int _general_level;
    private int _icon;
    private int _hp;
    private int _maxHp;
    private short _dander;
    private short _release_skill_dander;
    private bool _dead;
    private int _objectID;
    private int _instanceId;
    private byte _trait;

    public byte Site_id
    {
      get
      {
        return _site_id;
      }
      set
      {
        __isset.site_id = true;
        this._site_id = value;
      }
    }

    public int General_id
    {
      get
      {
        return _general_id;
      }
      set
      {
        __isset.general_id = true;
        this._general_id = value;
      }
    }

    public string General_name
    {
      get
      {
        return _general_name;
      }
      set
      {
        __isset.general_name = true;
        this._general_name = value;
      }
    }

    public int General_level
    {
      get
      {
        return _general_level;
      }
      set
      {
        __isset.general_level = true;
        this._general_level = value;
      }
    }

    public int Icon
    {
      get
      {
        return _icon;
      }
      set
      {
        __isset.icon = true;
        this._icon = value;
      }
    }

    public int Hp
    {
      get
      {
        return _hp;
      }
      set
      {
        __isset.hp = true;
        this._hp = value;
      }
    }

    public int MaxHp
    {
      get
      {
        return _maxHp;
      }
      set
      {
        __isset.maxHp = true;
        this._maxHp = value;
      }
    }

    public short Dander
    {
      get
      {
        return _dander;
      }
      set
      {
        __isset.dander = true;
        this._dander = value;
      }
    }

    public short Release_skill_dander
    {
      get
      {
        return _release_skill_dander;
      }
      set
      {
        __isset.release_skill_dander = true;
        this._release_skill_dander = value;
      }
    }

    public bool Dead
    {
      get
      {
        return _dead;
      }
      set
      {
        __isset.dead = true;
        this._dead = value;
      }
    }

    public int ObjectID
    {
      get
      {
        return _objectID;
      }
      set
      {
        __isset.objectID = true;
        this._objectID = value;
      }
    }

    public int InstanceId
    {
      get
      {
        return _instanceId;
      }
      set
      {
        __isset.instanceId = true;
        this._instanceId = value;
      }
    }

    public byte Trait
    {
      get
      {
        return _trait;
      }
      set
      {
        __isset.trait = true;
        this._trait = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool site_id;
      public bool general_id;
      public bool general_name;
      public bool general_level;
      public bool icon;
      public bool hp;
      public bool maxHp;
      public bool dander;
      public bool release_skill_dander;
      public bool dead;
      public bool objectID;
      public bool instanceId;
      public bool trait;
    }

    public BloodyBattleEmbattleResponse() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Byte) {
              Site_id = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              General_id = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              General_name = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              General_level = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              Icon = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              Hp = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I32) {
              MaxHp = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.I16) {
              Dander = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.I16) {
              Release_skill_dander = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.Bool) {
              Dead = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.I32) {
              ObjectID = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.I32) {
              InstanceId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.Byte) {
              Trait = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("BloodyBattleEmbattleResponse");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.site_id) {
        field.Name = "site_id";
        field.Type = TType.Byte;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(Site_id);
        oprot.WriteFieldEnd();
      }
      if (__isset.general_id) {
        field.Name = "general_id";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(General_id);
        oprot.WriteFieldEnd();
      }
      if (General_name != null && __isset.general_name) {
        field.Name = "general_name";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(General_name);
        oprot.WriteFieldEnd();
      }
      if (__isset.general_level) {
        field.Name = "general_level";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(General_level);
        oprot.WriteFieldEnd();
      }
      if (__isset.icon) {
        field.Name = "icon";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Icon);
        oprot.WriteFieldEnd();
      }
      if (__isset.hp) {
        field.Name = "hp";
        field.Type = TType.I32;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Hp);
        oprot.WriteFieldEnd();
      }
      if (__isset.maxHp) {
        field.Name = "maxHp";
        field.Type = TType.I32;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(MaxHp);
        oprot.WriteFieldEnd();
      }
      if (__isset.dander) {
        field.Name = "dander";
        field.Type = TType.I16;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(Dander);
        oprot.WriteFieldEnd();
      }
      if (__isset.release_skill_dander) {
        field.Name = "release_skill_dander";
        field.Type = TType.I16;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(Release_skill_dander);
        oprot.WriteFieldEnd();
      }
      if (__isset.dead) {
        field.Name = "dead";
        field.Type = TType.Bool;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(Dead);
        oprot.WriteFieldEnd();
      }
      if (__isset.objectID) {
        field.Name = "objectID";
        field.Type = TType.I32;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ObjectID);
        oprot.WriteFieldEnd();
      }
      if (__isset.instanceId) {
        field.Name = "instanceId";
        field.Type = TType.I32;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(InstanceId);
        oprot.WriteFieldEnd();
      }
      if (__isset.trait) {
        field.Name = "trait";
        field.Type = TType.Byte;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(Trait);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("BloodyBattleEmbattleResponse(");
      sb.Append("Site_id: ");
      sb.Append(Site_id);
      sb.Append(",General_id: ");
      sb.Append(General_id);
      sb.Append(",General_name: ");
      sb.Append(General_name);
      sb.Append(",General_level: ");
      sb.Append(General_level);
      sb.Append(",Icon: ");
      sb.Append(Icon);
      sb.Append(",Hp: ");
      sb.Append(Hp);
      sb.Append(",MaxHp: ");
      sb.Append(MaxHp);
      sb.Append(",Dander: ");
      sb.Append(Dander);
      sb.Append(",Release_skill_dander: ");
      sb.Append(Release_skill_dander);
      sb.Append(",Dead: ");
      sb.Append(Dead);
      sb.Append(",ObjectID: ");
      sb.Append(ObjectID);
      sb.Append(",InstanceId: ");
      sb.Append(InstanceId);
      sb.Append(",Trait: ");
      sb.Append(Trait);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
