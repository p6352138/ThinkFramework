/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace com.think.messages
{

  [Serializable]
  public partial class BloodyBattleResponse : TBase
  {
    private byte _respType;
    private List<BloodyBattleCheckpointResponse> _bloodyBattleCheckpointResponse;
    private bool _reciveAllAward;
    private int _needGold;
    private string _checkPointName;
    private List<BloodyBattleEmbattleResponse> _playerEmbattleList;
    private List<BloodyBattleEmbattleListResponse> _monsterEmbattleList;
    private ResourceListResponse _resource;
    private Dictionary<int, string> _fightLogIdMap;

    public byte RespType
    {
      get
      {
        return _respType;
      }
      set
      {
        __isset.respType = true;
        this._respType = value;
      }
    }

    public List<BloodyBattleCheckpointResponse> BloodyBattleCheckpointResponse
    {
      get
      {
        return _bloodyBattleCheckpointResponse;
      }
      set
      {
        __isset.bloodyBattleCheckpointResponse = true;
        this._bloodyBattleCheckpointResponse = value;
      }
    }

    public bool ReciveAllAward
    {
      get
      {
        return _reciveAllAward;
      }
      set
      {
        __isset.reciveAllAward = true;
        this._reciveAllAward = value;
      }
    }

    public int NeedGold
    {
      get
      {
        return _needGold;
      }
      set
      {
        __isset.needGold = true;
        this._needGold = value;
      }
    }

    public string CheckPointName
    {
      get
      {
        return _checkPointName;
      }
      set
      {
        __isset.checkPointName = true;
        this._checkPointName = value;
      }
    }

    public List<BloodyBattleEmbattleResponse> PlayerEmbattleList
    {
      get
      {
        return _playerEmbattleList;
      }
      set
      {
        __isset.playerEmbattleList = true;
        this._playerEmbattleList = value;
      }
    }

    public List<BloodyBattleEmbattleListResponse> MonsterEmbattleList
    {
      get
      {
        return _monsterEmbattleList;
      }
      set
      {
        __isset.monsterEmbattleList = true;
        this._monsterEmbattleList = value;
      }
    }

    public ResourceListResponse Resource
    {
      get
      {
        return _resource;
      }
      set
      {
        __isset.resource = true;
        this._resource = value;
      }
    }

    public Dictionary<int, string> FightLogIdMap
    {
      get
      {
        return _fightLogIdMap;
      }
      set
      {
        __isset.fightLogIdMap = true;
        this._fightLogIdMap = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool respType;
      public bool bloodyBattleCheckpointResponse;
      public bool reciveAllAward;
      public bool needGold;
      public bool checkPointName;
      public bool playerEmbattleList;
      public bool monsterEmbattleList;
      public bool resource;
      public bool fightLogIdMap;
    }

    public BloodyBattleResponse() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Byte) {
              RespType = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.List) {
              {
                BloodyBattleCheckpointResponse = new List<BloodyBattleCheckpointResponse>();
                TList _list720 = iprot.ReadListBegin();
                for( int _i721 = 0; _i721 < _list720.Count; ++_i721)
                {
                  BloodyBattleCheckpointResponse _elem722 = new BloodyBattleCheckpointResponse();
                  _elem722 = new BloodyBattleCheckpointResponse();
                  _elem722.Read(iprot);
                  BloodyBattleCheckpointResponse.Add(_elem722);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Bool) {
              ReciveAllAward = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              NeedGold = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              CheckPointName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.List) {
              {
                PlayerEmbattleList = new List<BloodyBattleEmbattleResponse>();
                TList _list723 = iprot.ReadListBegin();
                for( int _i724 = 0; _i724 < _list723.Count; ++_i724)
                {
                  BloodyBattleEmbattleResponse _elem725 = new BloodyBattleEmbattleResponse();
                  _elem725 = new BloodyBattleEmbattleResponse();
                  _elem725.Read(iprot);
                  PlayerEmbattleList.Add(_elem725);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.List) {
              {
                MonsterEmbattleList = new List<BloodyBattleEmbattleListResponse>();
                TList _list726 = iprot.ReadListBegin();
                for( int _i727 = 0; _i727 < _list726.Count; ++_i727)
                {
                  BloodyBattleEmbattleListResponse _elem728 = new BloodyBattleEmbattleListResponse();
                  _elem728 = new BloodyBattleEmbattleListResponse();
                  _elem728.Read(iprot);
                  MonsterEmbattleList.Add(_elem728);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.Struct) {
              Resource = new ResourceListResponse();
              Resource.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.Map) {
              {
                FightLogIdMap = new Dictionary<int, string>();
                TMap _map729 = iprot.ReadMapBegin();
                for( int _i730 = 0; _i730 < _map729.Count; ++_i730)
                {
                  int _key731;
                  string _val732;
                  _key731 = iprot.ReadI32();
                  _val732 = iprot.ReadString();
                  FightLogIdMap[_key731] = _val732;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("BloodyBattleResponse");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.respType) {
        field.Name = "respType";
        field.Type = TType.Byte;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(RespType);
        oprot.WriteFieldEnd();
      }
      if (BloodyBattleCheckpointResponse != null && __isset.bloodyBattleCheckpointResponse) {
        field.Name = "bloodyBattleCheckpointResponse";
        field.Type = TType.List;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, BloodyBattleCheckpointResponse.Count));
          foreach (BloodyBattleCheckpointResponse _iter733 in BloodyBattleCheckpointResponse)
          {
            _iter733.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.reciveAllAward) {
        field.Name = "reciveAllAward";
        field.Type = TType.Bool;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(ReciveAllAward);
        oprot.WriteFieldEnd();
      }
      if (__isset.needGold) {
        field.Name = "needGold";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(NeedGold);
        oprot.WriteFieldEnd();
      }
      if (CheckPointName != null && __isset.checkPointName) {
        field.Name = "checkPointName";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(CheckPointName);
        oprot.WriteFieldEnd();
      }
      if (PlayerEmbattleList != null && __isset.playerEmbattleList) {
        field.Name = "playerEmbattleList";
        field.Type = TType.List;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, PlayerEmbattleList.Count));
          foreach (BloodyBattleEmbattleResponse _iter734 in PlayerEmbattleList)
          {
            _iter734.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (MonsterEmbattleList != null && __isset.monsterEmbattleList) {
        field.Name = "monsterEmbattleList";
        field.Type = TType.List;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, MonsterEmbattleList.Count));
          foreach (BloodyBattleEmbattleListResponse _iter735 in MonsterEmbattleList)
          {
            _iter735.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Resource != null && __isset.resource) {
        field.Name = "resource";
        field.Type = TType.Struct;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        Resource.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (FightLogIdMap != null && __isset.fightLogIdMap) {
        field.Name = "fightLogIdMap";
        field.Type = TType.Map;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.I32, TType.String, FightLogIdMap.Count));
          foreach (int _iter736 in FightLogIdMap.Keys)
          {
            oprot.WriteI32(_iter736);
            oprot.WriteString(FightLogIdMap[_iter736]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("BloodyBattleResponse(");
      sb.Append("RespType: ");
      sb.Append(RespType);
      sb.Append(",BloodyBattleCheckpointResponse: ");
      sb.Append(BloodyBattleCheckpointResponse);
      sb.Append(",ReciveAllAward: ");
      sb.Append(ReciveAllAward);
      sb.Append(",NeedGold: ");
      sb.Append(NeedGold);
      sb.Append(",CheckPointName: ");
      sb.Append(CheckPointName);
      sb.Append(",PlayerEmbattleList: ");
      sb.Append(PlayerEmbattleList);
      sb.Append(",MonsterEmbattleList: ");
      sb.Append(MonsterEmbattleList);
      sb.Append(",Resource: ");
      sb.Append(Resource== null ? "<null>" : Resource.ToString());
      sb.Append(",FightLogIdMap: ");
      sb.Append(FightLogIdMap);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
