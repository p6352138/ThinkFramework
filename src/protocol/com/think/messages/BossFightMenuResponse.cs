/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace com.think.messages
{

  [Serializable]
  public partial class BossFightMenuResponse : TBase
  {
    private byte _activityId;
    private string _bossName;
    private int _icon;
    private int _dateTime;
    private byte _inspire;
    private int _forcesTime;
    private bool _autofight;
    private int _inspireGold;
    private int _inspireExploit;
    private int _maxHp;
    private int _hp;
    private int _number_of_people;
    private byte _effect;
    private int _player_hp;

    public byte ActivityId
    {
      get
      {
        return _activityId;
      }
      set
      {
        __isset.activityId = true;
        this._activityId = value;
      }
    }

    public string BossName
    {
      get
      {
        return _bossName;
      }
      set
      {
        __isset.bossName = true;
        this._bossName = value;
      }
    }

    public int Icon
    {
      get
      {
        return _icon;
      }
      set
      {
        __isset.icon = true;
        this._icon = value;
      }
    }

    public int DateTime
    {
      get
      {
        return _dateTime;
      }
      set
      {
        __isset.dateTime = true;
        this._dateTime = value;
      }
    }

    public byte Inspire
    {
      get
      {
        return _inspire;
      }
      set
      {
        __isset.inspire = true;
        this._inspire = value;
      }
    }

    public int ForcesTime
    {
      get
      {
        return _forcesTime;
      }
      set
      {
        __isset.forcesTime = true;
        this._forcesTime = value;
      }
    }

    public bool Autofight
    {
      get
      {
        return _autofight;
      }
      set
      {
        __isset.autofight = true;
        this._autofight = value;
      }
    }

    public int InspireGold
    {
      get
      {
        return _inspireGold;
      }
      set
      {
        __isset.inspireGold = true;
        this._inspireGold = value;
      }
    }

    public int InspireExploit
    {
      get
      {
        return _inspireExploit;
      }
      set
      {
        __isset.inspireExploit = true;
        this._inspireExploit = value;
      }
    }

    public int MaxHp
    {
      get
      {
        return _maxHp;
      }
      set
      {
        __isset.maxHp = true;
        this._maxHp = value;
      }
    }

    public int Hp
    {
      get
      {
        return _hp;
      }
      set
      {
        __isset.hp = true;
        this._hp = value;
      }
    }

    public int Number_of_people
    {
      get
      {
        return _number_of_people;
      }
      set
      {
        __isset.number_of_people = true;
        this._number_of_people = value;
      }
    }

    public byte Effect
    {
      get
      {
        return _effect;
      }
      set
      {
        __isset.effect = true;
        this._effect = value;
      }
    }

    public int Player_hp
    {
      get
      {
        return _player_hp;
      }
      set
      {
        __isset.player_hp = true;
        this._player_hp = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool activityId;
      public bool bossName;
      public bool icon;
      public bool dateTime;
      public bool inspire;
      public bool forcesTime;
      public bool autofight;
      public bool inspireGold;
      public bool inspireExploit;
      public bool maxHp;
      public bool hp;
      public bool number_of_people;
      public bool effect;
      public bool player_hp;
    }

    public BossFightMenuResponse() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Byte) {
              ActivityId = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              BossName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              Icon = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              DateTime = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Byte) {
              Inspire = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              ForcesTime = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.Bool) {
              Autofight = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.I32) {
              InspireGold = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.I32) {
              InspireExploit = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.I32) {
              MaxHp = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.I32) {
              Hp = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.I32) {
              Number_of_people = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.Byte) {
              Effect = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 14:
            if (field.Type == TType.I32) {
              Player_hp = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("BossFightMenuResponse");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.activityId) {
        field.Name = "activityId";
        field.Type = TType.Byte;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(ActivityId);
        oprot.WriteFieldEnd();
      }
      if (BossName != null && __isset.bossName) {
        field.Name = "bossName";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(BossName);
        oprot.WriteFieldEnd();
      }
      if (__isset.icon) {
        field.Name = "icon";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Icon);
        oprot.WriteFieldEnd();
      }
      if (__isset.dateTime) {
        field.Name = "dateTime";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(DateTime);
        oprot.WriteFieldEnd();
      }
      if (__isset.inspire) {
        field.Name = "inspire";
        field.Type = TType.Byte;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(Inspire);
        oprot.WriteFieldEnd();
      }
      if (__isset.forcesTime) {
        field.Name = "forcesTime";
        field.Type = TType.I32;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ForcesTime);
        oprot.WriteFieldEnd();
      }
      if (__isset.autofight) {
        field.Name = "autofight";
        field.Type = TType.Bool;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(Autofight);
        oprot.WriteFieldEnd();
      }
      if (__isset.inspireGold) {
        field.Name = "inspireGold";
        field.Type = TType.I32;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(InspireGold);
        oprot.WriteFieldEnd();
      }
      if (__isset.inspireExploit) {
        field.Name = "inspireExploit";
        field.Type = TType.I32;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(InspireExploit);
        oprot.WriteFieldEnd();
      }
      if (__isset.maxHp) {
        field.Name = "maxHp";
        field.Type = TType.I32;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(MaxHp);
        oprot.WriteFieldEnd();
      }
      if (__isset.hp) {
        field.Name = "hp";
        field.Type = TType.I32;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Hp);
        oprot.WriteFieldEnd();
      }
      if (__isset.number_of_people) {
        field.Name = "number_of_people";
        field.Type = TType.I32;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Number_of_people);
        oprot.WriteFieldEnd();
      }
      if (__isset.effect) {
        field.Name = "effect";
        field.Type = TType.Byte;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(Effect);
        oprot.WriteFieldEnd();
      }
      if (__isset.player_hp) {
        field.Name = "player_hp";
        field.Type = TType.I32;
        field.ID = 14;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Player_hp);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("BossFightMenuResponse(");
      sb.Append("ActivityId: ");
      sb.Append(ActivityId);
      sb.Append(",BossName: ");
      sb.Append(BossName);
      sb.Append(",Icon: ");
      sb.Append(Icon);
      sb.Append(",DateTime: ");
      sb.Append(DateTime);
      sb.Append(",Inspire: ");
      sb.Append(Inspire);
      sb.Append(",ForcesTime: ");
      sb.Append(ForcesTime);
      sb.Append(",Autofight: ");
      sb.Append(Autofight);
      sb.Append(",InspireGold: ");
      sb.Append(InspireGold);
      sb.Append(",InspireExploit: ");
      sb.Append(InspireExploit);
      sb.Append(",MaxHp: ");
      sb.Append(MaxHp);
      sb.Append(",Hp: ");
      sb.Append(Hp);
      sb.Append(",Number_of_people: ");
      sb.Append(Number_of_people);
      sb.Append(",Effect: ");
      sb.Append(Effect);
      sb.Append(",Player_hp: ");
      sb.Append(Player_hp);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
