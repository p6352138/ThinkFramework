/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace com.think.messages
{

  [Serializable]
  public partial class BossFightResponse : TBase
  {
    private short _playerNum;
    private List<BossFightRankingResponse> _ranking;
    private int _harm;
    private double _harm_percent;
    private int _boss_hp;

    public short PlayerNum
    {
      get
      {
        return _playerNum;
      }
      set
      {
        __isset.playerNum = true;
        this._playerNum = value;
      }
    }

    public List<BossFightRankingResponse> Ranking
    {
      get
      {
        return _ranking;
      }
      set
      {
        __isset.ranking = true;
        this._ranking = value;
      }
    }

    public int Harm
    {
      get
      {
        return _harm;
      }
      set
      {
        __isset.harm = true;
        this._harm = value;
      }
    }

    public double Harm_percent
    {
      get
      {
        return _harm_percent;
      }
      set
      {
        __isset.harm_percent = true;
        this._harm_percent = value;
      }
    }

    public int Boss_hp
    {
      get
      {
        return _boss_hp;
      }
      set
      {
        __isset.boss_hp = true;
        this._boss_hp = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool playerNum;
      public bool ranking;
      public bool harm;
      public bool harm_percent;
      public bool boss_hp;
    }

    public BossFightResponse() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I16) {
              PlayerNum = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.List) {
              {
                Ranking = new List<BossFightRankingResponse>();
                TList _list374 = iprot.ReadListBegin();
                for( int _i375 = 0; _i375 < _list374.Count; ++_i375)
                {
                  BossFightRankingResponse _elem376 = new BossFightRankingResponse();
                  _elem376 = new BossFightRankingResponse();
                  _elem376.Read(iprot);
                  Ranking.Add(_elem376);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              Harm = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Double) {
              Harm_percent = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              Boss_hp = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("BossFightResponse");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.playerNum) {
        field.Name = "playerNum";
        field.Type = TType.I16;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(PlayerNum);
        oprot.WriteFieldEnd();
      }
      if (Ranking != null && __isset.ranking) {
        field.Name = "ranking";
        field.Type = TType.List;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Ranking.Count));
          foreach (BossFightRankingResponse _iter377 in Ranking)
          {
            _iter377.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.harm) {
        field.Name = "harm";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Harm);
        oprot.WriteFieldEnd();
      }
      if (__isset.harm_percent) {
        field.Name = "harm_percent";
        field.Type = TType.Double;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(Harm_percent);
        oprot.WriteFieldEnd();
      }
      if (__isset.boss_hp) {
        field.Name = "boss_hp";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Boss_hp);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("BossFightResponse(");
      sb.Append("PlayerNum: ");
      sb.Append(PlayerNum);
      sb.Append(",Ranking: ");
      sb.Append(Ranking);
      sb.Append(",Harm: ");
      sb.Append(Harm);
      sb.Append(",Harm_percent: ");
      sb.Append(Harm_percent);
      sb.Append(",Boss_hp: ");
      sb.Append(Boss_hp);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
