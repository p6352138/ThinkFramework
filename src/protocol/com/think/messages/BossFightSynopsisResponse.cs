/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace com.think.messages
{

  [Serializable]
  public partial class BossFightSynopsisResponse : TBase
  {
    private int _seq_id;
    private PlayerBossFightResponse _playerBossFight;
    private PlayerBossFightHarmResponse _playerBossFightHarm;
    private int _delay;

    public int Seq_id
    {
      get
      {
        return _seq_id;
      }
      set
      {
        __isset.seq_id = true;
        this._seq_id = value;
      }
    }

    public PlayerBossFightResponse PlayerBossFight
    {
      get
      {
        return _playerBossFight;
      }
      set
      {
        __isset.playerBossFight = true;
        this._playerBossFight = value;
      }
    }

    public PlayerBossFightHarmResponse PlayerBossFightHarm
    {
      get
      {
        return _playerBossFightHarm;
      }
      set
      {
        __isset.playerBossFightHarm = true;
        this._playerBossFightHarm = value;
      }
    }

    public int Delay
    {
      get
      {
        return _delay;
      }
      set
      {
        __isset.delay = true;
        this._delay = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool seq_id;
      public bool playerBossFight;
      public bool playerBossFightHarm;
      public bool delay;
    }

    public BossFightSynopsisResponse() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              Seq_id = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Struct) {
              PlayerBossFight = new PlayerBossFightResponse();
              PlayerBossFight.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Struct) {
              PlayerBossFightHarm = new PlayerBossFightHarmResponse();
              PlayerBossFightHarm.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              Delay = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("BossFightSynopsisResponse");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.seq_id) {
        field.Name = "seq_id";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Seq_id);
        oprot.WriteFieldEnd();
      }
      if (PlayerBossFight != null && __isset.playerBossFight) {
        field.Name = "playerBossFight";
        field.Type = TType.Struct;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        PlayerBossFight.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (PlayerBossFightHarm != null && __isset.playerBossFightHarm) {
        field.Name = "playerBossFightHarm";
        field.Type = TType.Struct;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        PlayerBossFightHarm.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (__isset.delay) {
        field.Name = "delay";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Delay);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("BossFightSynopsisResponse(");
      sb.Append("Seq_id: ");
      sb.Append(Seq_id);
      sb.Append(",PlayerBossFight: ");
      sb.Append(PlayerBossFight== null ? "<null>" : PlayerBossFight.ToString());
      sb.Append(",PlayerBossFightHarm: ");
      sb.Append(PlayerBossFightHarm== null ? "<null>" : PlayerBossFightHarm.ToString());
      sb.Append(",Delay: ");
      sb.Append(Delay);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
