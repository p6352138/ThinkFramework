/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace com.think.messages
{

  [Serializable]
  public partial class ClanFightPlayerMoveResponse : TBase
  {
    private ClanFightPlayerResponse _playerResponse;
    private ClanFightSeatResponse _sourceSeat;
    private ClanFightSeatResponse _targetSeat;

    public ClanFightPlayerResponse PlayerResponse
    {
      get
      {
        return _playerResponse;
      }
      set
      {
        __isset.playerResponse = true;
        this._playerResponse = value;
      }
    }

    public ClanFightSeatResponse SourceSeat
    {
      get
      {
        return _sourceSeat;
      }
      set
      {
        __isset.sourceSeat = true;
        this._sourceSeat = value;
      }
    }

    public ClanFightSeatResponse TargetSeat
    {
      get
      {
        return _targetSeat;
      }
      set
      {
        __isset.targetSeat = true;
        this._targetSeat = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool playerResponse;
      public bool sourceSeat;
      public bool targetSeat;
    }

    public ClanFightPlayerMoveResponse() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct) {
              PlayerResponse = new ClanFightPlayerResponse();
              PlayerResponse.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Struct) {
              SourceSeat = new ClanFightSeatResponse();
              SourceSeat.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Struct) {
              TargetSeat = new ClanFightSeatResponse();
              TargetSeat.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("ClanFightPlayerMoveResponse");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (PlayerResponse != null && __isset.playerResponse) {
        field.Name = "playerResponse";
        field.Type = TType.Struct;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        PlayerResponse.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (SourceSeat != null && __isset.sourceSeat) {
        field.Name = "sourceSeat";
        field.Type = TType.Struct;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        SourceSeat.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (TargetSeat != null && __isset.targetSeat) {
        field.Name = "targetSeat";
        field.Type = TType.Struct;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        TargetSeat.Write(oprot);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("ClanFightPlayerMoveResponse(");
      sb.Append("PlayerResponse: ");
      sb.Append(PlayerResponse== null ? "<null>" : PlayerResponse.ToString());
      sb.Append(",SourceSeat: ");
      sb.Append(SourceSeat== null ? "<null>" : SourceSeat.ToString());
      sb.Append(",TargetSeat: ");
      sb.Append(TargetSeat== null ? "<null>" : TargetSeat.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }

}
