/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace com.think.messages
{

  [Serializable]
  public partial class ClanFightPlayerResponse : TBase
  {
    private int _uid;
    private string _playerName;
    private int _clan_ranking_id;
    private byte _group;
    private short _alreadyWayTime;
    private short _winnerKillNum;
    private byte _playerType;
    private short _godTimes;
    private int _icon;

    public int Uid
    {
      get
      {
        return _uid;
      }
      set
      {
        __isset.uid = true;
        this._uid = value;
      }
    }

    public string PlayerName
    {
      get
      {
        return _playerName;
      }
      set
      {
        __isset.playerName = true;
        this._playerName = value;
      }
    }

    public int Clan_ranking_id
    {
      get
      {
        return _clan_ranking_id;
      }
      set
      {
        __isset.clan_ranking_id = true;
        this._clan_ranking_id = value;
      }
    }

    public byte Group
    {
      get
      {
        return _group;
      }
      set
      {
        __isset.group = true;
        this._group = value;
      }
    }

    public short AlreadyWayTime
    {
      get
      {
        return _alreadyWayTime;
      }
      set
      {
        __isset.alreadyWayTime = true;
        this._alreadyWayTime = value;
      }
    }

    public short WinnerKillNum
    {
      get
      {
        return _winnerKillNum;
      }
      set
      {
        __isset.winnerKillNum = true;
        this._winnerKillNum = value;
      }
    }

    public byte PlayerType
    {
      get
      {
        return _playerType;
      }
      set
      {
        __isset.playerType = true;
        this._playerType = value;
      }
    }

    public short GodTimes
    {
      get
      {
        return _godTimes;
      }
      set
      {
        __isset.godTimes = true;
        this._godTimes = value;
      }
    }

    public int Icon
    {
      get
      {
        return _icon;
      }
      set
      {
        __isset.icon = true;
        this._icon = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool uid;
      public bool playerName;
      public bool clan_ranking_id;
      public bool group;
      public bool alreadyWayTime;
      public bool winnerKillNum;
      public bool playerType;
      public bool godTimes;
      public bool icon;
    }

    public ClanFightPlayerResponse() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              Uid = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              PlayerName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              Clan_ranking_id = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Byte) {
              Group = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I16) {
              AlreadyWayTime = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I16) {
              WinnerKillNum = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.Byte) {
              PlayerType = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.I16) {
              GodTimes = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.I32) {
              Icon = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("ClanFightPlayerResponse");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.uid) {
        field.Name = "uid";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Uid);
        oprot.WriteFieldEnd();
      }
      if (PlayerName != null && __isset.playerName) {
        field.Name = "playerName";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(PlayerName);
        oprot.WriteFieldEnd();
      }
      if (__isset.clan_ranking_id) {
        field.Name = "clan_ranking_id";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Clan_ranking_id);
        oprot.WriteFieldEnd();
      }
      if (__isset.group) {
        field.Name = "group";
        field.Type = TType.Byte;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(Group);
        oprot.WriteFieldEnd();
      }
      if (__isset.alreadyWayTime) {
        field.Name = "alreadyWayTime";
        field.Type = TType.I16;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(AlreadyWayTime);
        oprot.WriteFieldEnd();
      }
      if (__isset.winnerKillNum) {
        field.Name = "winnerKillNum";
        field.Type = TType.I16;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(WinnerKillNum);
        oprot.WriteFieldEnd();
      }
      if (__isset.playerType) {
        field.Name = "playerType";
        field.Type = TType.Byte;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(PlayerType);
        oprot.WriteFieldEnd();
      }
      if (__isset.godTimes) {
        field.Name = "godTimes";
        field.Type = TType.I16;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(GodTimes);
        oprot.WriteFieldEnd();
      }
      if (__isset.icon) {
        field.Name = "icon";
        field.Type = TType.I32;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Icon);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("ClanFightPlayerResponse(");
      sb.Append("Uid: ");
      sb.Append(Uid);
      sb.Append(",PlayerName: ");
      sb.Append(PlayerName);
      sb.Append(",Clan_ranking_id: ");
      sb.Append(Clan_ranking_id);
      sb.Append(",Group: ");
      sb.Append(Group);
      sb.Append(",AlreadyWayTime: ");
      sb.Append(AlreadyWayTime);
      sb.Append(",WinnerKillNum: ");
      sb.Append(WinnerKillNum);
      sb.Append(",PlayerType: ");
      sb.Append(PlayerType);
      sb.Append(",GodTimes: ");
      sb.Append(GodTimes);
      sb.Append(",Icon: ");
      sb.Append(Icon);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
