/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace com.think.messages
{

  [Serializable]
  public partial class ClanFightPlayerSelfResponse : TBase
  {
    private short _bodyMaterialNum;
    private ClanFightSeatResponse _clanFightSeatResponse;
    private short _reviveCountdown;
    private byte _group;
    private int _clan_ranking_id;
    private short _winnerKillNum;
    private int _killer_id;
    private string _killer_name;
    private int _fight_id;
    private string _player_inspire;
    private string _dead_inspire;
    private int _hp;
    private int _max_hp;
    private int _killer_hp;
    private int _killer_max_hp;
    private int _killer_icon;

    public short BodyMaterialNum
    {
      get
      {
        return _bodyMaterialNum;
      }
      set
      {
        __isset.bodyMaterialNum = true;
        this._bodyMaterialNum = value;
      }
    }

    public ClanFightSeatResponse ClanFightSeatResponse
    {
      get
      {
        return _clanFightSeatResponse;
      }
      set
      {
        __isset.clanFightSeatResponse = true;
        this._clanFightSeatResponse = value;
      }
    }

    public short ReviveCountdown
    {
      get
      {
        return _reviveCountdown;
      }
      set
      {
        __isset.reviveCountdown = true;
        this._reviveCountdown = value;
      }
    }

    public byte Group
    {
      get
      {
        return _group;
      }
      set
      {
        __isset.group = true;
        this._group = value;
      }
    }

    public int Clan_ranking_id
    {
      get
      {
        return _clan_ranking_id;
      }
      set
      {
        __isset.clan_ranking_id = true;
        this._clan_ranking_id = value;
      }
    }

    public short WinnerKillNum
    {
      get
      {
        return _winnerKillNum;
      }
      set
      {
        __isset.winnerKillNum = true;
        this._winnerKillNum = value;
      }
    }

    public int Killer_id
    {
      get
      {
        return _killer_id;
      }
      set
      {
        __isset.killer_id = true;
        this._killer_id = value;
      }
    }

    public string Killer_name
    {
      get
      {
        return _killer_name;
      }
      set
      {
        __isset.killer_name = true;
        this._killer_name = value;
      }
    }

    public int Fight_id
    {
      get
      {
        return _fight_id;
      }
      set
      {
        __isset.fight_id = true;
        this._fight_id = value;
      }
    }

    public string Player_inspire
    {
      get
      {
        return _player_inspire;
      }
      set
      {
        __isset.player_inspire = true;
        this._player_inspire = value;
      }
    }

    public string Dead_inspire
    {
      get
      {
        return _dead_inspire;
      }
      set
      {
        __isset.dead_inspire = true;
        this._dead_inspire = value;
      }
    }

    public int Hp
    {
      get
      {
        return _hp;
      }
      set
      {
        __isset.hp = true;
        this._hp = value;
      }
    }

    public int Max_hp
    {
      get
      {
        return _max_hp;
      }
      set
      {
        __isset.max_hp = true;
        this._max_hp = value;
      }
    }

    public int Killer_hp
    {
      get
      {
        return _killer_hp;
      }
      set
      {
        __isset.killer_hp = true;
        this._killer_hp = value;
      }
    }

    public int Killer_max_hp
    {
      get
      {
        return _killer_max_hp;
      }
      set
      {
        __isset.killer_max_hp = true;
        this._killer_max_hp = value;
      }
    }

    public int Killer_icon
    {
      get
      {
        return _killer_icon;
      }
      set
      {
        __isset.killer_icon = true;
        this._killer_icon = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool bodyMaterialNum;
      public bool clanFightSeatResponse;
      public bool reviveCountdown;
      public bool group;
      public bool clan_ranking_id;
      public bool winnerKillNum;
      public bool killer_id;
      public bool killer_name;
      public bool fight_id;
      public bool player_inspire;
      public bool dead_inspire;
      public bool hp;
      public bool max_hp;
      public bool killer_hp;
      public bool killer_max_hp;
      public bool killer_icon;
    }

    public ClanFightPlayerSelfResponse() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I16) {
              BodyMaterialNum = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Struct) {
              ClanFightSeatResponse = new ClanFightSeatResponse();
              ClanFightSeatResponse.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I16) {
              ReviveCountdown = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Byte) {
              Group = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              Clan_ranking_id = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I16) {
              WinnerKillNum = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I32) {
              Killer_id = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.String) {
              Killer_name = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.I32) {
              Fight_id = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.String) {
              Player_inspire = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.String) {
              Dead_inspire = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.I32) {
              Hp = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.I32) {
              Max_hp = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 14:
            if (field.Type == TType.I32) {
              Killer_hp = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 15:
            if (field.Type == TType.I32) {
              Killer_max_hp = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 16:
            if (field.Type == TType.I32) {
              Killer_icon = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("ClanFightPlayerSelfResponse");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.bodyMaterialNum) {
        field.Name = "bodyMaterialNum";
        field.Type = TType.I16;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(BodyMaterialNum);
        oprot.WriteFieldEnd();
      }
      if (ClanFightSeatResponse != null && __isset.clanFightSeatResponse) {
        field.Name = "clanFightSeatResponse";
        field.Type = TType.Struct;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        ClanFightSeatResponse.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (__isset.reviveCountdown) {
        field.Name = "reviveCountdown";
        field.Type = TType.I16;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(ReviveCountdown);
        oprot.WriteFieldEnd();
      }
      if (__isset.group) {
        field.Name = "group";
        field.Type = TType.Byte;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(Group);
        oprot.WriteFieldEnd();
      }
      if (__isset.clan_ranking_id) {
        field.Name = "clan_ranking_id";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Clan_ranking_id);
        oprot.WriteFieldEnd();
      }
      if (__isset.winnerKillNum) {
        field.Name = "winnerKillNum";
        field.Type = TType.I16;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(WinnerKillNum);
        oprot.WriteFieldEnd();
      }
      if (__isset.killer_id) {
        field.Name = "killer_id";
        field.Type = TType.I32;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Killer_id);
        oprot.WriteFieldEnd();
      }
      if (Killer_name != null && __isset.killer_name) {
        field.Name = "killer_name";
        field.Type = TType.String;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Killer_name);
        oprot.WriteFieldEnd();
      }
      if (__isset.fight_id) {
        field.Name = "fight_id";
        field.Type = TType.I32;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Fight_id);
        oprot.WriteFieldEnd();
      }
      if (Player_inspire != null && __isset.player_inspire) {
        field.Name = "player_inspire";
        field.Type = TType.String;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Player_inspire);
        oprot.WriteFieldEnd();
      }
      if (Dead_inspire != null && __isset.dead_inspire) {
        field.Name = "dead_inspire";
        field.Type = TType.String;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Dead_inspire);
        oprot.WriteFieldEnd();
      }
      if (__isset.hp) {
        field.Name = "hp";
        field.Type = TType.I32;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Hp);
        oprot.WriteFieldEnd();
      }
      if (__isset.max_hp) {
        field.Name = "max_hp";
        field.Type = TType.I32;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Max_hp);
        oprot.WriteFieldEnd();
      }
      if (__isset.killer_hp) {
        field.Name = "killer_hp";
        field.Type = TType.I32;
        field.ID = 14;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Killer_hp);
        oprot.WriteFieldEnd();
      }
      if (__isset.killer_max_hp) {
        field.Name = "killer_max_hp";
        field.Type = TType.I32;
        field.ID = 15;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Killer_max_hp);
        oprot.WriteFieldEnd();
      }
      if (__isset.killer_icon) {
        field.Name = "killer_icon";
        field.Type = TType.I32;
        field.ID = 16;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Killer_icon);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("ClanFightPlayerSelfResponse(");
      sb.Append("BodyMaterialNum: ");
      sb.Append(BodyMaterialNum);
      sb.Append(",ClanFightSeatResponse: ");
      sb.Append(ClanFightSeatResponse== null ? "<null>" : ClanFightSeatResponse.ToString());
      sb.Append(",ReviveCountdown: ");
      sb.Append(ReviveCountdown);
      sb.Append(",Group: ");
      sb.Append(Group);
      sb.Append(",Clan_ranking_id: ");
      sb.Append(Clan_ranking_id);
      sb.Append(",WinnerKillNum: ");
      sb.Append(WinnerKillNum);
      sb.Append(",Killer_id: ");
      sb.Append(Killer_id);
      sb.Append(",Killer_name: ");
      sb.Append(Killer_name);
      sb.Append(",Fight_id: ");
      sb.Append(Fight_id);
      sb.Append(",Player_inspire: ");
      sb.Append(Player_inspire);
      sb.Append(",Dead_inspire: ");
      sb.Append(Dead_inspire);
      sb.Append(",Hp: ");
      sb.Append(Hp);
      sb.Append(",Max_hp: ");
      sb.Append(Max_hp);
      sb.Append(",Killer_hp: ");
      sb.Append(Killer_hp);
      sb.Append(",Killer_max_hp: ");
      sb.Append(Killer_max_hp);
      sb.Append(",Killer_icon: ");
      sb.Append(Killer_icon);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
