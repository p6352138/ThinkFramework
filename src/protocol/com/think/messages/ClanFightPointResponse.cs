/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace com.think.messages
{

  [Serializable]
  public partial class ClanFightPointResponse : TBase
  {
    private short _id;
    private string _pointName;
    private string _description;
    private THashSet<ClanFightPlayerResponse> _fightPlayerSet;
    private short _maxExp;
    private short _curExp;
    private byte _group;
    private short _iconId;
    private byte _lvl;
    private bool _canUpgrade;
    private byte _functionTypte;
    private bool _fireEffect;
    private List<ClanFightPlayerBuffResponse> _buffList;
    private string _pointScoreRate;

    public short Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }

    public string PointName
    {
      get
      {
        return _pointName;
      }
      set
      {
        __isset.pointName = true;
        this._pointName = value;
      }
    }

    public string Description
    {
      get
      {
        return _description;
      }
      set
      {
        __isset.description = true;
        this._description = value;
      }
    }

    public THashSet<ClanFightPlayerResponse> FightPlayerSet
    {
      get
      {
        return _fightPlayerSet;
      }
      set
      {
        __isset.fightPlayerSet = true;
        this._fightPlayerSet = value;
      }
    }

    public short MaxExp
    {
      get
      {
        return _maxExp;
      }
      set
      {
        __isset.maxExp = true;
        this._maxExp = value;
      }
    }

    public short CurExp
    {
      get
      {
        return _curExp;
      }
      set
      {
        __isset.curExp = true;
        this._curExp = value;
      }
    }

    public byte Group
    {
      get
      {
        return _group;
      }
      set
      {
        __isset.group = true;
        this._group = value;
      }
    }

    public short IconId
    {
      get
      {
        return _iconId;
      }
      set
      {
        __isset.iconId = true;
        this._iconId = value;
      }
    }

    public byte Lvl
    {
      get
      {
        return _lvl;
      }
      set
      {
        __isset.lvl = true;
        this._lvl = value;
      }
    }

    public bool CanUpgrade
    {
      get
      {
        return _canUpgrade;
      }
      set
      {
        __isset.canUpgrade = true;
        this._canUpgrade = value;
      }
    }

    public byte FunctionTypte
    {
      get
      {
        return _functionTypte;
      }
      set
      {
        __isset.functionTypte = true;
        this._functionTypte = value;
      }
    }

    public bool FireEffect
    {
      get
      {
        return _fireEffect;
      }
      set
      {
        __isset.fireEffect = true;
        this._fireEffect = value;
      }
    }

    public List<ClanFightPlayerBuffResponse> BuffList
    {
      get
      {
        return _buffList;
      }
      set
      {
        __isset.buffList = true;
        this._buffList = value;
      }
    }

    public string PointScoreRate
    {
      get
      {
        return _pointScoreRate;
      }
      set
      {
        __isset.pointScoreRate = true;
        this._pointScoreRate = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool id;
      public bool pointName;
      public bool description;
      public bool fightPlayerSet;
      public bool maxExp;
      public bool curExp;
      public bool group;
      public bool iconId;
      public bool lvl;
      public bool canUpgrade;
      public bool functionTypte;
      public bool fireEffect;
      public bool buffList;
      public bool pointScoreRate;
    }

    public ClanFightPointResponse() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I16) {
              Id = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              PointName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              Description = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Set) {
              {
                FightPlayerSet = new THashSet<ClanFightPlayerResponse>();
                TSet _set813 = iprot.ReadSetBegin();
                for( int _i814 = 0; _i814 < _set813.Count; ++_i814)
                {
                  ClanFightPlayerResponse _elem815 = new ClanFightPlayerResponse();
                  _elem815 = new ClanFightPlayerResponse();
                  _elem815.Read(iprot);
                  FightPlayerSet.Add(_elem815);
                }
                iprot.ReadSetEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I16) {
              MaxExp = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I16) {
              CurExp = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.Byte) {
              Group = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.I16) {
              IconId = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.Byte) {
              Lvl = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.Bool) {
              CanUpgrade = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.Byte) {
              FunctionTypte = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.Bool) {
              FireEffect = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.List) {
              {
                BuffList = new List<ClanFightPlayerBuffResponse>();
                TList _list816 = iprot.ReadListBegin();
                for( int _i817 = 0; _i817 < _list816.Count; ++_i817)
                {
                  ClanFightPlayerBuffResponse _elem818 = new ClanFightPlayerBuffResponse();
                  _elem818 = new ClanFightPlayerBuffResponse();
                  _elem818.Read(iprot);
                  BuffList.Add(_elem818);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 14:
            if (field.Type == TType.String) {
              PointScoreRate = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("ClanFightPointResponse");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.id) {
        field.Name = "id";
        field.Type = TType.I16;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(Id);
        oprot.WriteFieldEnd();
      }
      if (PointName != null && __isset.pointName) {
        field.Name = "pointName";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(PointName);
        oprot.WriteFieldEnd();
      }
      if (Description != null && __isset.description) {
        field.Name = "description";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Description);
        oprot.WriteFieldEnd();
      }
      if (FightPlayerSet != null && __isset.fightPlayerSet) {
        field.Name = "fightPlayerSet";
        field.Type = TType.Set;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteSetBegin(new TSet(TType.Struct, FightPlayerSet.Count));
          foreach (ClanFightPlayerResponse _iter819 in FightPlayerSet)
          {
            _iter819.Write(oprot);
          }
          oprot.WriteSetEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.maxExp) {
        field.Name = "maxExp";
        field.Type = TType.I16;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(MaxExp);
        oprot.WriteFieldEnd();
      }
      if (__isset.curExp) {
        field.Name = "curExp";
        field.Type = TType.I16;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(CurExp);
        oprot.WriteFieldEnd();
      }
      if (__isset.group) {
        field.Name = "group";
        field.Type = TType.Byte;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(Group);
        oprot.WriteFieldEnd();
      }
      if (__isset.iconId) {
        field.Name = "iconId";
        field.Type = TType.I16;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(IconId);
        oprot.WriteFieldEnd();
      }
      if (__isset.lvl) {
        field.Name = "lvl";
        field.Type = TType.Byte;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(Lvl);
        oprot.WriteFieldEnd();
      }
      if (__isset.canUpgrade) {
        field.Name = "canUpgrade";
        field.Type = TType.Bool;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(CanUpgrade);
        oprot.WriteFieldEnd();
      }
      if (__isset.functionTypte) {
        field.Name = "functionTypte";
        field.Type = TType.Byte;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(FunctionTypte);
        oprot.WriteFieldEnd();
      }
      if (__isset.fireEffect) {
        field.Name = "fireEffect";
        field.Type = TType.Bool;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(FireEffect);
        oprot.WriteFieldEnd();
      }
      if (BuffList != null && __isset.buffList) {
        field.Name = "buffList";
        field.Type = TType.List;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, BuffList.Count));
          foreach (ClanFightPlayerBuffResponse _iter820 in BuffList)
          {
            _iter820.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (PointScoreRate != null && __isset.pointScoreRate) {
        field.Name = "pointScoreRate";
        field.Type = TType.String;
        field.ID = 14;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(PointScoreRate);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("ClanFightPointResponse(");
      sb.Append("Id: ");
      sb.Append(Id);
      sb.Append(",PointName: ");
      sb.Append(PointName);
      sb.Append(",Description: ");
      sb.Append(Description);
      sb.Append(",FightPlayerSet: ");
      sb.Append(FightPlayerSet);
      sb.Append(",MaxExp: ");
      sb.Append(MaxExp);
      sb.Append(",CurExp: ");
      sb.Append(CurExp);
      sb.Append(",Group: ");
      sb.Append(Group);
      sb.Append(",IconId: ");
      sb.Append(IconId);
      sb.Append(",Lvl: ");
      sb.Append(Lvl);
      sb.Append(",CanUpgrade: ");
      sb.Append(CanUpgrade);
      sb.Append(",FunctionTypte: ");
      sb.Append(FunctionTypte);
      sb.Append(",FireEffect: ");
      sb.Append(FireEffect);
      sb.Append(",BuffList: ");
      sb.Append(BuffList);
      sb.Append(",PointScoreRate: ");
      sb.Append(PointScoreRate);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
