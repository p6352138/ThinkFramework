/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace com.think.messages
{

  [Serializable]
  public partial class ClanFightResponse : TBase
  {
    private byte _type;
    private ClanFightPlayerMoveResponse _playerMoveResponse;
    private ClanFightRankingListResponse _playerList;
    private ClanFightSimpleFightDataResponse _fightResponse;
    private ClanfightPointInsideResponse _clanfightPointInsideResponse;
    private ClanfightRallyPointResponse _clanfightRallyPointResponse;
    private ClanFightPlayerSelfResponse _clanFightPlayerSelfResponse;
    private ClanFightPlayerBuffListResponse _clanFightPlayerBuffListResponse;
    private ClanfightPointInsideAddPlayerResponse _clanfightPointInsideAddPlayerResponse;
    private ClanfightPartScoreResponse _clanfightPartScoreResponse;
    private ClanfightPlayerToWayResponse _clanfightPlayerToWayResponse;
    private int _time_diff;

    public byte Type
    {
      get
      {
        return _type;
      }
      set
      {
        __isset.type = true;
        this._type = value;
      }
    }

    public ClanFightPlayerMoveResponse PlayerMoveResponse
    {
      get
      {
        return _playerMoveResponse;
      }
      set
      {
        __isset.playerMoveResponse = true;
        this._playerMoveResponse = value;
      }
    }

    public ClanFightRankingListResponse PlayerList
    {
      get
      {
        return _playerList;
      }
      set
      {
        __isset.playerList = true;
        this._playerList = value;
      }
    }

    public ClanFightSimpleFightDataResponse FightResponse
    {
      get
      {
        return _fightResponse;
      }
      set
      {
        __isset.fightResponse = true;
        this._fightResponse = value;
      }
    }

    public ClanfightPointInsideResponse ClanfightPointInsideResponse
    {
      get
      {
        return _clanfightPointInsideResponse;
      }
      set
      {
        __isset.clanfightPointInsideResponse = true;
        this._clanfightPointInsideResponse = value;
      }
    }

    public ClanfightRallyPointResponse ClanfightRallyPointResponse
    {
      get
      {
        return _clanfightRallyPointResponse;
      }
      set
      {
        __isset.clanfightRallyPointResponse = true;
        this._clanfightRallyPointResponse = value;
      }
    }

    public ClanFightPlayerSelfResponse ClanFightPlayerSelfResponse
    {
      get
      {
        return _clanFightPlayerSelfResponse;
      }
      set
      {
        __isset.clanFightPlayerSelfResponse = true;
        this._clanFightPlayerSelfResponse = value;
      }
    }

    public ClanFightPlayerBuffListResponse ClanFightPlayerBuffListResponse
    {
      get
      {
        return _clanFightPlayerBuffListResponse;
      }
      set
      {
        __isset.clanFightPlayerBuffListResponse = true;
        this._clanFightPlayerBuffListResponse = value;
      }
    }

    public ClanfightPointInsideAddPlayerResponse ClanfightPointInsideAddPlayerResponse
    {
      get
      {
        return _clanfightPointInsideAddPlayerResponse;
      }
      set
      {
        __isset.clanfightPointInsideAddPlayerResponse = true;
        this._clanfightPointInsideAddPlayerResponse = value;
      }
    }

    public ClanfightPartScoreResponse ClanfightPartScoreResponse
    {
      get
      {
        return _clanfightPartScoreResponse;
      }
      set
      {
        __isset.clanfightPartScoreResponse = true;
        this._clanfightPartScoreResponse = value;
      }
    }

    public ClanfightPlayerToWayResponse ClanfightPlayerToWayResponse
    {
      get
      {
        return _clanfightPlayerToWayResponse;
      }
      set
      {
        __isset.clanfightPlayerToWayResponse = true;
        this._clanfightPlayerToWayResponse = value;
      }
    }

    public int Time_diff
    {
      get
      {
        return _time_diff;
      }
      set
      {
        __isset.time_diff = true;
        this._time_diff = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool type;
      public bool playerMoveResponse;
      public bool playerList;
      public bool fightResponse;
      public bool clanfightPointInsideResponse;
      public bool clanfightRallyPointResponse;
      public bool clanFightPlayerSelfResponse;
      public bool clanFightPlayerBuffListResponse;
      public bool clanfightPointInsideAddPlayerResponse;
      public bool clanfightPartScoreResponse;
      public bool clanfightPlayerToWayResponse;
      public bool time_diff;
    }

    public ClanFightResponse() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Byte) {
              Type = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Struct) {
              PlayerMoveResponse = new ClanFightPlayerMoveResponse();
              PlayerMoveResponse.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Struct) {
              PlayerList = new ClanFightRankingListResponse();
              PlayerList.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Struct) {
              FightResponse = new ClanFightSimpleFightDataResponse();
              FightResponse.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Struct) {
              ClanfightPointInsideResponse = new ClanfightPointInsideResponse();
              ClanfightPointInsideResponse.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.Struct) {
              ClanfightRallyPointResponse = new ClanfightRallyPointResponse();
              ClanfightRallyPointResponse.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.Struct) {
              ClanFightPlayerSelfResponse = new ClanFightPlayerSelfResponse();
              ClanFightPlayerSelfResponse.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.Struct) {
              ClanFightPlayerBuffListResponse = new ClanFightPlayerBuffListResponse();
              ClanFightPlayerBuffListResponse.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.Struct) {
              ClanfightPointInsideAddPlayerResponse = new ClanfightPointInsideAddPlayerResponse();
              ClanfightPointInsideAddPlayerResponse.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.Struct) {
              ClanfightPartScoreResponse = new ClanfightPartScoreResponse();
              ClanfightPartScoreResponse.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.Struct) {
              ClanfightPlayerToWayResponse = new ClanfightPlayerToWayResponse();
              ClanfightPlayerToWayResponse.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.I32) {
              Time_diff = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("ClanFightResponse");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.type) {
        field.Name = "type";
        field.Type = TType.Byte;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(Type);
        oprot.WriteFieldEnd();
      }
      if (PlayerMoveResponse != null && __isset.playerMoveResponse) {
        field.Name = "playerMoveResponse";
        field.Type = TType.Struct;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        PlayerMoveResponse.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (PlayerList != null && __isset.playerList) {
        field.Name = "playerList";
        field.Type = TType.Struct;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        PlayerList.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (FightResponse != null && __isset.fightResponse) {
        field.Name = "fightResponse";
        field.Type = TType.Struct;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        FightResponse.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (ClanfightPointInsideResponse != null && __isset.clanfightPointInsideResponse) {
        field.Name = "clanfightPointInsideResponse";
        field.Type = TType.Struct;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        ClanfightPointInsideResponse.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (ClanfightRallyPointResponse != null && __isset.clanfightRallyPointResponse) {
        field.Name = "clanfightRallyPointResponse";
        field.Type = TType.Struct;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        ClanfightRallyPointResponse.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (ClanFightPlayerSelfResponse != null && __isset.clanFightPlayerSelfResponse) {
        field.Name = "clanFightPlayerSelfResponse";
        field.Type = TType.Struct;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        ClanFightPlayerSelfResponse.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (ClanFightPlayerBuffListResponse != null && __isset.clanFightPlayerBuffListResponse) {
        field.Name = "clanFightPlayerBuffListResponse";
        field.Type = TType.Struct;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        ClanFightPlayerBuffListResponse.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (ClanfightPointInsideAddPlayerResponse != null && __isset.clanfightPointInsideAddPlayerResponse) {
        field.Name = "clanfightPointInsideAddPlayerResponse";
        field.Type = TType.Struct;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        ClanfightPointInsideAddPlayerResponse.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (ClanfightPartScoreResponse != null && __isset.clanfightPartScoreResponse) {
        field.Name = "clanfightPartScoreResponse";
        field.Type = TType.Struct;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        ClanfightPartScoreResponse.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (ClanfightPlayerToWayResponse != null && __isset.clanfightPlayerToWayResponse) {
        field.Name = "clanfightPlayerToWayResponse";
        field.Type = TType.Struct;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        ClanfightPlayerToWayResponse.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (__isset.time_diff) {
        field.Name = "time_diff";
        field.Type = TType.I32;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Time_diff);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("ClanFightResponse(");
      sb.Append("Type: ");
      sb.Append(Type);
      sb.Append(",PlayerMoveResponse: ");
      sb.Append(PlayerMoveResponse== null ? "<null>" : PlayerMoveResponse.ToString());
      sb.Append(",PlayerList: ");
      sb.Append(PlayerList== null ? "<null>" : PlayerList.ToString());
      sb.Append(",FightResponse: ");
      sb.Append(FightResponse== null ? "<null>" : FightResponse.ToString());
      sb.Append(",ClanfightPointInsideResponse: ");
      sb.Append(ClanfightPointInsideResponse== null ? "<null>" : ClanfightPointInsideResponse.ToString());
      sb.Append(",ClanfightRallyPointResponse: ");
      sb.Append(ClanfightRallyPointResponse== null ? "<null>" : ClanfightRallyPointResponse.ToString());
      sb.Append(",ClanFightPlayerSelfResponse: ");
      sb.Append(ClanFightPlayerSelfResponse== null ? "<null>" : ClanFightPlayerSelfResponse.ToString());
      sb.Append(",ClanFightPlayerBuffListResponse: ");
      sb.Append(ClanFightPlayerBuffListResponse== null ? "<null>" : ClanFightPlayerBuffListResponse.ToString());
      sb.Append(",ClanfightPointInsideAddPlayerResponse: ");
      sb.Append(ClanfightPointInsideAddPlayerResponse== null ? "<null>" : ClanfightPointInsideAddPlayerResponse.ToString());
      sb.Append(",ClanfightPartScoreResponse: ");
      sb.Append(ClanfightPartScoreResponse== null ? "<null>" : ClanfightPartScoreResponse.ToString());
      sb.Append(",ClanfightPlayerToWayResponse: ");
      sb.Append(ClanfightPlayerToWayResponse== null ? "<null>" : ClanfightPlayerToWayResponse.ToString());
      sb.Append(",Time_diff: ");
      sb.Append(Time_diff);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
