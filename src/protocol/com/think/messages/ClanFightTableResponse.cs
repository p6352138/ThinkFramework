/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace com.think.messages
{

  [Serializable]
  public partial class ClanFightTableResponse : TBase
  {
    private byte _fightIndex;
    private string _fightTime;
    private byte _state;

    public byte FightIndex
    {
      get
      {
        return _fightIndex;
      }
      set
      {
        __isset.fightIndex = true;
        this._fightIndex = value;
      }
    }

    public string FightTime
    {
      get
      {
        return _fightTime;
      }
      set
      {
        __isset.fightTime = true;
        this._fightTime = value;
      }
    }

    public byte State
    {
      get
      {
        return _state;
      }
      set
      {
        __isset.state = true;
        this._state = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool fightIndex;
      public bool fightTime;
      public bool state;
    }

    public ClanFightTableResponse() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Byte) {
              FightIndex = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              FightTime = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Byte) {
              State = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("ClanFightTableResponse");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.fightIndex) {
        field.Name = "fightIndex";
        field.Type = TType.Byte;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(FightIndex);
        oprot.WriteFieldEnd();
      }
      if (FightTime != null && __isset.fightTime) {
        field.Name = "fightTime";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(FightTime);
        oprot.WriteFieldEnd();
      }
      if (__isset.state) {
        field.Name = "state";
        field.Type = TType.Byte;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(State);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("ClanFightTableResponse(");
      sb.Append("FightIndex: ");
      sb.Append(FightIndex);
      sb.Append(",FightTime: ");
      sb.Append(FightTime);
      sb.Append(",State: ");
      sb.Append(State);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
