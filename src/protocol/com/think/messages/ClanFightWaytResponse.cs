/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace com.think.messages
{

  [Serializable]
  public partial class ClanFightWaytResponse : TBase
  {
    private short _id;
    private string _wayName;
    private short _pointA;
    private short _pointB;
    private short _wayTime;
    private bool _twoWay;
    private THashSet<ClanFightPlayerResponse> _fightPlayerOfASet;
    private THashSet<ClanFightPlayerResponse> _fightPlayerOfBSet;

    public short Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }

    public string WayName
    {
      get
      {
        return _wayName;
      }
      set
      {
        __isset.wayName = true;
        this._wayName = value;
      }
    }

    public short PointA
    {
      get
      {
        return _pointA;
      }
      set
      {
        __isset.pointA = true;
        this._pointA = value;
      }
    }

    public short PointB
    {
      get
      {
        return _pointB;
      }
      set
      {
        __isset.pointB = true;
        this._pointB = value;
      }
    }

    public short WayTime
    {
      get
      {
        return _wayTime;
      }
      set
      {
        __isset.wayTime = true;
        this._wayTime = value;
      }
    }

    public bool TwoWay
    {
      get
      {
        return _twoWay;
      }
      set
      {
        __isset.twoWay = true;
        this._twoWay = value;
      }
    }

    public THashSet<ClanFightPlayerResponse> FightPlayerOfASet
    {
      get
      {
        return _fightPlayerOfASet;
      }
      set
      {
        __isset.fightPlayerOfASet = true;
        this._fightPlayerOfASet = value;
      }
    }

    public THashSet<ClanFightPlayerResponse> FightPlayerOfBSet
    {
      get
      {
        return _fightPlayerOfBSet;
      }
      set
      {
        __isset.fightPlayerOfBSet = true;
        this._fightPlayerOfBSet = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool id;
      public bool wayName;
      public bool pointA;
      public bool pointB;
      public bool wayTime;
      public bool twoWay;
      public bool fightPlayerOfASet;
      public bool fightPlayerOfBSet;
    }

    public ClanFightWaytResponse() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I16) {
              Id = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              WayName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I16) {
              PointA = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I16) {
              PointB = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I16) {
              WayTime = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.Bool) {
              TwoWay = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.Set) {
              {
                FightPlayerOfASet = new THashSet<ClanFightPlayerResponse>();
                TSet _set821 = iprot.ReadSetBegin();
                for( int _i822 = 0; _i822 < _set821.Count; ++_i822)
                {
                  ClanFightPlayerResponse _elem823 = new ClanFightPlayerResponse();
                  _elem823 = new ClanFightPlayerResponse();
                  _elem823.Read(iprot);
                  FightPlayerOfASet.Add(_elem823);
                }
                iprot.ReadSetEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.Set) {
              {
                FightPlayerOfBSet = new THashSet<ClanFightPlayerResponse>();
                TSet _set824 = iprot.ReadSetBegin();
                for( int _i825 = 0; _i825 < _set824.Count; ++_i825)
                {
                  ClanFightPlayerResponse _elem826 = new ClanFightPlayerResponse();
                  _elem826 = new ClanFightPlayerResponse();
                  _elem826.Read(iprot);
                  FightPlayerOfBSet.Add(_elem826);
                }
                iprot.ReadSetEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("ClanFightWaytResponse");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.id) {
        field.Name = "id";
        field.Type = TType.I16;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(Id);
        oprot.WriteFieldEnd();
      }
      if (WayName != null && __isset.wayName) {
        field.Name = "wayName";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(WayName);
        oprot.WriteFieldEnd();
      }
      if (__isset.pointA) {
        field.Name = "pointA";
        field.Type = TType.I16;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(PointA);
        oprot.WriteFieldEnd();
      }
      if (__isset.pointB) {
        field.Name = "pointB";
        field.Type = TType.I16;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(PointB);
        oprot.WriteFieldEnd();
      }
      if (__isset.wayTime) {
        field.Name = "wayTime";
        field.Type = TType.I16;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(WayTime);
        oprot.WriteFieldEnd();
      }
      if (__isset.twoWay) {
        field.Name = "twoWay";
        field.Type = TType.Bool;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(TwoWay);
        oprot.WriteFieldEnd();
      }
      if (FightPlayerOfASet != null && __isset.fightPlayerOfASet) {
        field.Name = "fightPlayerOfASet";
        field.Type = TType.Set;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteSetBegin(new TSet(TType.Struct, FightPlayerOfASet.Count));
          foreach (ClanFightPlayerResponse _iter827 in FightPlayerOfASet)
          {
            _iter827.Write(oprot);
          }
          oprot.WriteSetEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (FightPlayerOfBSet != null && __isset.fightPlayerOfBSet) {
        field.Name = "fightPlayerOfBSet";
        field.Type = TType.Set;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteSetBegin(new TSet(TType.Struct, FightPlayerOfBSet.Count));
          foreach (ClanFightPlayerResponse _iter828 in FightPlayerOfBSet)
          {
            _iter828.Write(oprot);
          }
          oprot.WriteSetEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("ClanFightWaytResponse(");
      sb.Append("Id: ");
      sb.Append(Id);
      sb.Append(",WayName: ");
      sb.Append(WayName);
      sb.Append(",PointA: ");
      sb.Append(PointA);
      sb.Append(",PointB: ");
      sb.Append(PointB);
      sb.Append(",WayTime: ");
      sb.Append(WayTime);
      sb.Append(",TwoWay: ");
      sb.Append(TwoWay);
      sb.Append(",FightPlayerOfASet: ");
      sb.Append(FightPlayerOfASet);
      sb.Append(",FightPlayerOfBSet: ");
      sb.Append(FightPlayerOfBSet);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
