/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace com.think.messages
{

  [Serializable]
  public partial class ClanKnowledgeResponse : TBase
  {
    private byte _type;
    private int _id;
    private string _name;
    private short _lvl;
    private short _nextLvl;
    private string _propertyIntro;
    private int _consume;
    private int _icon;
    private int _sysUpgradeTime;
    private long _curUpgradeTime;
    private int _maxLvl;
    private int _treasury_money_speed;
    private int _gold_speed;
    private int _rd_gold;
    private byte _optOpen;

    public byte Type
    {
      get
      {
        return _type;
      }
      set
      {
        __isset.type = true;
        this._type = value;
      }
    }

    public int Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    public short Lvl
    {
      get
      {
        return _lvl;
      }
      set
      {
        __isset.lvl = true;
        this._lvl = value;
      }
    }

    public short NextLvl
    {
      get
      {
        return _nextLvl;
      }
      set
      {
        __isset.nextLvl = true;
        this._nextLvl = value;
      }
    }

    public string PropertyIntro
    {
      get
      {
        return _propertyIntro;
      }
      set
      {
        __isset.propertyIntro = true;
        this._propertyIntro = value;
      }
    }

    public int Consume
    {
      get
      {
        return _consume;
      }
      set
      {
        __isset.consume = true;
        this._consume = value;
      }
    }

    public int Icon
    {
      get
      {
        return _icon;
      }
      set
      {
        __isset.icon = true;
        this._icon = value;
      }
    }

    public int SysUpgradeTime
    {
      get
      {
        return _sysUpgradeTime;
      }
      set
      {
        __isset.sysUpgradeTime = true;
        this._sysUpgradeTime = value;
      }
    }

    public long CurUpgradeTime
    {
      get
      {
        return _curUpgradeTime;
      }
      set
      {
        __isset.curUpgradeTime = true;
        this._curUpgradeTime = value;
      }
    }

    public int MaxLvl
    {
      get
      {
        return _maxLvl;
      }
      set
      {
        __isset.maxLvl = true;
        this._maxLvl = value;
      }
    }

    public int Treasury_money_speed
    {
      get
      {
        return _treasury_money_speed;
      }
      set
      {
        __isset.treasury_money_speed = true;
        this._treasury_money_speed = value;
      }
    }

    public int Gold_speed
    {
      get
      {
        return _gold_speed;
      }
      set
      {
        __isset.gold_speed = true;
        this._gold_speed = value;
      }
    }

    public int Rd_gold
    {
      get
      {
        return _rd_gold;
      }
      set
      {
        __isset.rd_gold = true;
        this._rd_gold = value;
      }
    }

    public byte OptOpen
    {
      get
      {
        return _optOpen;
      }
      set
      {
        __isset.optOpen = true;
        this._optOpen = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool type;
      public bool id;
      public bool name;
      public bool lvl;
      public bool nextLvl;
      public bool propertyIntro;
      public bool consume;
      public bool icon;
      public bool sysUpgradeTime;
      public bool curUpgradeTime;
      public bool maxLvl;
      public bool treasury_money_speed;
      public bool gold_speed;
      public bool rd_gold;
      public bool optOpen;
    }

    public ClanKnowledgeResponse() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Byte) {
              Type = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              Id = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              Name = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I16) {
              Lvl = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I16) {
              NextLvl = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.String) {
              PropertyIntro = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I32) {
              Consume = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.I32) {
              Icon = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.I32) {
              SysUpgradeTime = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.I64) {
              CurUpgradeTime = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.I32) {
              MaxLvl = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.I32) {
              Treasury_money_speed = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.I32) {
              Gold_speed = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 14:
            if (field.Type == TType.I32) {
              Rd_gold = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 15:
            if (field.Type == TType.Byte) {
              OptOpen = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("ClanKnowledgeResponse");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.type) {
        field.Name = "type";
        field.Type = TType.Byte;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(Type);
        oprot.WriteFieldEnd();
      }
      if (__isset.id) {
        field.Name = "id";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Id);
        oprot.WriteFieldEnd();
      }
      if (Name != null && __isset.name) {
        field.Name = "name";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Name);
        oprot.WriteFieldEnd();
      }
      if (__isset.lvl) {
        field.Name = "lvl";
        field.Type = TType.I16;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(Lvl);
        oprot.WriteFieldEnd();
      }
      if (__isset.nextLvl) {
        field.Name = "nextLvl";
        field.Type = TType.I16;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(NextLvl);
        oprot.WriteFieldEnd();
      }
      if (PropertyIntro != null && __isset.propertyIntro) {
        field.Name = "propertyIntro";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(PropertyIntro);
        oprot.WriteFieldEnd();
      }
      if (__isset.consume) {
        field.Name = "consume";
        field.Type = TType.I32;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Consume);
        oprot.WriteFieldEnd();
      }
      if (__isset.icon) {
        field.Name = "icon";
        field.Type = TType.I32;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Icon);
        oprot.WriteFieldEnd();
      }
      if (__isset.sysUpgradeTime) {
        field.Name = "sysUpgradeTime";
        field.Type = TType.I32;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(SysUpgradeTime);
        oprot.WriteFieldEnd();
      }
      if (__isset.curUpgradeTime) {
        field.Name = "curUpgradeTime";
        field.Type = TType.I64;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(CurUpgradeTime);
        oprot.WriteFieldEnd();
      }
      if (__isset.maxLvl) {
        field.Name = "maxLvl";
        field.Type = TType.I32;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(MaxLvl);
        oprot.WriteFieldEnd();
      }
      if (__isset.treasury_money_speed) {
        field.Name = "treasury_money_speed";
        field.Type = TType.I32;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Treasury_money_speed);
        oprot.WriteFieldEnd();
      }
      if (__isset.gold_speed) {
        field.Name = "gold_speed";
        field.Type = TType.I32;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Gold_speed);
        oprot.WriteFieldEnd();
      }
      if (__isset.rd_gold) {
        field.Name = "rd_gold";
        field.Type = TType.I32;
        field.ID = 14;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Rd_gold);
        oprot.WriteFieldEnd();
      }
      if (__isset.optOpen) {
        field.Name = "optOpen";
        field.Type = TType.Byte;
        field.ID = 15;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(OptOpen);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("ClanKnowledgeResponse(");
      sb.Append("Type: ");
      sb.Append(Type);
      sb.Append(",Id: ");
      sb.Append(Id);
      sb.Append(",Name: ");
      sb.Append(Name);
      sb.Append(",Lvl: ");
      sb.Append(Lvl);
      sb.Append(",NextLvl: ");
      sb.Append(NextLvl);
      sb.Append(",PropertyIntro: ");
      sb.Append(PropertyIntro);
      sb.Append(",Consume: ");
      sb.Append(Consume);
      sb.Append(",Icon: ");
      sb.Append(Icon);
      sb.Append(",SysUpgradeTime: ");
      sb.Append(SysUpgradeTime);
      sb.Append(",CurUpgradeTime: ");
      sb.Append(CurUpgradeTime);
      sb.Append(",MaxLvl: ");
      sb.Append(MaxLvl);
      sb.Append(",Treasury_money_speed: ");
      sb.Append(Treasury_money_speed);
      sb.Append(",Gold_speed: ");
      sb.Append(Gold_speed);
      sb.Append(",Rd_gold: ");
      sb.Append(Rd_gold);
      sb.Append(",OptOpen: ");
      sb.Append(OptOpen);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
