/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace com.think.messages
{

  [Serializable]
  public partial class CollectResponse : TBase
  {
    private byte _type;
    private int _imposeNum;
    private int _maxImposeNum;
    private int _needGold;
    private CDTimeResponse _cdTimeResponse;
    private int _money;
    private int _popularSupport;
    private string _desc;

    public byte Type
    {
      get
      {
        return _type;
      }
      set
      {
        __isset.type = true;
        this._type = value;
      }
    }

    public int ImposeNum
    {
      get
      {
        return _imposeNum;
      }
      set
      {
        __isset.imposeNum = true;
        this._imposeNum = value;
      }
    }

    public int MaxImposeNum
    {
      get
      {
        return _maxImposeNum;
      }
      set
      {
        __isset.maxImposeNum = true;
        this._maxImposeNum = value;
      }
    }

    public int NeedGold
    {
      get
      {
        return _needGold;
      }
      set
      {
        __isset.needGold = true;
        this._needGold = value;
      }
    }

    public CDTimeResponse CdTimeResponse
    {
      get
      {
        return _cdTimeResponse;
      }
      set
      {
        __isset.cdTimeResponse = true;
        this._cdTimeResponse = value;
      }
    }

    public int Money
    {
      get
      {
        return _money;
      }
      set
      {
        __isset.money = true;
        this._money = value;
      }
    }

    public int PopularSupport
    {
      get
      {
        return _popularSupport;
      }
      set
      {
        __isset.popularSupport = true;
        this._popularSupport = value;
      }
    }

    public string Desc
    {
      get
      {
        return _desc;
      }
      set
      {
        __isset.desc = true;
        this._desc = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool type;
      public bool imposeNum;
      public bool maxImposeNum;
      public bool needGold;
      public bool cdTimeResponse;
      public bool money;
      public bool popularSupport;
      public bool desc;
    }

    public CollectResponse() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Byte) {
              Type = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              ImposeNum = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              MaxImposeNum = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              NeedGold = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Struct) {
              CdTimeResponse = new CDTimeResponse();
              CdTimeResponse.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              Money = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I32) {
              PopularSupport = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.String) {
              Desc = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("CollectResponse");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.type) {
        field.Name = "type";
        field.Type = TType.Byte;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(Type);
        oprot.WriteFieldEnd();
      }
      if (__isset.imposeNum) {
        field.Name = "imposeNum";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ImposeNum);
        oprot.WriteFieldEnd();
      }
      if (__isset.maxImposeNum) {
        field.Name = "maxImposeNum";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(MaxImposeNum);
        oprot.WriteFieldEnd();
      }
      if (__isset.needGold) {
        field.Name = "needGold";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(NeedGold);
        oprot.WriteFieldEnd();
      }
      if (CdTimeResponse != null && __isset.cdTimeResponse) {
        field.Name = "cdTimeResponse";
        field.Type = TType.Struct;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        CdTimeResponse.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (__isset.money) {
        field.Name = "money";
        field.Type = TType.I32;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Money);
        oprot.WriteFieldEnd();
      }
      if (__isset.popularSupport) {
        field.Name = "popularSupport";
        field.Type = TType.I32;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(PopularSupport);
        oprot.WriteFieldEnd();
      }
      if (Desc != null && __isset.desc) {
        field.Name = "desc";
        field.Type = TType.String;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Desc);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("CollectResponse(");
      sb.Append("Type: ");
      sb.Append(Type);
      sb.Append(",ImposeNum: ");
      sb.Append(ImposeNum);
      sb.Append(",MaxImposeNum: ");
      sb.Append(MaxImposeNum);
      sb.Append(",NeedGold: ");
      sb.Append(NeedGold);
      sb.Append(",CdTimeResponse: ");
      sb.Append(CdTimeResponse== null ? "<null>" : CdTimeResponse.ToString());
      sb.Append(",Money: ");
      sb.Append(Money);
      sb.Append(",PopularSupport: ");
      sb.Append(PopularSupport);
      sb.Append(",Desc: ");
      sb.Append(Desc);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
