/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace com.think.messages
{

  [Serializable]
  public partial class CureWaterResponse : TBase
  {
    private int _efficiency;
    private int _surplusTime;
    private int _times;
    private int _maxTimes;
    private int _needGold;
    private int _exp;
    private int _maxExp;
    private int _speedExp;

    public int Efficiency
    {
      get
      {
        return _efficiency;
      }
      set
      {
        __isset.efficiency = true;
        this._efficiency = value;
      }
    }

    public int SurplusTime
    {
      get
      {
        return _surplusTime;
      }
      set
      {
        __isset.surplusTime = true;
        this._surplusTime = value;
      }
    }

    public int Times
    {
      get
      {
        return _times;
      }
      set
      {
        __isset.times = true;
        this._times = value;
      }
    }

    public int MaxTimes
    {
      get
      {
        return _maxTimes;
      }
      set
      {
        __isset.maxTimes = true;
        this._maxTimes = value;
      }
    }

    public int NeedGold
    {
      get
      {
        return _needGold;
      }
      set
      {
        __isset.needGold = true;
        this._needGold = value;
      }
    }

    public int Exp
    {
      get
      {
        return _exp;
      }
      set
      {
        __isset.exp = true;
        this._exp = value;
      }
    }

    public int MaxExp
    {
      get
      {
        return _maxExp;
      }
      set
      {
        __isset.maxExp = true;
        this._maxExp = value;
      }
    }

    public int SpeedExp
    {
      get
      {
        return _speedExp;
      }
      set
      {
        __isset.speedExp = true;
        this._speedExp = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool efficiency;
      public bool surplusTime;
      public bool times;
      public bool maxTimes;
      public bool needGold;
      public bool exp;
      public bool maxExp;
      public bool speedExp;
    }

    public CureWaterResponse() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              Efficiency = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              SurplusTime = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              Times = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              MaxTimes = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              NeedGold = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              Exp = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I32) {
              MaxExp = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.I32) {
              SpeedExp = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("CureWaterResponse");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.efficiency) {
        field.Name = "efficiency";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Efficiency);
        oprot.WriteFieldEnd();
      }
      if (__isset.surplusTime) {
        field.Name = "surplusTime";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(SurplusTime);
        oprot.WriteFieldEnd();
      }
      if (__isset.times) {
        field.Name = "times";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Times);
        oprot.WriteFieldEnd();
      }
      if (__isset.maxTimes) {
        field.Name = "maxTimes";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(MaxTimes);
        oprot.WriteFieldEnd();
      }
      if (__isset.needGold) {
        field.Name = "needGold";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(NeedGold);
        oprot.WriteFieldEnd();
      }
      if (__isset.exp) {
        field.Name = "exp";
        field.Type = TType.I32;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Exp);
        oprot.WriteFieldEnd();
      }
      if (__isset.maxExp) {
        field.Name = "maxExp";
        field.Type = TType.I32;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(MaxExp);
        oprot.WriteFieldEnd();
      }
      if (__isset.speedExp) {
        field.Name = "speedExp";
        field.Type = TType.I32;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(SpeedExp);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("CureWaterResponse(");
      sb.Append("Efficiency: ");
      sb.Append(Efficiency);
      sb.Append(",SurplusTime: ");
      sb.Append(SurplusTime);
      sb.Append(",Times: ");
      sb.Append(Times);
      sb.Append(",MaxTimes: ");
      sb.Append(MaxTimes);
      sb.Append(",NeedGold: ");
      sb.Append(NeedGold);
      sb.Append(",Exp: ");
      sb.Append(Exp);
      sb.Append(",MaxExp: ");
      sb.Append(MaxExp);
      sb.Append(",SpeedExp: ");
      sb.Append(SpeedExp);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
