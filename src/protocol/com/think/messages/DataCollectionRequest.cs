/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace com.think.messages
{

  [Serializable]
  public partial class DataCollectionRequest : TBase
  {
    private string _operatingSystem;
    private int _processorCount;
    private string _processorType;
    private int _supportedRenderTargetCount;
    private int _systemMemorySize;
    private int _graphicsMemorySize;
    private int _screenWidth;
    private int _screenHeight;
    private string _deviceModel;
    private string _deviceName;
    private string _deviceType;
    private string _deviceUniqueIdentifier;
    private int _graphicsDeviceID;
    private string _graphicsDeviceName;
    private string _graphicsDeviceVendor;
    private int _graphicsDeviceVendorID;
    private string _graphicsDeviceVersion;
    private int _graphicsPixelFillrate;
    private int _graphicsShaderLevel;
    private string _application;

    public string OperatingSystem
    {
      get
      {
        return _operatingSystem;
      }
      set
      {
        __isset.operatingSystem = true;
        this._operatingSystem = value;
      }
    }

    public int ProcessorCount
    {
      get
      {
        return _processorCount;
      }
      set
      {
        __isset.processorCount = true;
        this._processorCount = value;
      }
    }

    public string ProcessorType
    {
      get
      {
        return _processorType;
      }
      set
      {
        __isset.processorType = true;
        this._processorType = value;
      }
    }

    public int SupportedRenderTargetCount
    {
      get
      {
        return _supportedRenderTargetCount;
      }
      set
      {
        __isset.supportedRenderTargetCount = true;
        this._supportedRenderTargetCount = value;
      }
    }

    public int SystemMemorySize
    {
      get
      {
        return _systemMemorySize;
      }
      set
      {
        __isset.systemMemorySize = true;
        this._systemMemorySize = value;
      }
    }

    public int GraphicsMemorySize
    {
      get
      {
        return _graphicsMemorySize;
      }
      set
      {
        __isset.graphicsMemorySize = true;
        this._graphicsMemorySize = value;
      }
    }

    public int ScreenWidth
    {
      get
      {
        return _screenWidth;
      }
      set
      {
        __isset.screenWidth = true;
        this._screenWidth = value;
      }
    }

    public int ScreenHeight
    {
      get
      {
        return _screenHeight;
      }
      set
      {
        __isset.screenHeight = true;
        this._screenHeight = value;
      }
    }

    public string DeviceModel
    {
      get
      {
        return _deviceModel;
      }
      set
      {
        __isset.deviceModel = true;
        this._deviceModel = value;
      }
    }

    public string DeviceName
    {
      get
      {
        return _deviceName;
      }
      set
      {
        __isset.deviceName = true;
        this._deviceName = value;
      }
    }

    public string DeviceType
    {
      get
      {
        return _deviceType;
      }
      set
      {
        __isset.deviceType = true;
        this._deviceType = value;
      }
    }

    public string DeviceUniqueIdentifier
    {
      get
      {
        return _deviceUniqueIdentifier;
      }
      set
      {
        __isset.deviceUniqueIdentifier = true;
        this._deviceUniqueIdentifier = value;
      }
    }

    public int GraphicsDeviceID
    {
      get
      {
        return _graphicsDeviceID;
      }
      set
      {
        __isset.graphicsDeviceID = true;
        this._graphicsDeviceID = value;
      }
    }

    public string GraphicsDeviceName
    {
      get
      {
        return _graphicsDeviceName;
      }
      set
      {
        __isset.graphicsDeviceName = true;
        this._graphicsDeviceName = value;
      }
    }

    public string GraphicsDeviceVendor
    {
      get
      {
        return _graphicsDeviceVendor;
      }
      set
      {
        __isset.graphicsDeviceVendor = true;
        this._graphicsDeviceVendor = value;
      }
    }

    public int GraphicsDeviceVendorID
    {
      get
      {
        return _graphicsDeviceVendorID;
      }
      set
      {
        __isset.graphicsDeviceVendorID = true;
        this._graphicsDeviceVendorID = value;
      }
    }

    public string GraphicsDeviceVersion
    {
      get
      {
        return _graphicsDeviceVersion;
      }
      set
      {
        __isset.graphicsDeviceVersion = true;
        this._graphicsDeviceVersion = value;
      }
    }

    public int GraphicsPixelFillrate
    {
      get
      {
        return _graphicsPixelFillrate;
      }
      set
      {
        __isset.graphicsPixelFillrate = true;
        this._graphicsPixelFillrate = value;
      }
    }

    public int GraphicsShaderLevel
    {
      get
      {
        return _graphicsShaderLevel;
      }
      set
      {
        __isset.graphicsShaderLevel = true;
        this._graphicsShaderLevel = value;
      }
    }

    public string Application
    {
      get
      {
        return _application;
      }
      set
      {
        __isset.application = true;
        this._application = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool operatingSystem;
      public bool processorCount;
      public bool processorType;
      public bool supportedRenderTargetCount;
      public bool systemMemorySize;
      public bool graphicsMemorySize;
      public bool screenWidth;
      public bool screenHeight;
      public bool deviceModel;
      public bool deviceName;
      public bool deviceType;
      public bool deviceUniqueIdentifier;
      public bool graphicsDeviceID;
      public bool graphicsDeviceName;
      public bool graphicsDeviceVendor;
      public bool graphicsDeviceVendorID;
      public bool graphicsDeviceVersion;
      public bool graphicsPixelFillrate;
      public bool graphicsShaderLevel;
      public bool application;
    }

    public DataCollectionRequest() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              OperatingSystem = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              ProcessorCount = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              ProcessorType = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              SupportedRenderTargetCount = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              SystemMemorySize = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              GraphicsMemorySize = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I32) {
              ScreenWidth = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.I32) {
              ScreenHeight = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.String) {
              DeviceModel = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.String) {
              DeviceName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.String) {
              DeviceType = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.String) {
              DeviceUniqueIdentifier = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.I32) {
              GraphicsDeviceID = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 14:
            if (field.Type == TType.String) {
              GraphicsDeviceName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 15:
            if (field.Type == TType.String) {
              GraphicsDeviceVendor = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 16:
            if (field.Type == TType.I32) {
              GraphicsDeviceVendorID = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 17:
            if (field.Type == TType.String) {
              GraphicsDeviceVersion = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 18:
            if (field.Type == TType.I32) {
              GraphicsPixelFillrate = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 19:
            if (field.Type == TType.I32) {
              GraphicsShaderLevel = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 20:
            if (field.Type == TType.String) {
              Application = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("DataCollectionRequest");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (OperatingSystem != null && __isset.operatingSystem) {
        field.Name = "operatingSystem";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(OperatingSystem);
        oprot.WriteFieldEnd();
      }
      if (__isset.processorCount) {
        field.Name = "processorCount";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ProcessorCount);
        oprot.WriteFieldEnd();
      }
      if (ProcessorType != null && __isset.processorType) {
        field.Name = "processorType";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ProcessorType);
        oprot.WriteFieldEnd();
      }
      if (__isset.supportedRenderTargetCount) {
        field.Name = "supportedRenderTargetCount";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(SupportedRenderTargetCount);
        oprot.WriteFieldEnd();
      }
      if (__isset.systemMemorySize) {
        field.Name = "systemMemorySize";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(SystemMemorySize);
        oprot.WriteFieldEnd();
      }
      if (__isset.graphicsMemorySize) {
        field.Name = "graphicsMemorySize";
        field.Type = TType.I32;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(GraphicsMemorySize);
        oprot.WriteFieldEnd();
      }
      if (__isset.screenWidth) {
        field.Name = "screenWidth";
        field.Type = TType.I32;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ScreenWidth);
        oprot.WriteFieldEnd();
      }
      if (__isset.screenHeight) {
        field.Name = "screenHeight";
        field.Type = TType.I32;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ScreenHeight);
        oprot.WriteFieldEnd();
      }
      if (DeviceModel != null && __isset.deviceModel) {
        field.Name = "deviceModel";
        field.Type = TType.String;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(DeviceModel);
        oprot.WriteFieldEnd();
      }
      if (DeviceName != null && __isset.deviceName) {
        field.Name = "deviceName";
        field.Type = TType.String;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(DeviceName);
        oprot.WriteFieldEnd();
      }
      if (DeviceType != null && __isset.deviceType) {
        field.Name = "deviceType";
        field.Type = TType.String;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(DeviceType);
        oprot.WriteFieldEnd();
      }
      if (DeviceUniqueIdentifier != null && __isset.deviceUniqueIdentifier) {
        field.Name = "deviceUniqueIdentifier";
        field.Type = TType.String;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(DeviceUniqueIdentifier);
        oprot.WriteFieldEnd();
      }
      if (__isset.graphicsDeviceID) {
        field.Name = "graphicsDeviceID";
        field.Type = TType.I32;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(GraphicsDeviceID);
        oprot.WriteFieldEnd();
      }
      if (GraphicsDeviceName != null && __isset.graphicsDeviceName) {
        field.Name = "graphicsDeviceName";
        field.Type = TType.String;
        field.ID = 14;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(GraphicsDeviceName);
        oprot.WriteFieldEnd();
      }
      if (GraphicsDeviceVendor != null && __isset.graphicsDeviceVendor) {
        field.Name = "graphicsDeviceVendor";
        field.Type = TType.String;
        field.ID = 15;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(GraphicsDeviceVendor);
        oprot.WriteFieldEnd();
      }
      if (__isset.graphicsDeviceVendorID) {
        field.Name = "graphicsDeviceVendorID";
        field.Type = TType.I32;
        field.ID = 16;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(GraphicsDeviceVendorID);
        oprot.WriteFieldEnd();
      }
      if (GraphicsDeviceVersion != null && __isset.graphicsDeviceVersion) {
        field.Name = "graphicsDeviceVersion";
        field.Type = TType.String;
        field.ID = 17;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(GraphicsDeviceVersion);
        oprot.WriteFieldEnd();
      }
      if (__isset.graphicsPixelFillrate) {
        field.Name = "graphicsPixelFillrate";
        field.Type = TType.I32;
        field.ID = 18;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(GraphicsPixelFillrate);
        oprot.WriteFieldEnd();
      }
      if (__isset.graphicsShaderLevel) {
        field.Name = "graphicsShaderLevel";
        field.Type = TType.I32;
        field.ID = 19;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(GraphicsShaderLevel);
        oprot.WriteFieldEnd();
      }
      if (Application != null && __isset.application) {
        field.Name = "application";
        field.Type = TType.String;
        field.ID = 20;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Application);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("DataCollectionRequest(");
      sb.Append("OperatingSystem: ");
      sb.Append(OperatingSystem);
      sb.Append(",ProcessorCount: ");
      sb.Append(ProcessorCount);
      sb.Append(",ProcessorType: ");
      sb.Append(ProcessorType);
      sb.Append(",SupportedRenderTargetCount: ");
      sb.Append(SupportedRenderTargetCount);
      sb.Append(",SystemMemorySize: ");
      sb.Append(SystemMemorySize);
      sb.Append(",GraphicsMemorySize: ");
      sb.Append(GraphicsMemorySize);
      sb.Append(",ScreenWidth: ");
      sb.Append(ScreenWidth);
      sb.Append(",ScreenHeight: ");
      sb.Append(ScreenHeight);
      sb.Append(",DeviceModel: ");
      sb.Append(DeviceModel);
      sb.Append(",DeviceName: ");
      sb.Append(DeviceName);
      sb.Append(",DeviceType: ");
      sb.Append(DeviceType);
      sb.Append(",DeviceUniqueIdentifier: ");
      sb.Append(DeviceUniqueIdentifier);
      sb.Append(",GraphicsDeviceID: ");
      sb.Append(GraphicsDeviceID);
      sb.Append(",GraphicsDeviceName: ");
      sb.Append(GraphicsDeviceName);
      sb.Append(",GraphicsDeviceVendor: ");
      sb.Append(GraphicsDeviceVendor);
      sb.Append(",GraphicsDeviceVendorID: ");
      sb.Append(GraphicsDeviceVendorID);
      sb.Append(",GraphicsDeviceVersion: ");
      sb.Append(GraphicsDeviceVersion);
      sb.Append(",GraphicsPixelFillrate: ");
      sb.Append(GraphicsPixelFillrate);
      sb.Append(",GraphicsShaderLevel: ");
      sb.Append(GraphicsShaderLevel);
      sb.Append(",Application: ");
      sb.Append(Application);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
