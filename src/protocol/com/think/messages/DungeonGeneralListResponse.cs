/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace com.think.messages
{

  [Serializable]
  public partial class DungeonGeneralListResponse : TBase
  {
    private byte _type;
    private string _dungeonName;
    private List<DungeonGeneralResponse> _dungeonGeneralResponseList;
    private int _cg_image_id;
    private AwardBoxListRensponse _awardBoxList;
    private int _dungeonMapID;
    private int _dungeonID;

    public byte Type
    {
      get
      {
        return _type;
      }
      set
      {
        __isset.type = true;
        this._type = value;
      }
    }

    public string DungeonName
    {
      get
      {
        return _dungeonName;
      }
      set
      {
        __isset.dungeonName = true;
        this._dungeonName = value;
      }
    }

    public List<DungeonGeneralResponse> DungeonGeneralResponseList
    {
      get
      {
        return _dungeonGeneralResponseList;
      }
      set
      {
        __isset.dungeonGeneralResponseList = true;
        this._dungeonGeneralResponseList = value;
      }
    }

    public int Cg_image_id
    {
      get
      {
        return _cg_image_id;
      }
      set
      {
        __isset.cg_image_id = true;
        this._cg_image_id = value;
      }
    }

    public AwardBoxListRensponse AwardBoxList
    {
      get
      {
        return _awardBoxList;
      }
      set
      {
        __isset.awardBoxList = true;
        this._awardBoxList = value;
      }
    }

    public int DungeonMapID
    {
      get
      {
        return _dungeonMapID;
      }
      set
      {
        __isset.dungeonMapID = true;
        this._dungeonMapID = value;
      }
    }

    public int DungeonID
    {
      get
      {
        return _dungeonID;
      }
      set
      {
        __isset.dungeonID = true;
        this._dungeonID = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool type;
      public bool dungeonName;
      public bool dungeonGeneralResponseList;
      public bool cg_image_id;
      public bool awardBoxList;
      public bool dungeonMapID;
      public bool dungeonID;
    }

    public DungeonGeneralListResponse() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Byte) {
              Type = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              DungeonName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.List) {
              {
                DungeonGeneralResponseList = new List<DungeonGeneralResponse>();
                TList _list283 = iprot.ReadListBegin();
                for( int _i284 = 0; _i284 < _list283.Count; ++_i284)
                {
                  DungeonGeneralResponse _elem285 = new DungeonGeneralResponse();
                  _elem285 = new DungeonGeneralResponse();
                  _elem285.Read(iprot);
                  DungeonGeneralResponseList.Add(_elem285);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              Cg_image_id = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Struct) {
              AwardBoxList = new AwardBoxListRensponse();
              AwardBoxList.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              DungeonMapID = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I32) {
              DungeonID = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("DungeonGeneralListResponse");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.type) {
        field.Name = "type";
        field.Type = TType.Byte;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(Type);
        oprot.WriteFieldEnd();
      }
      if (DungeonName != null && __isset.dungeonName) {
        field.Name = "dungeonName";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(DungeonName);
        oprot.WriteFieldEnd();
      }
      if (DungeonGeneralResponseList != null && __isset.dungeonGeneralResponseList) {
        field.Name = "dungeonGeneralResponseList";
        field.Type = TType.List;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, DungeonGeneralResponseList.Count));
          foreach (DungeonGeneralResponse _iter286 in DungeonGeneralResponseList)
          {
            _iter286.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.cg_image_id) {
        field.Name = "cg_image_id";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Cg_image_id);
        oprot.WriteFieldEnd();
      }
      if (AwardBoxList != null && __isset.awardBoxList) {
        field.Name = "awardBoxList";
        field.Type = TType.Struct;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        AwardBoxList.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (__isset.dungeonMapID) {
        field.Name = "dungeonMapID";
        field.Type = TType.I32;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(DungeonMapID);
        oprot.WriteFieldEnd();
      }
      if (__isset.dungeonID) {
        field.Name = "dungeonID";
        field.Type = TType.I32;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(DungeonID);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("DungeonGeneralListResponse(");
      sb.Append("Type: ");
      sb.Append(Type);
      sb.Append(",DungeonName: ");
      sb.Append(DungeonName);
      sb.Append(",DungeonGeneralResponseList: ");
      sb.Append(DungeonGeneralResponseList);
      sb.Append(",Cg_image_id: ");
      sb.Append(Cg_image_id);
      sb.Append(",AwardBoxList: ");
      sb.Append(AwardBoxList== null ? "<null>" : AwardBoxList.ToString());
      sb.Append(",DungeonMapID: ");
      sb.Append(DungeonMapID);
      sb.Append(",DungeonID: ");
      sb.Append(DungeonID);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
