/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace com.think.messages
{

  [Serializable]
  public partial class DungeonGeneralModelResponse : TBase
  {
    private int _general_id;
    private string _generalName;
    private string _generalDesc;
    private int _level;
    private bool _isCurrentDungeonGeneral;
    private bool _isCanFight;
    private int _imageID;
    private int _exploit;
    private int _itemID;
    private byte _trait;
    private int _itemImage;
    private string _itemName;
    private string _itemRate;
    private int _money;
    private int _strategy_icon;
    private int _fighting_capacity;
    private Dictionary<byte, int> _generalEmbattle;
    private List<ResourceResponse> _resourceResponseList;
    private string _questTarget;

    public int General_id
    {
      get
      {
        return _general_id;
      }
      set
      {
        __isset.general_id = true;
        this._general_id = value;
      }
    }

    public string GeneralName
    {
      get
      {
        return _generalName;
      }
      set
      {
        __isset.generalName = true;
        this._generalName = value;
      }
    }

    public string GeneralDesc
    {
      get
      {
        return _generalDesc;
      }
      set
      {
        __isset.generalDesc = true;
        this._generalDesc = value;
      }
    }

    public int Level
    {
      get
      {
        return _level;
      }
      set
      {
        __isset.level = true;
        this._level = value;
      }
    }

    public bool IsCurrentDungeonGeneral
    {
      get
      {
        return _isCurrentDungeonGeneral;
      }
      set
      {
        __isset.isCurrentDungeonGeneral = true;
        this._isCurrentDungeonGeneral = value;
      }
    }

    public bool IsCanFight
    {
      get
      {
        return _isCanFight;
      }
      set
      {
        __isset.isCanFight = true;
        this._isCanFight = value;
      }
    }

    public int ImageID
    {
      get
      {
        return _imageID;
      }
      set
      {
        __isset.imageID = true;
        this._imageID = value;
      }
    }

    public int Exploit
    {
      get
      {
        return _exploit;
      }
      set
      {
        __isset.exploit = true;
        this._exploit = value;
      }
    }

    public int ItemID
    {
      get
      {
        return _itemID;
      }
      set
      {
        __isset.itemID = true;
        this._itemID = value;
      }
    }

    public byte Trait
    {
      get
      {
        return _trait;
      }
      set
      {
        __isset.trait = true;
        this._trait = value;
      }
    }

    public int ItemImage
    {
      get
      {
        return _itemImage;
      }
      set
      {
        __isset.itemImage = true;
        this._itemImage = value;
      }
    }

    public string ItemName
    {
      get
      {
        return _itemName;
      }
      set
      {
        __isset.itemName = true;
        this._itemName = value;
      }
    }

    public string ItemRate
    {
      get
      {
        return _itemRate;
      }
      set
      {
        __isset.itemRate = true;
        this._itemRate = value;
      }
    }

    public int Money
    {
      get
      {
        return _money;
      }
      set
      {
        __isset.money = true;
        this._money = value;
      }
    }

    public int Strategy_icon
    {
      get
      {
        return _strategy_icon;
      }
      set
      {
        __isset.strategy_icon = true;
        this._strategy_icon = value;
      }
    }

    public int Fighting_capacity
    {
      get
      {
        return _fighting_capacity;
      }
      set
      {
        __isset.fighting_capacity = true;
        this._fighting_capacity = value;
      }
    }

    public Dictionary<byte, int> GeneralEmbattle
    {
      get
      {
        return _generalEmbattle;
      }
      set
      {
        __isset.generalEmbattle = true;
        this._generalEmbattle = value;
      }
    }

    public List<ResourceResponse> ResourceResponseList
    {
      get
      {
        return _resourceResponseList;
      }
      set
      {
        __isset.resourceResponseList = true;
        this._resourceResponseList = value;
      }
    }

    public string QuestTarget
    {
      get
      {
        return _questTarget;
      }
      set
      {
        __isset.questTarget = true;
        this._questTarget = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool general_id;
      public bool generalName;
      public bool generalDesc;
      public bool level;
      public bool isCurrentDungeonGeneral;
      public bool isCanFight;
      public bool imageID;
      public bool exploit;
      public bool itemID;
      public bool trait;
      public bool itemImage;
      public bool itemName;
      public bool itemRate;
      public bool money;
      public bool strategy_icon;
      public bool fighting_capacity;
      public bool generalEmbattle;
      public bool resourceResponseList;
      public bool questTarget;
    }

    public DungeonGeneralModelResponse() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              General_id = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              GeneralName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              GeneralDesc = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              Level = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Bool) {
              IsCurrentDungeonGeneral = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.Bool) {
              IsCanFight = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I32) {
              ImageID = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.I32) {
              Exploit = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.I32) {
              ItemID = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.Byte) {
              Trait = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.I32) {
              ItemImage = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.String) {
              ItemName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.String) {
              ItemRate = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 14:
            if (field.Type == TType.I32) {
              Money = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 15:
            if (field.Type == TType.I32) {
              Strategy_icon = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 16:
            if (field.Type == TType.I32) {
              Fighting_capacity = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 17:
            if (field.Type == TType.Map) {
              {
                GeneralEmbattle = new Dictionary<byte, int>();
                TMap _map270 = iprot.ReadMapBegin();
                for( int _i271 = 0; _i271 < _map270.Count; ++_i271)
                {
                  byte _key272;
                  int _val273;
                  _key272 = iprot.ReadByte();
                  _val273 = iprot.ReadI32();
                  GeneralEmbattle[_key272] = _val273;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 18:
            if (field.Type == TType.List) {
              {
                ResourceResponseList = new List<ResourceResponse>();
                TList _list274 = iprot.ReadListBegin();
                for( int _i275 = 0; _i275 < _list274.Count; ++_i275)
                {
                  ResourceResponse _elem276 = new ResourceResponse();
                  _elem276 = new ResourceResponse();
                  _elem276.Read(iprot);
                  ResourceResponseList.Add(_elem276);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 19:
            if (field.Type == TType.String) {
              QuestTarget = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("DungeonGeneralModelResponse");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.general_id) {
        field.Name = "general_id";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(General_id);
        oprot.WriteFieldEnd();
      }
      if (GeneralName != null && __isset.generalName) {
        field.Name = "generalName";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(GeneralName);
        oprot.WriteFieldEnd();
      }
      if (GeneralDesc != null && __isset.generalDesc) {
        field.Name = "generalDesc";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(GeneralDesc);
        oprot.WriteFieldEnd();
      }
      if (__isset.level) {
        field.Name = "level";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Level);
        oprot.WriteFieldEnd();
      }
      if (__isset.isCurrentDungeonGeneral) {
        field.Name = "isCurrentDungeonGeneral";
        field.Type = TType.Bool;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(IsCurrentDungeonGeneral);
        oprot.WriteFieldEnd();
      }
      if (__isset.isCanFight) {
        field.Name = "isCanFight";
        field.Type = TType.Bool;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(IsCanFight);
        oprot.WriteFieldEnd();
      }
      if (__isset.imageID) {
        field.Name = "imageID";
        field.Type = TType.I32;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ImageID);
        oprot.WriteFieldEnd();
      }
      if (__isset.exploit) {
        field.Name = "exploit";
        field.Type = TType.I32;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Exploit);
        oprot.WriteFieldEnd();
      }
      if (__isset.itemID) {
        field.Name = "itemID";
        field.Type = TType.I32;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ItemID);
        oprot.WriteFieldEnd();
      }
      if (__isset.trait) {
        field.Name = "trait";
        field.Type = TType.Byte;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(Trait);
        oprot.WriteFieldEnd();
      }
      if (__isset.itemImage) {
        field.Name = "itemImage";
        field.Type = TType.I32;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ItemImage);
        oprot.WriteFieldEnd();
      }
      if (ItemName != null && __isset.itemName) {
        field.Name = "itemName";
        field.Type = TType.String;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ItemName);
        oprot.WriteFieldEnd();
      }
      if (ItemRate != null && __isset.itemRate) {
        field.Name = "itemRate";
        field.Type = TType.String;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ItemRate);
        oprot.WriteFieldEnd();
      }
      if (__isset.money) {
        field.Name = "money";
        field.Type = TType.I32;
        field.ID = 14;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Money);
        oprot.WriteFieldEnd();
      }
      if (__isset.strategy_icon) {
        field.Name = "strategy_icon";
        field.Type = TType.I32;
        field.ID = 15;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Strategy_icon);
        oprot.WriteFieldEnd();
      }
      if (__isset.fighting_capacity) {
        field.Name = "fighting_capacity";
        field.Type = TType.I32;
        field.ID = 16;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Fighting_capacity);
        oprot.WriteFieldEnd();
      }
      if (GeneralEmbattle != null && __isset.generalEmbattle) {
        field.Name = "generalEmbattle";
        field.Type = TType.Map;
        field.ID = 17;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.Byte, TType.I32, GeneralEmbattle.Count));
          foreach (byte _iter277 in GeneralEmbattle.Keys)
          {
            oprot.WriteByte(_iter277);
            oprot.WriteI32(GeneralEmbattle[_iter277]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (ResourceResponseList != null && __isset.resourceResponseList) {
        field.Name = "resourceResponseList";
        field.Type = TType.List;
        field.ID = 18;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, ResourceResponseList.Count));
          foreach (ResourceResponse _iter278 in ResourceResponseList)
          {
            _iter278.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (QuestTarget != null && __isset.questTarget) {
        field.Name = "questTarget";
        field.Type = TType.String;
        field.ID = 19;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(QuestTarget);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("DungeonGeneralModelResponse(");
      sb.Append("General_id: ");
      sb.Append(General_id);
      sb.Append(",GeneralName: ");
      sb.Append(GeneralName);
      sb.Append(",GeneralDesc: ");
      sb.Append(GeneralDesc);
      sb.Append(",Level: ");
      sb.Append(Level);
      sb.Append(",IsCurrentDungeonGeneral: ");
      sb.Append(IsCurrentDungeonGeneral);
      sb.Append(",IsCanFight: ");
      sb.Append(IsCanFight);
      sb.Append(",ImageID: ");
      sb.Append(ImageID);
      sb.Append(",Exploit: ");
      sb.Append(Exploit);
      sb.Append(",ItemID: ");
      sb.Append(ItemID);
      sb.Append(",Trait: ");
      sb.Append(Trait);
      sb.Append(",ItemImage: ");
      sb.Append(ItemImage);
      sb.Append(",ItemName: ");
      sb.Append(ItemName);
      sb.Append(",ItemRate: ");
      sb.Append(ItemRate);
      sb.Append(",Money: ");
      sb.Append(Money);
      sb.Append(",Strategy_icon: ");
      sb.Append(Strategy_icon);
      sb.Append(",Fighting_capacity: ");
      sb.Append(Fighting_capacity);
      sb.Append(",GeneralEmbattle: ");
      sb.Append(GeneralEmbattle);
      sb.Append(",ResourceResponseList: ");
      sb.Append(ResourceResponseList);
      sb.Append(",QuestTarget: ");
      sb.Append(QuestTarget);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
