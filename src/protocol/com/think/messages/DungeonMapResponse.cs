/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace com.think.messages
{

  [Serializable]
  public partial class DungeonMapResponse : TBase
  {
    private int _currentDungeonId;
    private string _currentDungeoNname;
    private int _lastDungeonId;
    private string _lastDungeonName;
    private int _nextDungeonId;
    private string _nextDungeonName;
    private int _dungeonImageID;
    private List<DungeonModelResponse> _dungeonModelResponseList;

    public int CurrentDungeonId
    {
      get
      {
        return _currentDungeonId;
      }
      set
      {
        __isset.currentDungeonId = true;
        this._currentDungeonId = value;
      }
    }

    public string CurrentDungeoNname
    {
      get
      {
        return _currentDungeoNname;
      }
      set
      {
        __isset.currentDungeoNname = true;
        this._currentDungeoNname = value;
      }
    }

    public int LastDungeonId
    {
      get
      {
        return _lastDungeonId;
      }
      set
      {
        __isset.lastDungeonId = true;
        this._lastDungeonId = value;
      }
    }

    public string LastDungeonName
    {
      get
      {
        return _lastDungeonName;
      }
      set
      {
        __isset.lastDungeonName = true;
        this._lastDungeonName = value;
      }
    }

    public int NextDungeonId
    {
      get
      {
        return _nextDungeonId;
      }
      set
      {
        __isset.nextDungeonId = true;
        this._nextDungeonId = value;
      }
    }

    public string NextDungeonName
    {
      get
      {
        return _nextDungeonName;
      }
      set
      {
        __isset.nextDungeonName = true;
        this._nextDungeonName = value;
      }
    }

    public int DungeonImageID
    {
      get
      {
        return _dungeonImageID;
      }
      set
      {
        __isset.dungeonImageID = true;
        this._dungeonImageID = value;
      }
    }

    public List<DungeonModelResponse> DungeonModelResponseList
    {
      get
      {
        return _dungeonModelResponseList;
      }
      set
      {
        __isset.dungeonModelResponseList = true;
        this._dungeonModelResponseList = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool currentDungeonId;
      public bool currentDungeoNname;
      public bool lastDungeonId;
      public bool lastDungeonName;
      public bool nextDungeonId;
      public bool nextDungeonName;
      public bool dungeonImageID;
      public bool dungeonModelResponseList;
    }

    public DungeonMapResponse() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              CurrentDungeonId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              CurrentDungeoNname = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              LastDungeonId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              LastDungeonName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              NextDungeonId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.String) {
              NextDungeonName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I32) {
              DungeonImageID = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.List) {
              {
                DungeonModelResponseList = new List<DungeonModelResponse>();
                TList _list266 = iprot.ReadListBegin();
                for( int _i267 = 0; _i267 < _list266.Count; ++_i267)
                {
                  DungeonModelResponse _elem268 = new DungeonModelResponse();
                  _elem268 = new DungeonModelResponse();
                  _elem268.Read(iprot);
                  DungeonModelResponseList.Add(_elem268);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("DungeonMapResponse");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.currentDungeonId) {
        field.Name = "currentDungeonId";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(CurrentDungeonId);
        oprot.WriteFieldEnd();
      }
      if (CurrentDungeoNname != null && __isset.currentDungeoNname) {
        field.Name = "currentDungeoNname";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(CurrentDungeoNname);
        oprot.WriteFieldEnd();
      }
      if (__isset.lastDungeonId) {
        field.Name = "lastDungeonId";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(LastDungeonId);
        oprot.WriteFieldEnd();
      }
      if (LastDungeonName != null && __isset.lastDungeonName) {
        field.Name = "lastDungeonName";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(LastDungeonName);
        oprot.WriteFieldEnd();
      }
      if (__isset.nextDungeonId) {
        field.Name = "nextDungeonId";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(NextDungeonId);
        oprot.WriteFieldEnd();
      }
      if (NextDungeonName != null && __isset.nextDungeonName) {
        field.Name = "nextDungeonName";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(NextDungeonName);
        oprot.WriteFieldEnd();
      }
      if (__isset.dungeonImageID) {
        field.Name = "dungeonImageID";
        field.Type = TType.I32;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(DungeonImageID);
        oprot.WriteFieldEnd();
      }
      if (DungeonModelResponseList != null && __isset.dungeonModelResponseList) {
        field.Name = "dungeonModelResponseList";
        field.Type = TType.List;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, DungeonModelResponseList.Count));
          foreach (DungeonModelResponse _iter269 in DungeonModelResponseList)
          {
            _iter269.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("DungeonMapResponse(");
      sb.Append("CurrentDungeonId: ");
      sb.Append(CurrentDungeonId);
      sb.Append(",CurrentDungeoNname: ");
      sb.Append(CurrentDungeoNname);
      sb.Append(",LastDungeonId: ");
      sb.Append(LastDungeonId);
      sb.Append(",LastDungeonName: ");
      sb.Append(LastDungeonName);
      sb.Append(",NextDungeonId: ");
      sb.Append(NextDungeonId);
      sb.Append(",NextDungeonName: ");
      sb.Append(NextDungeonName);
      sb.Append(",DungeonImageID: ");
      sb.Append(DungeonImageID);
      sb.Append(",DungeonModelResponseList: ");
      sb.Append(DungeonModelResponseList);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
