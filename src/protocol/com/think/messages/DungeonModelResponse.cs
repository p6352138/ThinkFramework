/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace com.think.messages
{

  [Serializable]
  public partial class DungeonModelResponse : TBase
  {
    private int _dungeonMapIndex;
    private int _dungeonMapID;
    private string _dungeonMapName;
    private byte _dungeonType;
    private bool _isCanFight;
    private int _imageID;
    private int _where_x;
    private int _where_y;
    private int _arrowhead_x;
    private int _arrowhead_y;
    private int _arrowhead_rx;
    private int _arrowhead_ry;
    private int _arrowhead_rz;
    private int _dungeonId;
    private bool _isCapture;
    private bool _isCanReceiveAward;
    private string _stateDesc;
    private ResourceListResponse _resource;
    private byte _left_right;
    private int _belle_icon;

    public int DungeonMapIndex
    {
      get
      {
        return _dungeonMapIndex;
      }
      set
      {
        __isset.dungeonMapIndex = true;
        this._dungeonMapIndex = value;
      }
    }

    public int DungeonMapID
    {
      get
      {
        return _dungeonMapID;
      }
      set
      {
        __isset.dungeonMapID = true;
        this._dungeonMapID = value;
      }
    }

    public string DungeonMapName
    {
      get
      {
        return _dungeonMapName;
      }
      set
      {
        __isset.dungeonMapName = true;
        this._dungeonMapName = value;
      }
    }

    public byte DungeonType
    {
      get
      {
        return _dungeonType;
      }
      set
      {
        __isset.dungeonType = true;
        this._dungeonType = value;
      }
    }

    public bool IsCanFight
    {
      get
      {
        return _isCanFight;
      }
      set
      {
        __isset.isCanFight = true;
        this._isCanFight = value;
      }
    }

    public int ImageID
    {
      get
      {
        return _imageID;
      }
      set
      {
        __isset.imageID = true;
        this._imageID = value;
      }
    }

    public int Where_x
    {
      get
      {
        return _where_x;
      }
      set
      {
        __isset.where_x = true;
        this._where_x = value;
      }
    }

    public int Where_y
    {
      get
      {
        return _where_y;
      }
      set
      {
        __isset.where_y = true;
        this._where_y = value;
      }
    }

    public int Arrowhead_x
    {
      get
      {
        return _arrowhead_x;
      }
      set
      {
        __isset.arrowhead_x = true;
        this._arrowhead_x = value;
      }
    }

    public int Arrowhead_y
    {
      get
      {
        return _arrowhead_y;
      }
      set
      {
        __isset.arrowhead_y = true;
        this._arrowhead_y = value;
      }
    }

    public int Arrowhead_rx
    {
      get
      {
        return _arrowhead_rx;
      }
      set
      {
        __isset.arrowhead_rx = true;
        this._arrowhead_rx = value;
      }
    }

    public int Arrowhead_ry
    {
      get
      {
        return _arrowhead_ry;
      }
      set
      {
        __isset.arrowhead_ry = true;
        this._arrowhead_ry = value;
      }
    }

    public int Arrowhead_rz
    {
      get
      {
        return _arrowhead_rz;
      }
      set
      {
        __isset.arrowhead_rz = true;
        this._arrowhead_rz = value;
      }
    }

    public int DungeonId
    {
      get
      {
        return _dungeonId;
      }
      set
      {
        __isset.dungeonId = true;
        this._dungeonId = value;
      }
    }

    public bool IsCapture
    {
      get
      {
        return _isCapture;
      }
      set
      {
        __isset.isCapture = true;
        this._isCapture = value;
      }
    }

    public bool IsCanReceiveAward
    {
      get
      {
        return _isCanReceiveAward;
      }
      set
      {
        __isset.isCanReceiveAward = true;
        this._isCanReceiveAward = value;
      }
    }

    public string StateDesc
    {
      get
      {
        return _stateDesc;
      }
      set
      {
        __isset.stateDesc = true;
        this._stateDesc = value;
      }
    }

    public ResourceListResponse Resource
    {
      get
      {
        return _resource;
      }
      set
      {
        __isset.resource = true;
        this._resource = value;
      }
    }

    public byte Left_right
    {
      get
      {
        return _left_right;
      }
      set
      {
        __isset.left_right = true;
        this._left_right = value;
      }
    }

    public int Belle_icon
    {
      get
      {
        return _belle_icon;
      }
      set
      {
        __isset.belle_icon = true;
        this._belle_icon = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool dungeonMapIndex;
      public bool dungeonMapID;
      public bool dungeonMapName;
      public bool dungeonType;
      public bool isCanFight;
      public bool imageID;
      public bool where_x;
      public bool where_y;
      public bool arrowhead_x;
      public bool arrowhead_y;
      public bool arrowhead_rx;
      public bool arrowhead_ry;
      public bool arrowhead_rz;
      public bool dungeonId;
      public bool isCapture;
      public bool isCanReceiveAward;
      public bool stateDesc;
      public bool resource;
      public bool left_right;
      public bool belle_icon;
    }

    public DungeonModelResponse() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              DungeonMapIndex = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              DungeonMapID = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              DungeonMapName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Byte) {
              DungeonType = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Bool) {
              IsCanFight = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              ImageID = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I32) {
              Where_x = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.I32) {
              Where_y = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.I32) {
              Arrowhead_x = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.I32) {
              Arrowhead_y = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.I32) {
              Arrowhead_rx = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.I32) {
              Arrowhead_ry = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.I32) {
              Arrowhead_rz = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 14:
            if (field.Type == TType.I32) {
              DungeonId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 15:
            if (field.Type == TType.Bool) {
              IsCapture = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 16:
            if (field.Type == TType.Bool) {
              IsCanReceiveAward = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 17:
            if (field.Type == TType.String) {
              StateDesc = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 18:
            if (field.Type == TType.Struct) {
              Resource = new ResourceListResponse();
              Resource.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 19:
            if (field.Type == TType.Byte) {
              Left_right = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 20:
            if (field.Type == TType.I32) {
              Belle_icon = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("DungeonModelResponse");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.dungeonMapIndex) {
        field.Name = "dungeonMapIndex";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(DungeonMapIndex);
        oprot.WriteFieldEnd();
      }
      if (__isset.dungeonMapID) {
        field.Name = "dungeonMapID";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(DungeonMapID);
        oprot.WriteFieldEnd();
      }
      if (DungeonMapName != null && __isset.dungeonMapName) {
        field.Name = "dungeonMapName";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(DungeonMapName);
        oprot.WriteFieldEnd();
      }
      if (__isset.dungeonType) {
        field.Name = "dungeonType";
        field.Type = TType.Byte;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(DungeonType);
        oprot.WriteFieldEnd();
      }
      if (__isset.isCanFight) {
        field.Name = "isCanFight";
        field.Type = TType.Bool;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(IsCanFight);
        oprot.WriteFieldEnd();
      }
      if (__isset.imageID) {
        field.Name = "imageID";
        field.Type = TType.I32;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ImageID);
        oprot.WriteFieldEnd();
      }
      if (__isset.where_x) {
        field.Name = "where_x";
        field.Type = TType.I32;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Where_x);
        oprot.WriteFieldEnd();
      }
      if (__isset.where_y) {
        field.Name = "where_y";
        field.Type = TType.I32;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Where_y);
        oprot.WriteFieldEnd();
      }
      if (__isset.arrowhead_x) {
        field.Name = "arrowhead_x";
        field.Type = TType.I32;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Arrowhead_x);
        oprot.WriteFieldEnd();
      }
      if (__isset.arrowhead_y) {
        field.Name = "arrowhead_y";
        field.Type = TType.I32;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Arrowhead_y);
        oprot.WriteFieldEnd();
      }
      if (__isset.arrowhead_rx) {
        field.Name = "arrowhead_rx";
        field.Type = TType.I32;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Arrowhead_rx);
        oprot.WriteFieldEnd();
      }
      if (__isset.arrowhead_ry) {
        field.Name = "arrowhead_ry";
        field.Type = TType.I32;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Arrowhead_ry);
        oprot.WriteFieldEnd();
      }
      if (__isset.arrowhead_rz) {
        field.Name = "arrowhead_rz";
        field.Type = TType.I32;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Arrowhead_rz);
        oprot.WriteFieldEnd();
      }
      if (__isset.dungeonId) {
        field.Name = "dungeonId";
        field.Type = TType.I32;
        field.ID = 14;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(DungeonId);
        oprot.WriteFieldEnd();
      }
      if (__isset.isCapture) {
        field.Name = "isCapture";
        field.Type = TType.Bool;
        field.ID = 15;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(IsCapture);
        oprot.WriteFieldEnd();
      }
      if (__isset.isCanReceiveAward) {
        field.Name = "isCanReceiveAward";
        field.Type = TType.Bool;
        field.ID = 16;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(IsCanReceiveAward);
        oprot.WriteFieldEnd();
      }
      if (StateDesc != null && __isset.stateDesc) {
        field.Name = "stateDesc";
        field.Type = TType.String;
        field.ID = 17;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(StateDesc);
        oprot.WriteFieldEnd();
      }
      if (Resource != null && __isset.resource) {
        field.Name = "resource";
        field.Type = TType.Struct;
        field.ID = 18;
        oprot.WriteFieldBegin(field);
        Resource.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (__isset.left_right) {
        field.Name = "left_right";
        field.Type = TType.Byte;
        field.ID = 19;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(Left_right);
        oprot.WriteFieldEnd();
      }
      if (__isset.belle_icon) {
        field.Name = "belle_icon";
        field.Type = TType.I32;
        field.ID = 20;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Belle_icon);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("DungeonModelResponse(");
      sb.Append("DungeonMapIndex: ");
      sb.Append(DungeonMapIndex);
      sb.Append(",DungeonMapID: ");
      sb.Append(DungeonMapID);
      sb.Append(",DungeonMapName: ");
      sb.Append(DungeonMapName);
      sb.Append(",DungeonType: ");
      sb.Append(DungeonType);
      sb.Append(",IsCanFight: ");
      sb.Append(IsCanFight);
      sb.Append(",ImageID: ");
      sb.Append(ImageID);
      sb.Append(",Where_x: ");
      sb.Append(Where_x);
      sb.Append(",Where_y: ");
      sb.Append(Where_y);
      sb.Append(",Arrowhead_x: ");
      sb.Append(Arrowhead_x);
      sb.Append(",Arrowhead_y: ");
      sb.Append(Arrowhead_y);
      sb.Append(",Arrowhead_rx: ");
      sb.Append(Arrowhead_rx);
      sb.Append(",Arrowhead_ry: ");
      sb.Append(Arrowhead_ry);
      sb.Append(",Arrowhead_rz: ");
      sb.Append(Arrowhead_rz);
      sb.Append(",DungeonId: ");
      sb.Append(DungeonId);
      sb.Append(",IsCapture: ");
      sb.Append(IsCapture);
      sb.Append(",IsCanReceiveAward: ");
      sb.Append(IsCanReceiveAward);
      sb.Append(",StateDesc: ");
      sb.Append(StateDesc);
      sb.Append(",Resource: ");
      sb.Append(Resource== null ? "<null>" : Resource.ToString());
      sb.Append(",Left_right: ");
      sb.Append(Left_right);
      sb.Append(",Belle_icon: ");
      sb.Append(Belle_icon);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
