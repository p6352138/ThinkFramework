/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace com.think.messages
{

  [Serializable]
  public partial class EmbattleListResponse : TBase
  {
    private List<EmbattleResponse> _embattle;
    private string _next_require;
    private byte _next_site;

    public List<EmbattleResponse> Embattle
    {
      get
      {
        return _embattle;
      }
      set
      {
        __isset.embattle = true;
        this._embattle = value;
      }
    }

    public string Next_require
    {
      get
      {
        return _next_require;
      }
      set
      {
        __isset.next_require = true;
        this._next_require = value;
      }
    }

    public byte Next_site
    {
      get
      {
        return _next_site;
      }
      set
      {
        __isset.next_site = true;
        this._next_site = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool embattle;
      public bool next_require;
      public bool next_site;
    }

    public EmbattleListResponse() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.List) {
              {
                Embattle = new List<EmbattleResponse>();
                TList _list250 = iprot.ReadListBegin();
                for( int _i251 = 0; _i251 < _list250.Count; ++_i251)
                {
                  EmbattleResponse _elem252 = new EmbattleResponse();
                  _elem252 = new EmbattleResponse();
                  _elem252.Read(iprot);
                  Embattle.Add(_elem252);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Next_require = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Byte) {
              Next_site = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("EmbattleListResponse");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Embattle != null && __isset.embattle) {
        field.Name = "embattle";
        field.Type = TType.List;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Embattle.Count));
          foreach (EmbattleResponse _iter253 in Embattle)
          {
            _iter253.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Next_require != null && __isset.next_require) {
        field.Name = "next_require";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Next_require);
        oprot.WriteFieldEnd();
      }
      if (__isset.next_site) {
        field.Name = "next_site";
        field.Type = TType.Byte;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(Next_site);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("EmbattleListResponse(");
      sb.Append("Embattle: ");
      sb.Append(Embattle);
      sb.Append(",Next_require: ");
      sb.Append(Next_require);
      sb.Append(",Next_site: ");
      sb.Append(Next_site);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
