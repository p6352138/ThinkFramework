/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace com.think.messages
{

  [Serializable]
  public partial class EnterGameResponse : TBase
  {
    private PlayerResponse _player;
    private int _ui_id;
    private int _opration_id;

    public PlayerResponse Player
    {
      get
      {
        return _player;
      }
      set
      {
        __isset.player = true;
        this._player = value;
      }
    }

    public int Ui_id
    {
      get
      {
        return _ui_id;
      }
      set
      {
        __isset.ui_id = true;
        this._ui_id = value;
      }
    }

    public int Opration_id
    {
      get
      {
        return _opration_id;
      }
      set
      {
        __isset.opration_id = true;
        this._opration_id = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool player;
      public bool ui_id;
      public bool opration_id;
    }

    public EnterGameResponse() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct) {
              Player = new PlayerResponse();
              Player.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              Ui_id = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              Opration_id = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("EnterGameResponse");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Player != null && __isset.player) {
        field.Name = "player";
        field.Type = TType.Struct;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        Player.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (__isset.ui_id) {
        field.Name = "ui_id";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Ui_id);
        oprot.WriteFieldEnd();
      }
      if (__isset.opration_id) {
        field.Name = "opration_id";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Opration_id);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("EnterGameResponse(");
      sb.Append("Player: ");
      sb.Append(Player== null ? "<null>" : Player.ToString());
      sb.Append(",Ui_id: ");
      sb.Append(Ui_id);
      sb.Append(",Opration_id: ");
      sb.Append(Opration_id);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
