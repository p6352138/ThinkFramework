/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace com.think.messages
{

  [Serializable]
  public partial class EquipWashBaseResponse : TBase
  {
    private List<EquipWashTroughResponse> _equipWashTroughResponseList;
    private byte _isOpen;
    private int _consumeGold;
    private short _levle;
    private byte _isCanUpgrade;
    private short _minPlayerLvl;
    private string _upgradeLimitPrompt;

    public List<EquipWashTroughResponse> EquipWashTroughResponseList
    {
      get
      {
        return _equipWashTroughResponseList;
      }
      set
      {
        __isset.equipWashTroughResponseList = true;
        this._equipWashTroughResponseList = value;
      }
    }

    public byte IsOpen
    {
      get
      {
        return _isOpen;
      }
      set
      {
        __isset.isOpen = true;
        this._isOpen = value;
      }
    }

    public int ConsumeGold
    {
      get
      {
        return _consumeGold;
      }
      set
      {
        __isset.consumeGold = true;
        this._consumeGold = value;
      }
    }

    public short Levle
    {
      get
      {
        return _levle;
      }
      set
      {
        __isset.levle = true;
        this._levle = value;
      }
    }

    public byte IsCanUpgrade
    {
      get
      {
        return _isCanUpgrade;
      }
      set
      {
        __isset.isCanUpgrade = true;
        this._isCanUpgrade = value;
      }
    }

    public short MinPlayerLvl
    {
      get
      {
        return _minPlayerLvl;
      }
      set
      {
        __isset.minPlayerLvl = true;
        this._minPlayerLvl = value;
      }
    }

    public string UpgradeLimitPrompt
    {
      get
      {
        return _upgradeLimitPrompt;
      }
      set
      {
        __isset.upgradeLimitPrompt = true;
        this._upgradeLimitPrompt = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool equipWashTroughResponseList;
      public bool isOpen;
      public bool consumeGold;
      public bool levle;
      public bool isCanUpgrade;
      public bool minPlayerLvl;
      public bool upgradeLimitPrompt;
    }

    public EquipWashBaseResponse() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.List) {
              {
                EquipWashTroughResponseList = new List<EquipWashTroughResponse>();
                TList _list21 = iprot.ReadListBegin();
                for( int _i22 = 0; _i22 < _list21.Count; ++_i22)
                {
                  EquipWashTroughResponse _elem23 = new EquipWashTroughResponse();
                  _elem23 = new EquipWashTroughResponse();
                  _elem23.Read(iprot);
                  EquipWashTroughResponseList.Add(_elem23);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Byte) {
              IsOpen = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              ConsumeGold = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I16) {
              Levle = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Byte) {
              IsCanUpgrade = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I16) {
              MinPlayerLvl = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.String) {
              UpgradeLimitPrompt = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("EquipWashBaseResponse");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (EquipWashTroughResponseList != null && __isset.equipWashTroughResponseList) {
        field.Name = "equipWashTroughResponseList";
        field.Type = TType.List;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, EquipWashTroughResponseList.Count));
          foreach (EquipWashTroughResponse _iter24 in EquipWashTroughResponseList)
          {
            _iter24.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.isOpen) {
        field.Name = "isOpen";
        field.Type = TType.Byte;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(IsOpen);
        oprot.WriteFieldEnd();
      }
      if (__isset.consumeGold) {
        field.Name = "consumeGold";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ConsumeGold);
        oprot.WriteFieldEnd();
      }
      if (__isset.levle) {
        field.Name = "levle";
        field.Type = TType.I16;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(Levle);
        oprot.WriteFieldEnd();
      }
      if (__isset.isCanUpgrade) {
        field.Name = "isCanUpgrade";
        field.Type = TType.Byte;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(IsCanUpgrade);
        oprot.WriteFieldEnd();
      }
      if (__isset.minPlayerLvl) {
        field.Name = "minPlayerLvl";
        field.Type = TType.I16;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(MinPlayerLvl);
        oprot.WriteFieldEnd();
      }
      if (UpgradeLimitPrompt != null && __isset.upgradeLimitPrompt) {
        field.Name = "upgradeLimitPrompt";
        field.Type = TType.String;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(UpgradeLimitPrompt);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("EquipWashBaseResponse(");
      sb.Append("EquipWashTroughResponseList: ");
      sb.Append(EquipWashTroughResponseList);
      sb.Append(",IsOpen: ");
      sb.Append(IsOpen);
      sb.Append(",ConsumeGold: ");
      sb.Append(ConsumeGold);
      sb.Append(",Levle: ");
      sb.Append(Levle);
      sb.Append(",IsCanUpgrade: ");
      sb.Append(IsCanUpgrade);
      sb.Append(",MinPlayerLvl: ");
      sb.Append(MinPlayerLvl);
      sb.Append(",UpgradeLimitPrompt: ");
      sb.Append(UpgradeLimitPrompt);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
