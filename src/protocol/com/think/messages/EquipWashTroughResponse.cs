/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace com.think.messages
{

  [Serializable]
  public partial class EquipWashTroughResponse : TBase
  {
    private byte _index;
    private byte _attributeIndex;
    private int _curValue;
    private string _referenceValue;
    private byte _color;
    private byte _effect;

    public byte Index
    {
      get
      {
        return _index;
      }
      set
      {
        __isset.index = true;
        this._index = value;
      }
    }

    public byte AttributeIndex
    {
      get
      {
        return _attributeIndex;
      }
      set
      {
        __isset.attributeIndex = true;
        this._attributeIndex = value;
      }
    }

    public int CurValue
    {
      get
      {
        return _curValue;
      }
      set
      {
        __isset.curValue = true;
        this._curValue = value;
      }
    }

    public string ReferenceValue
    {
      get
      {
        return _referenceValue;
      }
      set
      {
        __isset.referenceValue = true;
        this._referenceValue = value;
      }
    }

    public byte Color
    {
      get
      {
        return _color;
      }
      set
      {
        __isset.color = true;
        this._color = value;
      }
    }

    public byte Effect
    {
      get
      {
        return _effect;
      }
      set
      {
        __isset.effect = true;
        this._effect = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool index;
      public bool attributeIndex;
      public bool curValue;
      public bool referenceValue;
      public bool color;
      public bool effect;
    }

    public EquipWashTroughResponse() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Byte) {
              Index = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Byte) {
              AttributeIndex = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              CurValue = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              ReferenceValue = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Byte) {
              Color = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.Byte) {
              Effect = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("EquipWashTroughResponse");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.index) {
        field.Name = "index";
        field.Type = TType.Byte;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(Index);
        oprot.WriteFieldEnd();
      }
      if (__isset.attributeIndex) {
        field.Name = "attributeIndex";
        field.Type = TType.Byte;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(AttributeIndex);
        oprot.WriteFieldEnd();
      }
      if (__isset.curValue) {
        field.Name = "curValue";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(CurValue);
        oprot.WriteFieldEnd();
      }
      if (ReferenceValue != null && __isset.referenceValue) {
        field.Name = "referenceValue";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ReferenceValue);
        oprot.WriteFieldEnd();
      }
      if (__isset.color) {
        field.Name = "color";
        field.Type = TType.Byte;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(Color);
        oprot.WriteFieldEnd();
      }
      if (__isset.effect) {
        field.Name = "effect";
        field.Type = TType.Byte;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(Effect);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("EquipWashTroughResponse(");
      sb.Append("Index: ");
      sb.Append(Index);
      sb.Append(",AttributeIndex: ");
      sb.Append(AttributeIndex);
      sb.Append(",CurValue: ");
      sb.Append(CurValue);
      sb.Append(",ReferenceValue: ");
      sb.Append(ReferenceValue);
      sb.Append(",Color: ");
      sb.Append(Color);
      sb.Append(",Effect: ");
      sb.Append(Effect);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
