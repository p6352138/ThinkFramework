/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace com.think.messages
{

  [Serializable]
  public partial class EquipmentWashBaseDataResponse : TBase
  {
    private int _lockTroughGold;
    private int _washUseGoodId;
    private int _batchWashMinVip;
    private int _lockTroughGoodNum;

    public int LockTroughGold
    {
      get
      {
        return _lockTroughGold;
      }
      set
      {
        __isset.lockTroughGold = true;
        this._lockTroughGold = value;
      }
    }

    public int WashUseGoodId
    {
      get
      {
        return _washUseGoodId;
      }
      set
      {
        __isset.washUseGoodId = true;
        this._washUseGoodId = value;
      }
    }

    public int BatchWashMinVip
    {
      get
      {
        return _batchWashMinVip;
      }
      set
      {
        __isset.batchWashMinVip = true;
        this._batchWashMinVip = value;
      }
    }

    public int LockTroughGoodNum
    {
      get
      {
        return _lockTroughGoodNum;
      }
      set
      {
        __isset.lockTroughGoodNum = true;
        this._lockTroughGoodNum = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool lockTroughGold;
      public bool washUseGoodId;
      public bool batchWashMinVip;
      public bool lockTroughGoodNum;
    }

    public EquipmentWashBaseDataResponse() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              LockTroughGold = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              WashUseGoodId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              BatchWashMinVip = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              LockTroughGoodNum = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("EquipmentWashBaseDataResponse");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.lockTroughGold) {
        field.Name = "lockTroughGold";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(LockTroughGold);
        oprot.WriteFieldEnd();
      }
      if (__isset.washUseGoodId) {
        field.Name = "washUseGoodId";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(WashUseGoodId);
        oprot.WriteFieldEnd();
      }
      if (__isset.batchWashMinVip) {
        field.Name = "batchWashMinVip";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(BatchWashMinVip);
        oprot.WriteFieldEnd();
      }
      if (__isset.lockTroughGoodNum) {
        field.Name = "lockTroughGoodNum";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(LockTroughGoodNum);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("EquipmentWashBaseDataResponse(");
      sb.Append("LockTroughGold: ");
      sb.Append(LockTroughGold);
      sb.Append(",WashUseGoodId: ");
      sb.Append(WashUseGoodId);
      sb.Append(",BatchWashMinVip: ");
      sb.Append(BatchWashMinVip);
      sb.Append(",LockTroughGoodNum: ");
      sb.Append(LockTroughGoodNum);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
