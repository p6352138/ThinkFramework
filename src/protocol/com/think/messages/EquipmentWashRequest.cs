/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace com.think.messages
{

  [Serializable]
  public partial class EquipmentWashRequest : TBase
  {
    private byte _reqType;
    private int _instanceId;
    private THashSet<byte> _lockTrough;
    private byte _batchWashLockIndex;
    private byte _buyWashStoneShopIndex;

    public byte ReqType
    {
      get
      {
        return _reqType;
      }
      set
      {
        __isset.reqType = true;
        this._reqType = value;
      }
    }

    public int InstanceId
    {
      get
      {
        return _instanceId;
      }
      set
      {
        __isset.instanceId = true;
        this._instanceId = value;
      }
    }

    public THashSet<byte> LockTrough
    {
      get
      {
        return _lockTrough;
      }
      set
      {
        __isset.lockTrough = true;
        this._lockTrough = value;
      }
    }

    public byte BatchWashLockIndex
    {
      get
      {
        return _batchWashLockIndex;
      }
      set
      {
        __isset.batchWashLockIndex = true;
        this._batchWashLockIndex = value;
      }
    }

    public byte BuyWashStoneShopIndex
    {
      get
      {
        return _buyWashStoneShopIndex;
      }
      set
      {
        __isset.buyWashStoneShopIndex = true;
        this._buyWashStoneShopIndex = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool reqType;
      public bool instanceId;
      public bool lockTrough;
      public bool batchWashLockIndex;
      public bool buyWashStoneShopIndex;
    }

    public EquipmentWashRequest() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Byte) {
              ReqType = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              InstanceId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Set) {
              {
                LockTrough = new THashSet<byte>();
                TSet _set785 = iprot.ReadSetBegin();
                for( int _i786 = 0; _i786 < _set785.Count; ++_i786)
                {
                  byte _elem787 = 0;
                  _elem787 = iprot.ReadByte();
                  LockTrough.Add(_elem787);
                }
                iprot.ReadSetEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Byte) {
              BatchWashLockIndex = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Byte) {
              BuyWashStoneShopIndex = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("EquipmentWashRequest");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.reqType) {
        field.Name = "reqType";
        field.Type = TType.Byte;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(ReqType);
        oprot.WriteFieldEnd();
      }
      if (__isset.instanceId) {
        field.Name = "instanceId";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(InstanceId);
        oprot.WriteFieldEnd();
      }
      if (LockTrough != null && __isset.lockTrough) {
        field.Name = "lockTrough";
        field.Type = TType.Set;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteSetBegin(new TSet(TType.Byte, LockTrough.Count));
          foreach (byte _iter788 in LockTrough)
          {
            oprot.WriteByte(_iter788);
          }
          oprot.WriteSetEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.batchWashLockIndex) {
        field.Name = "batchWashLockIndex";
        field.Type = TType.Byte;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(BatchWashLockIndex);
        oprot.WriteFieldEnd();
      }
      if (__isset.buyWashStoneShopIndex) {
        field.Name = "buyWashStoneShopIndex";
        field.Type = TType.Byte;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(BuyWashStoneShopIndex);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("EquipmentWashRequest(");
      sb.Append("ReqType: ");
      sb.Append(ReqType);
      sb.Append(",InstanceId: ");
      sb.Append(InstanceId);
      sb.Append(",LockTrough: ");
      sb.Append(LockTrough);
      sb.Append(",BatchWashLockIndex: ");
      sb.Append(BatchWashLockIndex);
      sb.Append(",BuyWashStoneShopIndex: ");
      sb.Append(BuyWashStoneShopIndex);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
