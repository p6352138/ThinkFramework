/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace com.think.messages
{

  [Serializable]
  public partial class ExchangeOrdnanceResponse : TBase
  {
    private int _ordnanceId;
    private string _name;
    private byte _trait;
    private int _iconId;
    private int _imageId;
    private string _description;
    private int _exchange_num;
    private int _exchange_lvl;
    private byte _exchange_type;

    public int OrdnanceId
    {
      get
      {
        return _ordnanceId;
      }
      set
      {
        __isset.ordnanceId = true;
        this._ordnanceId = value;
      }
    }

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    public byte Trait
    {
      get
      {
        return _trait;
      }
      set
      {
        __isset.trait = true;
        this._trait = value;
      }
    }

    public int IconId
    {
      get
      {
        return _iconId;
      }
      set
      {
        __isset.iconId = true;
        this._iconId = value;
      }
    }

    public int ImageId
    {
      get
      {
        return _imageId;
      }
      set
      {
        __isset.imageId = true;
        this._imageId = value;
      }
    }

    public string Description
    {
      get
      {
        return _description;
      }
      set
      {
        __isset.description = true;
        this._description = value;
      }
    }

    public int Exchange_num
    {
      get
      {
        return _exchange_num;
      }
      set
      {
        __isset.exchange_num = true;
        this._exchange_num = value;
      }
    }

    public int Exchange_lvl
    {
      get
      {
        return _exchange_lvl;
      }
      set
      {
        __isset.exchange_lvl = true;
        this._exchange_lvl = value;
      }
    }

    public byte Exchange_type
    {
      get
      {
        return _exchange_type;
      }
      set
      {
        __isset.exchange_type = true;
        this._exchange_type = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool ordnanceId;
      public bool name;
      public bool trait;
      public bool iconId;
      public bool imageId;
      public bool description;
      public bool exchange_num;
      public bool exchange_lvl;
      public bool exchange_type;
    }

    public ExchangeOrdnanceResponse() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              OrdnanceId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Name = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Byte) {
              Trait = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              IconId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              ImageId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.String) {
              Description = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I32) {
              Exchange_num = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.I32) {
              Exchange_lvl = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.Byte) {
              Exchange_type = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("ExchangeOrdnanceResponse");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.ordnanceId) {
        field.Name = "ordnanceId";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(OrdnanceId);
        oprot.WriteFieldEnd();
      }
      if (Name != null && __isset.name) {
        field.Name = "name";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Name);
        oprot.WriteFieldEnd();
      }
      if (__isset.trait) {
        field.Name = "trait";
        field.Type = TType.Byte;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(Trait);
        oprot.WriteFieldEnd();
      }
      if (__isset.iconId) {
        field.Name = "iconId";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(IconId);
        oprot.WriteFieldEnd();
      }
      if (__isset.imageId) {
        field.Name = "imageId";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ImageId);
        oprot.WriteFieldEnd();
      }
      if (Description != null && __isset.description) {
        field.Name = "description";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Description);
        oprot.WriteFieldEnd();
      }
      if (__isset.exchange_num) {
        field.Name = "exchange_num";
        field.Type = TType.I32;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Exchange_num);
        oprot.WriteFieldEnd();
      }
      if (__isset.exchange_lvl) {
        field.Name = "exchange_lvl";
        field.Type = TType.I32;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Exchange_lvl);
        oprot.WriteFieldEnd();
      }
      if (__isset.exchange_type) {
        field.Name = "exchange_type";
        field.Type = TType.Byte;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(Exchange_type);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("ExchangeOrdnanceResponse(");
      sb.Append("OrdnanceId: ");
      sb.Append(OrdnanceId);
      sb.Append(",Name: ");
      sb.Append(Name);
      sb.Append(",Trait: ");
      sb.Append(Trait);
      sb.Append(",IconId: ");
      sb.Append(IconId);
      sb.Append(",ImageId: ");
      sb.Append(ImageId);
      sb.Append(",Description: ");
      sb.Append(Description);
      sb.Append(",Exchange_num: ");
      sb.Append(Exchange_num);
      sb.Append(",Exchange_lvl: ");
      sb.Append(Exchange_lvl);
      sb.Append(",Exchange_type: ");
      sb.Append(Exchange_type);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
