/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace com.think.messages
{

  [Serializable]
  public partial class ExclusiveOrdnanceTrainResponse : TBase
  {
    private byte _type;
    private int _instance_id;
    private int _ordnance_id;
    private int _train_num;
    private int _multiple;
    private int _double_num;
    private int _exp;
    private int _gold;
    private OrdnanceDetailResponse _ordnanceDetail;
    private byte _effects;
    private byte _next_effects;
    private string _next_effects_name;

    public byte Type
    {
      get
      {
        return _type;
      }
      set
      {
        __isset.type = true;
        this._type = value;
      }
    }

    public int Instance_id
    {
      get
      {
        return _instance_id;
      }
      set
      {
        __isset.instance_id = true;
        this._instance_id = value;
      }
    }

    public int Ordnance_id
    {
      get
      {
        return _ordnance_id;
      }
      set
      {
        __isset.ordnance_id = true;
        this._ordnance_id = value;
      }
    }

    public int Train_num
    {
      get
      {
        return _train_num;
      }
      set
      {
        __isset.train_num = true;
        this._train_num = value;
      }
    }

    public int Multiple
    {
      get
      {
        return _multiple;
      }
      set
      {
        __isset.multiple = true;
        this._multiple = value;
      }
    }

    public int Double_num
    {
      get
      {
        return _double_num;
      }
      set
      {
        __isset.double_num = true;
        this._double_num = value;
      }
    }

    public int Exp
    {
      get
      {
        return _exp;
      }
      set
      {
        __isset.exp = true;
        this._exp = value;
      }
    }

    public int Gold
    {
      get
      {
        return _gold;
      }
      set
      {
        __isset.gold = true;
        this._gold = value;
      }
    }

    public OrdnanceDetailResponse OrdnanceDetail
    {
      get
      {
        return _ordnanceDetail;
      }
      set
      {
        __isset.ordnanceDetail = true;
        this._ordnanceDetail = value;
      }
    }

    public byte Effects
    {
      get
      {
        return _effects;
      }
      set
      {
        __isset.effects = true;
        this._effects = value;
      }
    }

    public byte Next_effects
    {
      get
      {
        return _next_effects;
      }
      set
      {
        __isset.next_effects = true;
        this._next_effects = value;
      }
    }

    public string Next_effects_name
    {
      get
      {
        return _next_effects_name;
      }
      set
      {
        __isset.next_effects_name = true;
        this._next_effects_name = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool type;
      public bool instance_id;
      public bool ordnance_id;
      public bool train_num;
      public bool multiple;
      public bool double_num;
      public bool exp;
      public bool gold;
      public bool ordnanceDetail;
      public bool effects;
      public bool next_effects;
      public bool next_effects_name;
    }

    public ExclusiveOrdnanceTrainResponse() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Byte) {
              Type = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              Instance_id = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              Ordnance_id = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              Train_num = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              Multiple = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              Double_num = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I32) {
              Exp = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.I32) {
              Gold = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.Struct) {
              OrdnanceDetail = new OrdnanceDetailResponse();
              OrdnanceDetail.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.Byte) {
              Effects = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.Byte) {
              Next_effects = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.String) {
              Next_effects_name = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("ExclusiveOrdnanceTrainResponse");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.type) {
        field.Name = "type";
        field.Type = TType.Byte;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(Type);
        oprot.WriteFieldEnd();
      }
      if (__isset.instance_id) {
        field.Name = "instance_id";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Instance_id);
        oprot.WriteFieldEnd();
      }
      if (__isset.ordnance_id) {
        field.Name = "ordnance_id";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Ordnance_id);
        oprot.WriteFieldEnd();
      }
      if (__isset.train_num) {
        field.Name = "train_num";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Train_num);
        oprot.WriteFieldEnd();
      }
      if (__isset.multiple) {
        field.Name = "multiple";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Multiple);
        oprot.WriteFieldEnd();
      }
      if (__isset.double_num) {
        field.Name = "double_num";
        field.Type = TType.I32;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Double_num);
        oprot.WriteFieldEnd();
      }
      if (__isset.exp) {
        field.Name = "exp";
        field.Type = TType.I32;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Exp);
        oprot.WriteFieldEnd();
      }
      if (__isset.gold) {
        field.Name = "gold";
        field.Type = TType.I32;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Gold);
        oprot.WriteFieldEnd();
      }
      if (OrdnanceDetail != null && __isset.ordnanceDetail) {
        field.Name = "ordnanceDetail";
        field.Type = TType.Struct;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        OrdnanceDetail.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (__isset.effects) {
        field.Name = "effects";
        field.Type = TType.Byte;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(Effects);
        oprot.WriteFieldEnd();
      }
      if (__isset.next_effects) {
        field.Name = "next_effects";
        field.Type = TType.Byte;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(Next_effects);
        oprot.WriteFieldEnd();
      }
      if (Next_effects_name != null && __isset.next_effects_name) {
        field.Name = "next_effects_name";
        field.Type = TType.String;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Next_effects_name);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("ExclusiveOrdnanceTrainResponse(");
      sb.Append("Type: ");
      sb.Append(Type);
      sb.Append(",Instance_id: ");
      sb.Append(Instance_id);
      sb.Append(",Ordnance_id: ");
      sb.Append(Ordnance_id);
      sb.Append(",Train_num: ");
      sb.Append(Train_num);
      sb.Append(",Multiple: ");
      sb.Append(Multiple);
      sb.Append(",Double_num: ");
      sb.Append(Double_num);
      sb.Append(",Exp: ");
      sb.Append(Exp);
      sb.Append(",Gold: ");
      sb.Append(Gold);
      sb.Append(",OrdnanceDetail: ");
      sb.Append(OrdnanceDetail== null ? "<null>" : OrdnanceDetail.ToString());
      sb.Append(",Effects: ");
      sb.Append(Effects);
      sb.Append(",Next_effects: ");
      sb.Append(Next_effects);
      sb.Append(",Next_effects_name: ");
      sb.Append(Next_effects_name);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
