/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace com.think.messages
{

  [Serializable]
  public partial class ExpeditionRequest : TBase
  {
    private byte _type;
    private int _map_id;
    private List<int> _friendList;

    public byte Type
    {
      get
      {
        return _type;
      }
      set
      {
        __isset.type = true;
        this._type = value;
      }
    }

    public int Map_id
    {
      get
      {
        return _map_id;
      }
      set
      {
        __isset.map_id = true;
        this._map_id = value;
      }
    }

    public List<int> FriendList
    {
      get
      {
        return _friendList;
      }
      set
      {
        __isset.friendList = true;
        this._friendList = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool type;
      public bool map_id;
      public bool friendList;
    }

    public ExpeditionRequest() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Byte) {
              Type = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              Map_id = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.List) {
              {
                FriendList = new List<int>();
                TList _list572 = iprot.ReadListBegin();
                for( int _i573 = 0; _i573 < _list572.Count; ++_i573)
                {
                  int _elem574 = 0;
                  _elem574 = iprot.ReadI32();
                  FriendList.Add(_elem574);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("ExpeditionRequest");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.type) {
        field.Name = "type";
        field.Type = TType.Byte;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(Type);
        oprot.WriteFieldEnd();
      }
      if (__isset.map_id) {
        field.Name = "map_id";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Map_id);
        oprot.WriteFieldEnd();
      }
      if (FriendList != null && __isset.friendList) {
        field.Name = "friendList";
        field.Type = TType.List;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.I32, FriendList.Count));
          foreach (int _iter575 in FriendList)
          {
            oprot.WriteI32(_iter575);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("ExpeditionRequest(");
      sb.Append("Type: ");
      sb.Append(Type);
      sb.Append(",Map_id: ");
      sb.Append(Map_id);
      sb.Append(",FriendList: ");
      sb.Append(FriendList);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
