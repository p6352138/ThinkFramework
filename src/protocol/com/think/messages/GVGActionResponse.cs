/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace com.think.messages
{

  [Serializable]
  public partial class GVGActionResponse : TBase
  {
    private byte _actionType;
    private int _objectID;
    private int _cell_x;
    private int _cell_y;
    private int _move_cell_x;
    private int _move_cell_y;
    private int _skill_id;
    private List<GVGHarmTargetResponse> _gvgHarmTargetList;

    public byte ActionType
    {
      get
      {
        return _actionType;
      }
      set
      {
        __isset.actionType = true;
        this._actionType = value;
      }
    }

    public int ObjectID
    {
      get
      {
        return _objectID;
      }
      set
      {
        __isset.objectID = true;
        this._objectID = value;
      }
    }

    public int Cell_x
    {
      get
      {
        return _cell_x;
      }
      set
      {
        __isset.cell_x = true;
        this._cell_x = value;
      }
    }

    public int Cell_y
    {
      get
      {
        return _cell_y;
      }
      set
      {
        __isset.cell_y = true;
        this._cell_y = value;
      }
    }

    public int Move_cell_x
    {
      get
      {
        return _move_cell_x;
      }
      set
      {
        __isset.move_cell_x = true;
        this._move_cell_x = value;
      }
    }

    public int Move_cell_y
    {
      get
      {
        return _move_cell_y;
      }
      set
      {
        __isset.move_cell_y = true;
        this._move_cell_y = value;
      }
    }

    public int Skill_id
    {
      get
      {
        return _skill_id;
      }
      set
      {
        __isset.skill_id = true;
        this._skill_id = value;
      }
    }

    public List<GVGHarmTargetResponse> GvgHarmTargetList
    {
      get
      {
        return _gvgHarmTargetList;
      }
      set
      {
        __isset.gvgHarmTargetList = true;
        this._gvgHarmTargetList = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool actionType;
      public bool objectID;
      public bool cell_x;
      public bool cell_y;
      public bool move_cell_x;
      public bool move_cell_y;
      public bool skill_id;
      public bool gvgHarmTargetList;
    }

    public GVGActionResponse() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Byte) {
              ActionType = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              ObjectID = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              Cell_x = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              Cell_y = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              Move_cell_x = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              Move_cell_y = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I32) {
              Skill_id = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.List) {
              {
                GvgHarmTargetList = new List<GVGHarmTargetResponse>();
                TList _list648 = iprot.ReadListBegin();
                for( int _i649 = 0; _i649 < _list648.Count; ++_i649)
                {
                  GVGHarmTargetResponse _elem650 = new GVGHarmTargetResponse();
                  _elem650 = new GVGHarmTargetResponse();
                  _elem650.Read(iprot);
                  GvgHarmTargetList.Add(_elem650);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("GVGActionResponse");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.actionType) {
        field.Name = "actionType";
        field.Type = TType.Byte;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(ActionType);
        oprot.WriteFieldEnd();
      }
      if (__isset.objectID) {
        field.Name = "objectID";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ObjectID);
        oprot.WriteFieldEnd();
      }
      if (__isset.cell_x) {
        field.Name = "cell_x";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Cell_x);
        oprot.WriteFieldEnd();
      }
      if (__isset.cell_y) {
        field.Name = "cell_y";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Cell_y);
        oprot.WriteFieldEnd();
      }
      if (__isset.move_cell_x) {
        field.Name = "move_cell_x";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Move_cell_x);
        oprot.WriteFieldEnd();
      }
      if (__isset.move_cell_y) {
        field.Name = "move_cell_y";
        field.Type = TType.I32;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Move_cell_y);
        oprot.WriteFieldEnd();
      }
      if (__isset.skill_id) {
        field.Name = "skill_id";
        field.Type = TType.I32;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Skill_id);
        oprot.WriteFieldEnd();
      }
      if (GvgHarmTargetList != null && __isset.gvgHarmTargetList) {
        field.Name = "gvgHarmTargetList";
        field.Type = TType.List;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, GvgHarmTargetList.Count));
          foreach (GVGHarmTargetResponse _iter651 in GvgHarmTargetList)
          {
            _iter651.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("GVGActionResponse(");
      sb.Append("ActionType: ");
      sb.Append(ActionType);
      sb.Append(",ObjectID: ");
      sb.Append(ObjectID);
      sb.Append(",Cell_x: ");
      sb.Append(Cell_x);
      sb.Append(",Cell_y: ");
      sb.Append(Cell_y);
      sb.Append(",Move_cell_x: ");
      sb.Append(Move_cell_x);
      sb.Append(",Move_cell_y: ");
      sb.Append(Move_cell_y);
      sb.Append(",Skill_id: ");
      sb.Append(Skill_id);
      sb.Append(",GvgHarmTargetList: ");
      sb.Append(GvgHarmTargetList);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
