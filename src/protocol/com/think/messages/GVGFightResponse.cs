/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace com.think.messages
{

  [Serializable]
  public partial class GVGFightResponse : TBase
  {
    private byte _respType;
    private Dictionary<string, int> _ownerPlayerMap;
    private Dictionary<string, int> _enemyPlayerMap;
    private List<GVGObjectResponse> _objectList;
    private List<GVGActionResponse> _actionList;
    private int _ownerPoint;
    private int _enemyPoint;
    private bool _isEnemy;

    public byte RespType
    {
      get
      {
        return _respType;
      }
      set
      {
        __isset.respType = true;
        this._respType = value;
      }
    }

    public Dictionary<string, int> OwnerPlayerMap
    {
      get
      {
        return _ownerPlayerMap;
      }
      set
      {
        __isset.ownerPlayerMap = true;
        this._ownerPlayerMap = value;
      }
    }

    public Dictionary<string, int> EnemyPlayerMap
    {
      get
      {
        return _enemyPlayerMap;
      }
      set
      {
        __isset.enemyPlayerMap = true;
        this._enemyPlayerMap = value;
      }
    }

    public List<GVGObjectResponse> ObjectList
    {
      get
      {
        return _objectList;
      }
      set
      {
        __isset.objectList = true;
        this._objectList = value;
      }
    }

    public List<GVGActionResponse> ActionList
    {
      get
      {
        return _actionList;
      }
      set
      {
        __isset.actionList = true;
        this._actionList = value;
      }
    }

    public int OwnerPoint
    {
      get
      {
        return _ownerPoint;
      }
      set
      {
        __isset.ownerPoint = true;
        this._ownerPoint = value;
      }
    }

    public int EnemyPoint
    {
      get
      {
        return _enemyPoint;
      }
      set
      {
        __isset.enemyPoint = true;
        this._enemyPoint = value;
      }
    }

    public bool IsEnemy
    {
      get
      {
        return _isEnemy;
      }
      set
      {
        __isset.isEnemy = true;
        this._isEnemy = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool respType;
      public bool ownerPlayerMap;
      public bool enemyPlayerMap;
      public bool objectList;
      public bool actionList;
      public bool ownerPoint;
      public bool enemyPoint;
      public bool isEnemy;
    }

    public GVGFightResponse() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Byte) {
              RespType = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Map) {
              {
                OwnerPlayerMap = new Dictionary<string, int>();
                TMap _map652 = iprot.ReadMapBegin();
                for( int _i653 = 0; _i653 < _map652.Count; ++_i653)
                {
                  string _key654;
                  int _val655;
                  _key654 = iprot.ReadString();
                  _val655 = iprot.ReadI32();
                  OwnerPlayerMap[_key654] = _val655;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Map) {
              {
                EnemyPlayerMap = new Dictionary<string, int>();
                TMap _map656 = iprot.ReadMapBegin();
                for( int _i657 = 0; _i657 < _map656.Count; ++_i657)
                {
                  string _key658;
                  int _val659;
                  _key658 = iprot.ReadString();
                  _val659 = iprot.ReadI32();
                  EnemyPlayerMap[_key658] = _val659;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.List) {
              {
                ObjectList = new List<GVGObjectResponse>();
                TList _list660 = iprot.ReadListBegin();
                for( int _i661 = 0; _i661 < _list660.Count; ++_i661)
                {
                  GVGObjectResponse _elem662 = new GVGObjectResponse();
                  _elem662 = new GVGObjectResponse();
                  _elem662.Read(iprot);
                  ObjectList.Add(_elem662);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.List) {
              {
                ActionList = new List<GVGActionResponse>();
                TList _list663 = iprot.ReadListBegin();
                for( int _i664 = 0; _i664 < _list663.Count; ++_i664)
                {
                  GVGActionResponse _elem665 = new GVGActionResponse();
                  _elem665 = new GVGActionResponse();
                  _elem665.Read(iprot);
                  ActionList.Add(_elem665);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              OwnerPoint = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I32) {
              EnemyPoint = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.Bool) {
              IsEnemy = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("GVGFightResponse");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.respType) {
        field.Name = "respType";
        field.Type = TType.Byte;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(RespType);
        oprot.WriteFieldEnd();
      }
      if (OwnerPlayerMap != null && __isset.ownerPlayerMap) {
        field.Name = "ownerPlayerMap";
        field.Type = TType.Map;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.I32, OwnerPlayerMap.Count));
          foreach (string _iter666 in OwnerPlayerMap.Keys)
          {
            oprot.WriteString(_iter666);
            oprot.WriteI32(OwnerPlayerMap[_iter666]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (EnemyPlayerMap != null && __isset.enemyPlayerMap) {
        field.Name = "enemyPlayerMap";
        field.Type = TType.Map;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.I32, EnemyPlayerMap.Count));
          foreach (string _iter667 in EnemyPlayerMap.Keys)
          {
            oprot.WriteString(_iter667);
            oprot.WriteI32(EnemyPlayerMap[_iter667]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (ObjectList != null && __isset.objectList) {
        field.Name = "objectList";
        field.Type = TType.List;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, ObjectList.Count));
          foreach (GVGObjectResponse _iter668 in ObjectList)
          {
            _iter668.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (ActionList != null && __isset.actionList) {
        field.Name = "actionList";
        field.Type = TType.List;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, ActionList.Count));
          foreach (GVGActionResponse _iter669 in ActionList)
          {
            _iter669.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.ownerPoint) {
        field.Name = "ownerPoint";
        field.Type = TType.I32;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(OwnerPoint);
        oprot.WriteFieldEnd();
      }
      if (__isset.enemyPoint) {
        field.Name = "enemyPoint";
        field.Type = TType.I32;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(EnemyPoint);
        oprot.WriteFieldEnd();
      }
      if (__isset.isEnemy) {
        field.Name = "isEnemy";
        field.Type = TType.Bool;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(IsEnemy);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("GVGFightResponse(");
      sb.Append("RespType: ");
      sb.Append(RespType);
      sb.Append(",OwnerPlayerMap: ");
      sb.Append(OwnerPlayerMap);
      sb.Append(",EnemyPlayerMap: ");
      sb.Append(EnemyPlayerMap);
      sb.Append(",ObjectList: ");
      sb.Append(ObjectList);
      sb.Append(",ActionList: ");
      sb.Append(ActionList);
      sb.Append(",OwnerPoint: ");
      sb.Append(OwnerPoint);
      sb.Append(",EnemyPoint: ");
      sb.Append(EnemyPoint);
      sb.Append(",IsEnemy: ");
      sb.Append(IsEnemy);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
