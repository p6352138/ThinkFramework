/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace com.think.messages
{

  [Serializable]
  public partial class GeneralResponse : TBase
  {
    private int _general_instance_id;
    private int _general_id;
    private string _name;
    private short _level;
    private string _category;
    private long _exp;
    private long _upgradeNeedExp;
    private byte _cell;
    private BasePropertyResponse _baseProp;
    private AdvPropertyResponse _advProp;
    private List<BagResponse> _equipmentOnBody;
    private int _star_lvl;
    private byte _attack_type;
    private string _tacticsName;
    private string _general_intro;
    private string _category_intro;
    private string _tactics_intro;
    private int _recruit_price;
    private int _prestige;
    private int _category_id;
    private byte _attack_type2;
    private int _icon;
    private byte _ordnanceSize;
    private byte _general_type;
    private int _general_fighting_capacity;
    private int _image;
    private int _tactics_icon;
    private string _short_desc;
    private byte _official_level;
    private string _official_name;
    private string _specialty;
    private byte _specialty_type;
    private byte _soldiers_type;
    private List<UpdateGeneralAttributeResponse> _attributeList;
    private GeneralPeirasmosResponse _generalPeirasmos;
    private StarDetailResponse _generalStar;

    public int General_instance_id
    {
      get
      {
        return _general_instance_id;
      }
      set
      {
        __isset.general_instance_id = true;
        this._general_instance_id = value;
      }
    }

    public int General_id
    {
      get
      {
        return _general_id;
      }
      set
      {
        __isset.general_id = true;
        this._general_id = value;
      }
    }

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    public short Level
    {
      get
      {
        return _level;
      }
      set
      {
        __isset.level = true;
        this._level = value;
      }
    }

    public string Category
    {
      get
      {
        return _category;
      }
      set
      {
        __isset.category = true;
        this._category = value;
      }
    }

    public long Exp
    {
      get
      {
        return _exp;
      }
      set
      {
        __isset.exp = true;
        this._exp = value;
      }
    }

    public long UpgradeNeedExp
    {
      get
      {
        return _upgradeNeedExp;
      }
      set
      {
        __isset.upgradeNeedExp = true;
        this._upgradeNeedExp = value;
      }
    }

    public byte Cell
    {
      get
      {
        return _cell;
      }
      set
      {
        __isset.cell = true;
        this._cell = value;
      }
    }

    public BasePropertyResponse BaseProp
    {
      get
      {
        return _baseProp;
      }
      set
      {
        __isset.baseProp = true;
        this._baseProp = value;
      }
    }

    public AdvPropertyResponse AdvProp
    {
      get
      {
        return _advProp;
      }
      set
      {
        __isset.advProp = true;
        this._advProp = value;
      }
    }

    public List<BagResponse> EquipmentOnBody
    {
      get
      {
        return _equipmentOnBody;
      }
      set
      {
        __isset.equipmentOnBody = true;
        this._equipmentOnBody = value;
      }
    }

    public int Star_lvl
    {
      get
      {
        return _star_lvl;
      }
      set
      {
        __isset.star_lvl = true;
        this._star_lvl = value;
      }
    }

    public byte Attack_type
    {
      get
      {
        return _attack_type;
      }
      set
      {
        __isset.attack_type = true;
        this._attack_type = value;
      }
    }

    public string TacticsName
    {
      get
      {
        return _tacticsName;
      }
      set
      {
        __isset.tacticsName = true;
        this._tacticsName = value;
      }
    }

    public string General_intro
    {
      get
      {
        return _general_intro;
      }
      set
      {
        __isset.general_intro = true;
        this._general_intro = value;
      }
    }

    public string Category_intro
    {
      get
      {
        return _category_intro;
      }
      set
      {
        __isset.category_intro = true;
        this._category_intro = value;
      }
    }

    public string Tactics_intro
    {
      get
      {
        return _tactics_intro;
      }
      set
      {
        __isset.tactics_intro = true;
        this._tactics_intro = value;
      }
    }

    public int Recruit_price
    {
      get
      {
        return _recruit_price;
      }
      set
      {
        __isset.recruit_price = true;
        this._recruit_price = value;
      }
    }

    public int Prestige
    {
      get
      {
        return _prestige;
      }
      set
      {
        __isset.prestige = true;
        this._prestige = value;
      }
    }

    public int Category_id
    {
      get
      {
        return _category_id;
      }
      set
      {
        __isset.category_id = true;
        this._category_id = value;
      }
    }

    public byte Attack_type2
    {
      get
      {
        return _attack_type2;
      }
      set
      {
        __isset.attack_type2 = true;
        this._attack_type2 = value;
      }
    }

    public int Icon
    {
      get
      {
        return _icon;
      }
      set
      {
        __isset.icon = true;
        this._icon = value;
      }
    }

    public byte OrdnanceSize
    {
      get
      {
        return _ordnanceSize;
      }
      set
      {
        __isset.ordnanceSize = true;
        this._ordnanceSize = value;
      }
    }

    public byte General_type
    {
      get
      {
        return _general_type;
      }
      set
      {
        __isset.general_type = true;
        this._general_type = value;
      }
    }

    public int General_fighting_capacity
    {
      get
      {
        return _general_fighting_capacity;
      }
      set
      {
        __isset.general_fighting_capacity = true;
        this._general_fighting_capacity = value;
      }
    }

    public int Image
    {
      get
      {
        return _image;
      }
      set
      {
        __isset.image = true;
        this._image = value;
      }
    }

    public int Tactics_icon
    {
      get
      {
        return _tactics_icon;
      }
      set
      {
        __isset.tactics_icon = true;
        this._tactics_icon = value;
      }
    }

    public string Short_desc
    {
      get
      {
        return _short_desc;
      }
      set
      {
        __isset.short_desc = true;
        this._short_desc = value;
      }
    }

    public byte Official_level
    {
      get
      {
        return _official_level;
      }
      set
      {
        __isset.official_level = true;
        this._official_level = value;
      }
    }

    public string Official_name
    {
      get
      {
        return _official_name;
      }
      set
      {
        __isset.official_name = true;
        this._official_name = value;
      }
    }

    public string Specialty
    {
      get
      {
        return _specialty;
      }
      set
      {
        __isset.specialty = true;
        this._specialty = value;
      }
    }

    public byte Specialty_type
    {
      get
      {
        return _specialty_type;
      }
      set
      {
        __isset.specialty_type = true;
        this._specialty_type = value;
      }
    }

    public byte Soldiers_type
    {
      get
      {
        return _soldiers_type;
      }
      set
      {
        __isset.soldiers_type = true;
        this._soldiers_type = value;
      }
    }

    public List<UpdateGeneralAttributeResponse> AttributeList
    {
      get
      {
        return _attributeList;
      }
      set
      {
        __isset.attributeList = true;
        this._attributeList = value;
      }
    }

    public GeneralPeirasmosResponse GeneralPeirasmos
    {
      get
      {
        return _generalPeirasmos;
      }
      set
      {
        __isset.generalPeirasmos = true;
        this._generalPeirasmos = value;
      }
    }

    public StarDetailResponse GeneralStar
    {
      get
      {
        return _generalStar;
      }
      set
      {
        __isset.generalStar = true;
        this._generalStar = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool general_instance_id;
      public bool general_id;
      public bool name;
      public bool level;
      public bool category;
      public bool exp;
      public bool upgradeNeedExp;
      public bool cell;
      public bool baseProp;
      public bool advProp;
      public bool equipmentOnBody;
      public bool star_lvl;
      public bool attack_type;
      public bool tacticsName;
      public bool general_intro;
      public bool category_intro;
      public bool tactics_intro;
      public bool recruit_price;
      public bool prestige;
      public bool category_id;
      public bool attack_type2;
      public bool icon;
      public bool ordnanceSize;
      public bool general_type;
      public bool general_fighting_capacity;
      public bool image;
      public bool tactics_icon;
      public bool short_desc;
      public bool official_level;
      public bool official_name;
      public bool specialty;
      public bool specialty_type;
      public bool soldiers_type;
      public bool attributeList;
      public bool generalPeirasmos;
      public bool generalStar;
    }

    public GeneralResponse() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              General_instance_id = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              General_id = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              Name = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I16) {
              Level = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              Category = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I64) {
              Exp = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I64) {
              UpgradeNeedExp = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.Byte) {
              Cell = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.Struct) {
              BaseProp = new BasePropertyResponse();
              BaseProp.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.Struct) {
              AdvProp = new AdvPropertyResponse();
              AdvProp.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.List) {
              {
                EquipmentOnBody = new List<BagResponse>();
                TList _list40 = iprot.ReadListBegin();
                for( int _i41 = 0; _i41 < _list40.Count; ++_i41)
                {
                  BagResponse _elem42 = new BagResponse();
                  _elem42 = new BagResponse();
                  _elem42.Read(iprot);
                  EquipmentOnBody.Add(_elem42);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.I32) {
              Star_lvl = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.Byte) {
              Attack_type = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 14:
            if (field.Type == TType.String) {
              TacticsName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 15:
            if (field.Type == TType.String) {
              General_intro = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 16:
            if (field.Type == TType.String) {
              Category_intro = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 17:
            if (field.Type == TType.String) {
              Tactics_intro = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 18:
            if (field.Type == TType.I32) {
              Recruit_price = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 19:
            if (field.Type == TType.I32) {
              Prestige = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 20:
            if (field.Type == TType.I32) {
              Category_id = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 21:
            if (field.Type == TType.Byte) {
              Attack_type2 = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 22:
            if (field.Type == TType.I32) {
              Icon = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 23:
            if (field.Type == TType.Byte) {
              OrdnanceSize = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 24:
            if (field.Type == TType.Byte) {
              General_type = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 25:
            if (field.Type == TType.I32) {
              General_fighting_capacity = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 26:
            if (field.Type == TType.I32) {
              Image = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 27:
            if (field.Type == TType.I32) {
              Tactics_icon = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 28:
            if (field.Type == TType.String) {
              Short_desc = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 29:
            if (field.Type == TType.Byte) {
              Official_level = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 30:
            if (field.Type == TType.String) {
              Official_name = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 31:
            if (field.Type == TType.String) {
              Specialty = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 32:
            if (field.Type == TType.Byte) {
              Specialty_type = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 33:
            if (field.Type == TType.Byte) {
              Soldiers_type = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 34:
            if (field.Type == TType.List) {
              {
                AttributeList = new List<UpdateGeneralAttributeResponse>();
                TList _list43 = iprot.ReadListBegin();
                for( int _i44 = 0; _i44 < _list43.Count; ++_i44)
                {
                  UpdateGeneralAttributeResponse _elem45 = new UpdateGeneralAttributeResponse();
                  _elem45 = new UpdateGeneralAttributeResponse();
                  _elem45.Read(iprot);
                  AttributeList.Add(_elem45);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 35:
            if (field.Type == TType.Struct) {
              GeneralPeirasmos = new GeneralPeirasmosResponse();
              GeneralPeirasmos.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 36:
            if (field.Type == TType.Struct) {
              GeneralStar = new StarDetailResponse();
              GeneralStar.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("GeneralResponse");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.general_instance_id) {
        field.Name = "general_instance_id";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(General_instance_id);
        oprot.WriteFieldEnd();
      }
      if (__isset.general_id) {
        field.Name = "general_id";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(General_id);
        oprot.WriteFieldEnd();
      }
      if (Name != null && __isset.name) {
        field.Name = "name";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Name);
        oprot.WriteFieldEnd();
      }
      if (__isset.level) {
        field.Name = "level";
        field.Type = TType.I16;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(Level);
        oprot.WriteFieldEnd();
      }
      if (Category != null && __isset.category) {
        field.Name = "category";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Category);
        oprot.WriteFieldEnd();
      }
      if (__isset.exp) {
        field.Name = "exp";
        field.Type = TType.I64;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Exp);
        oprot.WriteFieldEnd();
      }
      if (__isset.upgradeNeedExp) {
        field.Name = "upgradeNeedExp";
        field.Type = TType.I64;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(UpgradeNeedExp);
        oprot.WriteFieldEnd();
      }
      if (__isset.cell) {
        field.Name = "cell";
        field.Type = TType.Byte;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(Cell);
        oprot.WriteFieldEnd();
      }
      if (BaseProp != null && __isset.baseProp) {
        field.Name = "baseProp";
        field.Type = TType.Struct;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        BaseProp.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (AdvProp != null && __isset.advProp) {
        field.Name = "advProp";
        field.Type = TType.Struct;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        AdvProp.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (EquipmentOnBody != null && __isset.equipmentOnBody) {
        field.Name = "equipmentOnBody";
        field.Type = TType.List;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, EquipmentOnBody.Count));
          foreach (BagResponse _iter46 in EquipmentOnBody)
          {
            _iter46.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.star_lvl) {
        field.Name = "star_lvl";
        field.Type = TType.I32;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Star_lvl);
        oprot.WriteFieldEnd();
      }
      if (__isset.attack_type) {
        field.Name = "attack_type";
        field.Type = TType.Byte;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(Attack_type);
        oprot.WriteFieldEnd();
      }
      if (TacticsName != null && __isset.tacticsName) {
        field.Name = "tacticsName";
        field.Type = TType.String;
        field.ID = 14;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(TacticsName);
        oprot.WriteFieldEnd();
      }
      if (General_intro != null && __isset.general_intro) {
        field.Name = "general_intro";
        field.Type = TType.String;
        field.ID = 15;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(General_intro);
        oprot.WriteFieldEnd();
      }
      if (Category_intro != null && __isset.category_intro) {
        field.Name = "category_intro";
        field.Type = TType.String;
        field.ID = 16;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Category_intro);
        oprot.WriteFieldEnd();
      }
      if (Tactics_intro != null && __isset.tactics_intro) {
        field.Name = "tactics_intro";
        field.Type = TType.String;
        field.ID = 17;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Tactics_intro);
        oprot.WriteFieldEnd();
      }
      if (__isset.recruit_price) {
        field.Name = "recruit_price";
        field.Type = TType.I32;
        field.ID = 18;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Recruit_price);
        oprot.WriteFieldEnd();
      }
      if (__isset.prestige) {
        field.Name = "prestige";
        field.Type = TType.I32;
        field.ID = 19;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Prestige);
        oprot.WriteFieldEnd();
      }
      if (__isset.category_id) {
        field.Name = "category_id";
        field.Type = TType.I32;
        field.ID = 20;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Category_id);
        oprot.WriteFieldEnd();
      }
      if (__isset.attack_type2) {
        field.Name = "attack_type2";
        field.Type = TType.Byte;
        field.ID = 21;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(Attack_type2);
        oprot.WriteFieldEnd();
      }
      if (__isset.icon) {
        field.Name = "icon";
        field.Type = TType.I32;
        field.ID = 22;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Icon);
        oprot.WriteFieldEnd();
      }
      if (__isset.ordnanceSize) {
        field.Name = "ordnanceSize";
        field.Type = TType.Byte;
        field.ID = 23;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(OrdnanceSize);
        oprot.WriteFieldEnd();
      }
      if (__isset.general_type) {
        field.Name = "general_type";
        field.Type = TType.Byte;
        field.ID = 24;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(General_type);
        oprot.WriteFieldEnd();
      }
      if (__isset.general_fighting_capacity) {
        field.Name = "general_fighting_capacity";
        field.Type = TType.I32;
        field.ID = 25;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(General_fighting_capacity);
        oprot.WriteFieldEnd();
      }
      if (__isset.image) {
        field.Name = "image";
        field.Type = TType.I32;
        field.ID = 26;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Image);
        oprot.WriteFieldEnd();
      }
      if (__isset.tactics_icon) {
        field.Name = "tactics_icon";
        field.Type = TType.I32;
        field.ID = 27;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Tactics_icon);
        oprot.WriteFieldEnd();
      }
      if (Short_desc != null && __isset.short_desc) {
        field.Name = "short_desc";
        field.Type = TType.String;
        field.ID = 28;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Short_desc);
        oprot.WriteFieldEnd();
      }
      if (__isset.official_level) {
        field.Name = "official_level";
        field.Type = TType.Byte;
        field.ID = 29;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(Official_level);
        oprot.WriteFieldEnd();
      }
      if (Official_name != null && __isset.official_name) {
        field.Name = "official_name";
        field.Type = TType.String;
        field.ID = 30;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Official_name);
        oprot.WriteFieldEnd();
      }
      if (Specialty != null && __isset.specialty) {
        field.Name = "specialty";
        field.Type = TType.String;
        field.ID = 31;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Specialty);
        oprot.WriteFieldEnd();
      }
      if (__isset.specialty_type) {
        field.Name = "specialty_type";
        field.Type = TType.Byte;
        field.ID = 32;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(Specialty_type);
        oprot.WriteFieldEnd();
      }
      if (__isset.soldiers_type) {
        field.Name = "soldiers_type";
        field.Type = TType.Byte;
        field.ID = 33;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(Soldiers_type);
        oprot.WriteFieldEnd();
      }
      if (AttributeList != null && __isset.attributeList) {
        field.Name = "attributeList";
        field.Type = TType.List;
        field.ID = 34;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, AttributeList.Count));
          foreach (UpdateGeneralAttributeResponse _iter47 in AttributeList)
          {
            _iter47.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (GeneralPeirasmos != null && __isset.generalPeirasmos) {
        field.Name = "generalPeirasmos";
        field.Type = TType.Struct;
        field.ID = 35;
        oprot.WriteFieldBegin(field);
        GeneralPeirasmos.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (GeneralStar != null && __isset.generalStar) {
        field.Name = "generalStar";
        field.Type = TType.Struct;
        field.ID = 36;
        oprot.WriteFieldBegin(field);
        GeneralStar.Write(oprot);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("GeneralResponse(");
      sb.Append("General_instance_id: ");
      sb.Append(General_instance_id);
      sb.Append(",General_id: ");
      sb.Append(General_id);
      sb.Append(",Name: ");
      sb.Append(Name);
      sb.Append(",Level: ");
      sb.Append(Level);
      sb.Append(",Category: ");
      sb.Append(Category);
      sb.Append(",Exp: ");
      sb.Append(Exp);
      sb.Append(",UpgradeNeedExp: ");
      sb.Append(UpgradeNeedExp);
      sb.Append(",Cell: ");
      sb.Append(Cell);
      sb.Append(",BaseProp: ");
      sb.Append(BaseProp== null ? "<null>" : BaseProp.ToString());
      sb.Append(",AdvProp: ");
      sb.Append(AdvProp== null ? "<null>" : AdvProp.ToString());
      sb.Append(",EquipmentOnBody: ");
      sb.Append(EquipmentOnBody);
      sb.Append(",Star_lvl: ");
      sb.Append(Star_lvl);
      sb.Append(",Attack_type: ");
      sb.Append(Attack_type);
      sb.Append(",TacticsName: ");
      sb.Append(TacticsName);
      sb.Append(",General_intro: ");
      sb.Append(General_intro);
      sb.Append(",Category_intro: ");
      sb.Append(Category_intro);
      sb.Append(",Tactics_intro: ");
      sb.Append(Tactics_intro);
      sb.Append(",Recruit_price: ");
      sb.Append(Recruit_price);
      sb.Append(",Prestige: ");
      sb.Append(Prestige);
      sb.Append(",Category_id: ");
      sb.Append(Category_id);
      sb.Append(",Attack_type2: ");
      sb.Append(Attack_type2);
      sb.Append(",Icon: ");
      sb.Append(Icon);
      sb.Append(",OrdnanceSize: ");
      sb.Append(OrdnanceSize);
      sb.Append(",General_type: ");
      sb.Append(General_type);
      sb.Append(",General_fighting_capacity: ");
      sb.Append(General_fighting_capacity);
      sb.Append(",Image: ");
      sb.Append(Image);
      sb.Append(",Tactics_icon: ");
      sb.Append(Tactics_icon);
      sb.Append(",Short_desc: ");
      sb.Append(Short_desc);
      sb.Append(",Official_level: ");
      sb.Append(Official_level);
      sb.Append(",Official_name: ");
      sb.Append(Official_name);
      sb.Append(",Specialty: ");
      sb.Append(Specialty);
      sb.Append(",Specialty_type: ");
      sb.Append(Specialty_type);
      sb.Append(",Soldiers_type: ");
      sb.Append(Soldiers_type);
      sb.Append(",AttributeList: ");
      sb.Append(AttributeList);
      sb.Append(",GeneralPeirasmos: ");
      sb.Append(GeneralPeirasmos== null ? "<null>" : GeneralPeirasmos.ToString());
      sb.Append(",GeneralStar: ");
      sb.Append(GeneralStar== null ? "<null>" : GeneralStar.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }

}
