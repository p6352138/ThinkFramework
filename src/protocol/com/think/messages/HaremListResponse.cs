/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace com.think.messages
{

  [Serializable]
  public partial class HaremListResponse : TBase
  {
    private List<HaremResponse> _haremList;
    private Dictionary<int, List<string>> _messageList;
    private string _type1;
    private string _type2;
    private double _discount;

    public List<HaremResponse> HaremList
    {
      get
      {
        return _haremList;
      }
      set
      {
        __isset.haremList = true;
        this._haremList = value;
      }
    }

    public Dictionary<int, List<string>> MessageList
    {
      get
      {
        return _messageList;
      }
      set
      {
        __isset.messageList = true;
        this._messageList = value;
      }
    }

    public string Type1
    {
      get
      {
        return _type1;
      }
      set
      {
        __isset.type1 = true;
        this._type1 = value;
      }
    }

    public string Type2
    {
      get
      {
        return _type2;
      }
      set
      {
        __isset.type2 = true;
        this._type2 = value;
      }
    }

    public double Discount
    {
      get
      {
        return _discount;
      }
      set
      {
        __isset.discount = true;
        this._discount = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool haremList;
      public bool messageList;
      public bool type1;
      public bool type2;
      public bool discount;
    }

    public HaremListResponse() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.List) {
              {
                HaremList = new List<HaremResponse>();
                TList _list407 = iprot.ReadListBegin();
                for( int _i408 = 0; _i408 < _list407.Count; ++_i408)
                {
                  HaremResponse _elem409 = new HaremResponse();
                  _elem409 = new HaremResponse();
                  _elem409.Read(iprot);
                  HaremList.Add(_elem409);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Map) {
              {
                MessageList = new Dictionary<int, List<string>>();
                TMap _map410 = iprot.ReadMapBegin();
                for( int _i411 = 0; _i411 < _map410.Count; ++_i411)
                {
                  int _key412;
                  List<string> _val413;
                  _key412 = iprot.ReadI32();
                  {
                    _val413 = new List<string>();
                    TList _list414 = iprot.ReadListBegin();
                    for( int _i415 = 0; _i415 < _list414.Count; ++_i415)
                    {
                      string _elem416 = null;
                      _elem416 = iprot.ReadString();
                      _val413.Add(_elem416);
                    }
                    iprot.ReadListEnd();
                  }
                  MessageList[_key412] = _val413;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              Type1 = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              Type2 = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Double) {
              Discount = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("HaremListResponse");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (HaremList != null && __isset.haremList) {
        field.Name = "haremList";
        field.Type = TType.List;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, HaremList.Count));
          foreach (HaremResponse _iter417 in HaremList)
          {
            _iter417.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (MessageList != null && __isset.messageList) {
        field.Name = "messageList";
        field.Type = TType.Map;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.I32, TType.List, MessageList.Count));
          foreach (int _iter418 in MessageList.Keys)
          {
            oprot.WriteI32(_iter418);
            {
              oprot.WriteListBegin(new TList(TType.String, MessageList[_iter418].Count));
              foreach (string _iter419 in MessageList[_iter418])
              {
                oprot.WriteString(_iter419);
              }
              oprot.WriteListEnd();
            }
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Type1 != null && __isset.type1) {
        field.Name = "type1";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Type1);
        oprot.WriteFieldEnd();
      }
      if (Type2 != null && __isset.type2) {
        field.Name = "type2";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Type2);
        oprot.WriteFieldEnd();
      }
      if (__isset.discount) {
        field.Name = "discount";
        field.Type = TType.Double;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(Discount);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("HaremListResponse(");
      sb.Append("HaremList: ");
      sb.Append(HaremList);
      sb.Append(",MessageList: ");
      sb.Append(MessageList);
      sb.Append(",Type1: ");
      sb.Append(Type1);
      sb.Append(",Type2: ");
      sb.Append(Type2);
      sb.Append(",Discount: ");
      sb.Append(Discount);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
