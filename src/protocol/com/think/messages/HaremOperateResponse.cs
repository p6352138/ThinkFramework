/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace com.think.messages
{

  [Serializable]
  public partial class HaremOperateResponse : TBase
  {
    private int _haremID;
    private string _message;
    private int _color;
    private byte _critical;

    public int HaremID
    {
      get
      {
        return _haremID;
      }
      set
      {
        __isset.haremID = true;
        this._haremID = value;
      }
    }

    public string Message
    {
      get
      {
        return _message;
      }
      set
      {
        __isset.message = true;
        this._message = value;
      }
    }

    public int Color
    {
      get
      {
        return _color;
      }
      set
      {
        __isset.color = true;
        this._color = value;
      }
    }

    public byte Critical
    {
      get
      {
        return _critical;
      }
      set
      {
        __isset.critical = true;
        this._critical = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool haremID;
      public bool message;
      public bool color;
      public bool critical;
    }

    public HaremOperateResponse() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              HaremID = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Message = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              Color = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Byte) {
              Critical = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("HaremOperateResponse");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.haremID) {
        field.Name = "haremID";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(HaremID);
        oprot.WriteFieldEnd();
      }
      if (Message != null && __isset.message) {
        field.Name = "message";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Message);
        oprot.WriteFieldEnd();
      }
      if (__isset.color) {
        field.Name = "color";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Color);
        oprot.WriteFieldEnd();
      }
      if (__isset.critical) {
        field.Name = "critical";
        field.Type = TType.Byte;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(Critical);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("HaremOperateResponse(");
      sb.Append("HaremID: ");
      sb.Append(HaremID);
      sb.Append(",Message: ");
      sb.Append(Message);
      sb.Append(",Color: ");
      sb.Append(Color);
      sb.Append(",Critical: ");
      sb.Append(Critical);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
