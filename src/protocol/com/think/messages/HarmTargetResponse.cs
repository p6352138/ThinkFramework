/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace com.think.messages
{

  [Serializable]
  public partial class HarmTargetResponse : TBase
  {
    private int _targetObjectID;
    private byte _damageType;
    private int _damageHp;
    private byte _bufferId;
    private short _targetDander;
    private List<int> _bufferList;

    public int TargetObjectID
    {
      get
      {
        return _targetObjectID;
      }
      set
      {
        __isset.targetObjectID = true;
        this._targetObjectID = value;
      }
    }

    public byte DamageType
    {
      get
      {
        return _damageType;
      }
      set
      {
        __isset.damageType = true;
        this._damageType = value;
      }
    }

    public int DamageHp
    {
      get
      {
        return _damageHp;
      }
      set
      {
        __isset.damageHp = true;
        this._damageHp = value;
      }
    }

    public byte BufferId
    {
      get
      {
        return _bufferId;
      }
      set
      {
        __isset.bufferId = true;
        this._bufferId = value;
      }
    }

    public short TargetDander
    {
      get
      {
        return _targetDander;
      }
      set
      {
        __isset.targetDander = true;
        this._targetDander = value;
      }
    }

    public List<int> BufferList
    {
      get
      {
        return _bufferList;
      }
      set
      {
        __isset.bufferList = true;
        this._bufferList = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool targetObjectID;
      public bool damageType;
      public bool damageHp;
      public bool bufferId;
      public bool targetDander;
      public bool bufferList;
    }

    public HarmTargetResponse() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              TargetObjectID = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Byte) {
              DamageType = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              DamageHp = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Byte) {
              BufferId = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I16) {
              TargetDander = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.List) {
              {
                BufferList = new List<int>();
                TList _list116 = iprot.ReadListBegin();
                for( int _i117 = 0; _i117 < _list116.Count; ++_i117)
                {
                  int _elem118 = 0;
                  _elem118 = iprot.ReadI32();
                  BufferList.Add(_elem118);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("HarmTargetResponse");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.targetObjectID) {
        field.Name = "targetObjectID";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(TargetObjectID);
        oprot.WriteFieldEnd();
      }
      if (__isset.damageType) {
        field.Name = "damageType";
        field.Type = TType.Byte;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(DamageType);
        oprot.WriteFieldEnd();
      }
      if (__isset.damageHp) {
        field.Name = "damageHp";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(DamageHp);
        oprot.WriteFieldEnd();
      }
      if (__isset.bufferId) {
        field.Name = "bufferId";
        field.Type = TType.Byte;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(BufferId);
        oprot.WriteFieldEnd();
      }
      if (__isset.targetDander) {
        field.Name = "targetDander";
        field.Type = TType.I16;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(TargetDander);
        oprot.WriteFieldEnd();
      }
      if (BufferList != null && __isset.bufferList) {
        field.Name = "bufferList";
        field.Type = TType.List;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.I32, BufferList.Count));
          foreach (int _iter119 in BufferList)
          {
            oprot.WriteI32(_iter119);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("HarmTargetResponse(");
      sb.Append("TargetObjectID: ");
      sb.Append(TargetObjectID);
      sb.Append(",DamageType: ");
      sb.Append(DamageType);
      sb.Append(",DamageHp: ");
      sb.Append(DamageHp);
      sb.Append(",BufferId: ");
      sb.Append(BufferId);
      sb.Append(",TargetDander: ");
      sb.Append(TargetDander);
      sb.Append(",BufferList: ");
      sb.Append(BufferList);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
