/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace com.think.messages
{

  [Serializable]
  public partial class ItemDetailResponse : TBase
  {
    private int _instanceID;
    private int _itemId;
    private string _goodsName;
    private byte _trait;
    private byte _type;
    private byte _bodyPart;
    private string _requiedVocation;
    private int _iconID;
    private int _specialEfficiencyID;
    private int _displayEfficiencyID;
    private int _price;
    private int _requiredLevel;
    private string _description;
    private Dictionary<byte, int> _attributeMap;
    private Dictionary<byte, int> _intensifyAttributeMap;
    private string _intensifyLvl;
    private string _intensifyLvlLater;
    private ItemSynthesizeMaterialResponse _material;
    private bool _isUpgrade;
    private int _intensifyLevel;
    private byte _singleGoodsType;
    private bool _isCanSellNpc;
    private int _wish_probability;
    private EquipWashBaseResponse _equipWashBase;

    public int InstanceID
    {
      get
      {
        return _instanceID;
      }
      set
      {
        __isset.instanceID = true;
        this._instanceID = value;
      }
    }

    public int ItemId
    {
      get
      {
        return _itemId;
      }
      set
      {
        __isset.itemId = true;
        this._itemId = value;
      }
    }

    public string GoodsName
    {
      get
      {
        return _goodsName;
      }
      set
      {
        __isset.goodsName = true;
        this._goodsName = value;
      }
    }

    public byte Trait
    {
      get
      {
        return _trait;
      }
      set
      {
        __isset.trait = true;
        this._trait = value;
      }
    }

    public byte Type
    {
      get
      {
        return _type;
      }
      set
      {
        __isset.type = true;
        this._type = value;
      }
    }

    public byte BodyPart
    {
      get
      {
        return _bodyPart;
      }
      set
      {
        __isset.bodyPart = true;
        this._bodyPart = value;
      }
    }

    public string RequiedVocation
    {
      get
      {
        return _requiedVocation;
      }
      set
      {
        __isset.requiedVocation = true;
        this._requiedVocation = value;
      }
    }

    public int IconID
    {
      get
      {
        return _iconID;
      }
      set
      {
        __isset.iconID = true;
        this._iconID = value;
      }
    }

    public int SpecialEfficiencyID
    {
      get
      {
        return _specialEfficiencyID;
      }
      set
      {
        __isset.specialEfficiencyID = true;
        this._specialEfficiencyID = value;
      }
    }

    public int DisplayEfficiencyID
    {
      get
      {
        return _displayEfficiencyID;
      }
      set
      {
        __isset.displayEfficiencyID = true;
        this._displayEfficiencyID = value;
      }
    }

    public int Price
    {
      get
      {
        return _price;
      }
      set
      {
        __isset.price = true;
        this._price = value;
      }
    }

    public int RequiredLevel
    {
      get
      {
        return _requiredLevel;
      }
      set
      {
        __isset.requiredLevel = true;
        this._requiredLevel = value;
      }
    }

    public string Description
    {
      get
      {
        return _description;
      }
      set
      {
        __isset.description = true;
        this._description = value;
      }
    }

    public Dictionary<byte, int> AttributeMap
    {
      get
      {
        return _attributeMap;
      }
      set
      {
        __isset.attributeMap = true;
        this._attributeMap = value;
      }
    }

    public Dictionary<byte, int> IntensifyAttributeMap
    {
      get
      {
        return _intensifyAttributeMap;
      }
      set
      {
        __isset.intensifyAttributeMap = true;
        this._intensifyAttributeMap = value;
      }
    }

    public string IntensifyLvl
    {
      get
      {
        return _intensifyLvl;
      }
      set
      {
        __isset.intensifyLvl = true;
        this._intensifyLvl = value;
      }
    }

    public string IntensifyLvlLater
    {
      get
      {
        return _intensifyLvlLater;
      }
      set
      {
        __isset.intensifyLvlLater = true;
        this._intensifyLvlLater = value;
      }
    }

    public ItemSynthesizeMaterialResponse Material
    {
      get
      {
        return _material;
      }
      set
      {
        __isset.material = true;
        this._material = value;
      }
    }

    public bool IsUpgrade
    {
      get
      {
        return _isUpgrade;
      }
      set
      {
        __isset.isUpgrade = true;
        this._isUpgrade = value;
      }
    }

    public int IntensifyLevel
    {
      get
      {
        return _intensifyLevel;
      }
      set
      {
        __isset.intensifyLevel = true;
        this._intensifyLevel = value;
      }
    }

    public byte SingleGoodsType
    {
      get
      {
        return _singleGoodsType;
      }
      set
      {
        __isset.singleGoodsType = true;
        this._singleGoodsType = value;
      }
    }

    public bool IsCanSellNpc
    {
      get
      {
        return _isCanSellNpc;
      }
      set
      {
        __isset.isCanSellNpc = true;
        this._isCanSellNpc = value;
      }
    }

    public int Wish_probability
    {
      get
      {
        return _wish_probability;
      }
      set
      {
        __isset.wish_probability = true;
        this._wish_probability = value;
      }
    }

    public EquipWashBaseResponse EquipWashBase
    {
      get
      {
        return _equipWashBase;
      }
      set
      {
        __isset.equipWashBase = true;
        this._equipWashBase = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool instanceID;
      public bool itemId;
      public bool goodsName;
      public bool trait;
      public bool type;
      public bool bodyPart;
      public bool requiedVocation;
      public bool iconID;
      public bool specialEfficiencyID;
      public bool displayEfficiencyID;
      public bool price;
      public bool requiredLevel;
      public bool description;
      public bool attributeMap;
      public bool intensifyAttributeMap;
      public bool intensifyLvl;
      public bool intensifyLvlLater;
      public bool material;
      public bool isUpgrade;
      public bool intensifyLevel;
      public bool singleGoodsType;
      public bool isCanSellNpc;
      public bool wish_probability;
      public bool equipWashBase;
    }

    public ItemDetailResponse() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              InstanceID = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              ItemId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              GoodsName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Byte) {
              Trait = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Byte) {
              Type = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.Byte) {
              BodyPart = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.String) {
              RequiedVocation = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.I32) {
              IconID = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.I32) {
              SpecialEfficiencyID = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.I32) {
              DisplayEfficiencyID = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.I32) {
              Price = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.I32) {
              RequiredLevel = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.String) {
              Description = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 14:
            if (field.Type == TType.Map) {
              {
                AttributeMap = new Dictionary<byte, int>();
                TMap _map25 = iprot.ReadMapBegin();
                for( int _i26 = 0; _i26 < _map25.Count; ++_i26)
                {
                  byte _key27;
                  int _val28;
                  _key27 = iprot.ReadByte();
                  _val28 = iprot.ReadI32();
                  AttributeMap[_key27] = _val28;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 15:
            if (field.Type == TType.Map) {
              {
                IntensifyAttributeMap = new Dictionary<byte, int>();
                TMap _map29 = iprot.ReadMapBegin();
                for( int _i30 = 0; _i30 < _map29.Count; ++_i30)
                {
                  byte _key31;
                  int _val32;
                  _key31 = iprot.ReadByte();
                  _val32 = iprot.ReadI32();
                  IntensifyAttributeMap[_key31] = _val32;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 16:
            if (field.Type == TType.String) {
              IntensifyLvl = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 17:
            if (field.Type == TType.String) {
              IntensifyLvlLater = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 18:
            if (field.Type == TType.Struct) {
              Material = new ItemSynthesizeMaterialResponse();
              Material.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 19:
            if (field.Type == TType.Bool) {
              IsUpgrade = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 20:
            if (field.Type == TType.I32) {
              IntensifyLevel = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 21:
            if (field.Type == TType.Byte) {
              SingleGoodsType = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 22:
            if (field.Type == TType.Bool) {
              IsCanSellNpc = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 23:
            if (field.Type == TType.I32) {
              Wish_probability = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 24:
            if (field.Type == TType.Struct) {
              EquipWashBase = new EquipWashBaseResponse();
              EquipWashBase.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("ItemDetailResponse");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.instanceID) {
        field.Name = "instanceID";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(InstanceID);
        oprot.WriteFieldEnd();
      }
      if (__isset.itemId) {
        field.Name = "itemId";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ItemId);
        oprot.WriteFieldEnd();
      }
      if (GoodsName != null && __isset.goodsName) {
        field.Name = "goodsName";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(GoodsName);
        oprot.WriteFieldEnd();
      }
      if (__isset.trait) {
        field.Name = "trait";
        field.Type = TType.Byte;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(Trait);
        oprot.WriteFieldEnd();
      }
      if (__isset.type) {
        field.Name = "type";
        field.Type = TType.Byte;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(Type);
        oprot.WriteFieldEnd();
      }
      if (__isset.bodyPart) {
        field.Name = "bodyPart";
        field.Type = TType.Byte;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(BodyPart);
        oprot.WriteFieldEnd();
      }
      if (RequiedVocation != null && __isset.requiedVocation) {
        field.Name = "requiedVocation";
        field.Type = TType.String;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(RequiedVocation);
        oprot.WriteFieldEnd();
      }
      if (__isset.iconID) {
        field.Name = "iconID";
        field.Type = TType.I32;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(IconID);
        oprot.WriteFieldEnd();
      }
      if (__isset.specialEfficiencyID) {
        field.Name = "specialEfficiencyID";
        field.Type = TType.I32;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(SpecialEfficiencyID);
        oprot.WriteFieldEnd();
      }
      if (__isset.displayEfficiencyID) {
        field.Name = "displayEfficiencyID";
        field.Type = TType.I32;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(DisplayEfficiencyID);
        oprot.WriteFieldEnd();
      }
      if (__isset.price) {
        field.Name = "price";
        field.Type = TType.I32;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Price);
        oprot.WriteFieldEnd();
      }
      if (__isset.requiredLevel) {
        field.Name = "requiredLevel";
        field.Type = TType.I32;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(RequiredLevel);
        oprot.WriteFieldEnd();
      }
      if (Description != null && __isset.description) {
        field.Name = "description";
        field.Type = TType.String;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Description);
        oprot.WriteFieldEnd();
      }
      if (AttributeMap != null && __isset.attributeMap) {
        field.Name = "attributeMap";
        field.Type = TType.Map;
        field.ID = 14;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.Byte, TType.I32, AttributeMap.Count));
          foreach (byte _iter33 in AttributeMap.Keys)
          {
            oprot.WriteByte(_iter33);
            oprot.WriteI32(AttributeMap[_iter33]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (IntensifyAttributeMap != null && __isset.intensifyAttributeMap) {
        field.Name = "intensifyAttributeMap";
        field.Type = TType.Map;
        field.ID = 15;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.Byte, TType.I32, IntensifyAttributeMap.Count));
          foreach (byte _iter34 in IntensifyAttributeMap.Keys)
          {
            oprot.WriteByte(_iter34);
            oprot.WriteI32(IntensifyAttributeMap[_iter34]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (IntensifyLvl != null && __isset.intensifyLvl) {
        field.Name = "intensifyLvl";
        field.Type = TType.String;
        field.ID = 16;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(IntensifyLvl);
        oprot.WriteFieldEnd();
      }
      if (IntensifyLvlLater != null && __isset.intensifyLvlLater) {
        field.Name = "intensifyLvlLater";
        field.Type = TType.String;
        field.ID = 17;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(IntensifyLvlLater);
        oprot.WriteFieldEnd();
      }
      if (Material != null && __isset.material) {
        field.Name = "material";
        field.Type = TType.Struct;
        field.ID = 18;
        oprot.WriteFieldBegin(field);
        Material.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (__isset.isUpgrade) {
        field.Name = "isUpgrade";
        field.Type = TType.Bool;
        field.ID = 19;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(IsUpgrade);
        oprot.WriteFieldEnd();
      }
      if (__isset.intensifyLevel) {
        field.Name = "intensifyLevel";
        field.Type = TType.I32;
        field.ID = 20;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(IntensifyLevel);
        oprot.WriteFieldEnd();
      }
      if (__isset.singleGoodsType) {
        field.Name = "singleGoodsType";
        field.Type = TType.Byte;
        field.ID = 21;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(SingleGoodsType);
        oprot.WriteFieldEnd();
      }
      if (__isset.isCanSellNpc) {
        field.Name = "isCanSellNpc";
        field.Type = TType.Bool;
        field.ID = 22;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(IsCanSellNpc);
        oprot.WriteFieldEnd();
      }
      if (__isset.wish_probability) {
        field.Name = "wish_probability";
        field.Type = TType.I32;
        field.ID = 23;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Wish_probability);
        oprot.WriteFieldEnd();
      }
      if (EquipWashBase != null && __isset.equipWashBase) {
        field.Name = "equipWashBase";
        field.Type = TType.Struct;
        field.ID = 24;
        oprot.WriteFieldBegin(field);
        EquipWashBase.Write(oprot);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("ItemDetailResponse(");
      sb.Append("InstanceID: ");
      sb.Append(InstanceID);
      sb.Append(",ItemId: ");
      sb.Append(ItemId);
      sb.Append(",GoodsName: ");
      sb.Append(GoodsName);
      sb.Append(",Trait: ");
      sb.Append(Trait);
      sb.Append(",Type: ");
      sb.Append(Type);
      sb.Append(",BodyPart: ");
      sb.Append(BodyPart);
      sb.Append(",RequiedVocation: ");
      sb.Append(RequiedVocation);
      sb.Append(",IconID: ");
      sb.Append(IconID);
      sb.Append(",SpecialEfficiencyID: ");
      sb.Append(SpecialEfficiencyID);
      sb.Append(",DisplayEfficiencyID: ");
      sb.Append(DisplayEfficiencyID);
      sb.Append(",Price: ");
      sb.Append(Price);
      sb.Append(",RequiredLevel: ");
      sb.Append(RequiredLevel);
      sb.Append(",Description: ");
      sb.Append(Description);
      sb.Append(",AttributeMap: ");
      sb.Append(AttributeMap);
      sb.Append(",IntensifyAttributeMap: ");
      sb.Append(IntensifyAttributeMap);
      sb.Append(",IntensifyLvl: ");
      sb.Append(IntensifyLvl);
      sb.Append(",IntensifyLvlLater: ");
      sb.Append(IntensifyLvlLater);
      sb.Append(",Material: ");
      sb.Append(Material== null ? "<null>" : Material.ToString());
      sb.Append(",IsUpgrade: ");
      sb.Append(IsUpgrade);
      sb.Append(",IntensifyLevel: ");
      sb.Append(IntensifyLevel);
      sb.Append(",SingleGoodsType: ");
      sb.Append(SingleGoodsType);
      sb.Append(",IsCanSellNpc: ");
      sb.Append(IsCanSellNpc);
      sb.Append(",Wish_probability: ");
      sb.Append(Wish_probability);
      sb.Append(",EquipWashBase: ");
      sb.Append(EquipWashBase== null ? "<null>" : EquipWashBase.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }

}
