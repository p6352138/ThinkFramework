/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace com.think.messages
{

  [Serializable]
  public partial class LegionFightAction : TBase
  {
    private byte _type;
    private int _attackerInstanceId;
    private int _targetInstanceId;
    private bool _isAttackerWin;
    private byte _listIndex;
    private List<LegionHarm> _harmList;

    public byte Type
    {
      get
      {
        return _type;
      }
      set
      {
        __isset.type = true;
        this._type = value;
      }
    }

    public int AttackerInstanceId
    {
      get
      {
        return _attackerInstanceId;
      }
      set
      {
        __isset.attackerInstanceId = true;
        this._attackerInstanceId = value;
      }
    }

    public int TargetInstanceId
    {
      get
      {
        return _targetInstanceId;
      }
      set
      {
        __isset.targetInstanceId = true;
        this._targetInstanceId = value;
      }
    }

    public bool IsAttackerWin
    {
      get
      {
        return _isAttackerWin;
      }
      set
      {
        __isset.isAttackerWin = true;
        this._isAttackerWin = value;
      }
    }

    public byte ListIndex
    {
      get
      {
        return _listIndex;
      }
      set
      {
        __isset.listIndex = true;
        this._listIndex = value;
      }
    }

    public List<LegionHarm> HarmList
    {
      get
      {
        return _harmList;
      }
      set
      {
        __isset.harmList = true;
        this._harmList = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool type;
      public bool attackerInstanceId;
      public bool targetInstanceId;
      public bool isAttackerWin;
      public bool listIndex;
      public bool harmList;
    }

    public LegionFightAction() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Byte) {
              Type = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              AttackerInstanceId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              TargetInstanceId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Bool) {
              IsAttackerWin = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Byte) {
              ListIndex = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.List) {
              {
                HarmList = new List<LegionHarm>();
                TList _list205 = iprot.ReadListBegin();
                for( int _i206 = 0; _i206 < _list205.Count; ++_i206)
                {
                  LegionHarm _elem207 = new LegionHarm();
                  _elem207 = new LegionHarm();
                  _elem207.Read(iprot);
                  HarmList.Add(_elem207);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("LegionFightAction");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.type) {
        field.Name = "type";
        field.Type = TType.Byte;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(Type);
        oprot.WriteFieldEnd();
      }
      if (__isset.attackerInstanceId) {
        field.Name = "attackerInstanceId";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(AttackerInstanceId);
        oprot.WriteFieldEnd();
      }
      if (__isset.targetInstanceId) {
        field.Name = "targetInstanceId";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(TargetInstanceId);
        oprot.WriteFieldEnd();
      }
      if (__isset.isAttackerWin) {
        field.Name = "isAttackerWin";
        field.Type = TType.Bool;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(IsAttackerWin);
        oprot.WriteFieldEnd();
      }
      if (__isset.listIndex) {
        field.Name = "listIndex";
        field.Type = TType.Byte;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(ListIndex);
        oprot.WriteFieldEnd();
      }
      if (HarmList != null && __isset.harmList) {
        field.Name = "harmList";
        field.Type = TType.List;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, HarmList.Count));
          foreach (LegionHarm _iter208 in HarmList)
          {
            _iter208.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("LegionFightAction(");
      sb.Append("Type: ");
      sb.Append(Type);
      sb.Append(",AttackerInstanceId: ");
      sb.Append(AttackerInstanceId);
      sb.Append(",TargetInstanceId: ");
      sb.Append(TargetInstanceId);
      sb.Append(",IsAttackerWin: ");
      sb.Append(IsAttackerWin);
      sb.Append(",ListIndex: ");
      sb.Append(ListIndex);
      sb.Append(",HarmList: ");
      sb.Append(HarmList);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
