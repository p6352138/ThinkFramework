/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace com.think.messages
{

  [Serializable]
  public partial class ListDeletePlayerOrdnanceResponse : TBase
  {
    private List<DeletePlayerOrdnanceResponse> _listOrdnance;
    private byte _containerType;

    public List<DeletePlayerOrdnanceResponse> ListOrdnance
    {
      get
      {
        return _listOrdnance;
      }
      set
      {
        __isset.listOrdnance = true;
        this._listOrdnance = value;
      }
    }

    public byte ContainerType
    {
      get
      {
        return _containerType;
      }
      set
      {
        __isset.containerType = true;
        this._containerType = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool listOrdnance;
      public bool containerType;
    }

    public ListDeletePlayerOrdnanceResponse() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.List) {
              {
                ListOrdnance = new List<DeletePlayerOrdnanceResponse>();
                TList _list362 = iprot.ReadListBegin();
                for( int _i363 = 0; _i363 < _list362.Count; ++_i363)
                {
                  DeletePlayerOrdnanceResponse _elem364 = new DeletePlayerOrdnanceResponse();
                  _elem364 = new DeletePlayerOrdnanceResponse();
                  _elem364.Read(iprot);
                  ListOrdnance.Add(_elem364);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Byte) {
              ContainerType = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("ListDeletePlayerOrdnanceResponse");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (ListOrdnance != null && __isset.listOrdnance) {
        field.Name = "listOrdnance";
        field.Type = TType.List;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, ListOrdnance.Count));
          foreach (DeletePlayerOrdnanceResponse _iter365 in ListOrdnance)
          {
            _iter365.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.containerType) {
        field.Name = "containerType";
        field.Type = TType.Byte;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(ContainerType);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("ListDeletePlayerOrdnanceResponse(");
      sb.Append("ListOrdnance: ");
      sb.Append(ListOrdnance);
      sb.Append(",ContainerType: ");
      sb.Append(ContainerType);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
