/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace com.think.messages
{

  [Serializable]
  public partial class MedicineResponse : TBase
  {
    private int _role_instance_id;
    private Dictionary<byte, List<byte>> _powerMedicationMapping;
    private int _power_value;
    private byte _power_percent;
    private Dictionary<byte, List<byte>> _magicMedicationMapping;
    private int _magic_value;
    private int _magic_percent;
    private Dictionary<byte, List<byte>> _skillMedicationMapping;
    private int _skill_value;
    private int _skill_percent;

    public int Role_instance_id
    {
      get
      {
        return _role_instance_id;
      }
      set
      {
        __isset.role_instance_id = true;
        this._role_instance_id = value;
      }
    }

    public Dictionary<byte, List<byte>> PowerMedicationMapping
    {
      get
      {
        return _powerMedicationMapping;
      }
      set
      {
        __isset.powerMedicationMapping = true;
        this._powerMedicationMapping = value;
      }
    }

    public int Power_value
    {
      get
      {
        return _power_value;
      }
      set
      {
        __isset.power_value = true;
        this._power_value = value;
      }
    }

    public byte Power_percent
    {
      get
      {
        return _power_percent;
      }
      set
      {
        __isset.power_percent = true;
        this._power_percent = value;
      }
    }

    public Dictionary<byte, List<byte>> MagicMedicationMapping
    {
      get
      {
        return _magicMedicationMapping;
      }
      set
      {
        __isset.magicMedicationMapping = true;
        this._magicMedicationMapping = value;
      }
    }

    public int Magic_value
    {
      get
      {
        return _magic_value;
      }
      set
      {
        __isset.magic_value = true;
        this._magic_value = value;
      }
    }

    public int Magic_percent
    {
      get
      {
        return _magic_percent;
      }
      set
      {
        __isset.magic_percent = true;
        this._magic_percent = value;
      }
    }

    public Dictionary<byte, List<byte>> SkillMedicationMapping
    {
      get
      {
        return _skillMedicationMapping;
      }
      set
      {
        __isset.skillMedicationMapping = true;
        this._skillMedicationMapping = value;
      }
    }

    public int Skill_value
    {
      get
      {
        return _skill_value;
      }
      set
      {
        __isset.skill_value = true;
        this._skill_value = value;
      }
    }

    public int Skill_percent
    {
      get
      {
        return _skill_percent;
      }
      set
      {
        __isset.skill_percent = true;
        this._skill_percent = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool role_instance_id;
      public bool powerMedicationMapping;
      public bool power_value;
      public bool power_percent;
      public bool magicMedicationMapping;
      public bool magic_value;
      public bool magic_percent;
      public bool skillMedicationMapping;
      public bool skill_value;
      public bool skill_percent;
    }

    public MedicineResponse() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              Role_instance_id = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Map) {
              {
                PowerMedicationMapping = new Dictionary<byte, List<byte>>();
                TMap _map84 = iprot.ReadMapBegin();
                for( int _i85 = 0; _i85 < _map84.Count; ++_i85)
                {
                  byte _key86;
                  List<byte> _val87;
                  _key86 = iprot.ReadByte();
                  {
                    _val87 = new List<byte>();
                    TList _list88 = iprot.ReadListBegin();
                    for( int _i89 = 0; _i89 < _list88.Count; ++_i89)
                    {
                      byte _elem90 = 0;
                      _elem90 = iprot.ReadByte();
                      _val87.Add(_elem90);
                    }
                    iprot.ReadListEnd();
                  }
                  PowerMedicationMapping[_key86] = _val87;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              Power_value = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Byte) {
              Power_percent = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Map) {
              {
                MagicMedicationMapping = new Dictionary<byte, List<byte>>();
                TMap _map91 = iprot.ReadMapBegin();
                for( int _i92 = 0; _i92 < _map91.Count; ++_i92)
                {
                  byte _key93;
                  List<byte> _val94;
                  _key93 = iprot.ReadByte();
                  {
                    _val94 = new List<byte>();
                    TList _list95 = iprot.ReadListBegin();
                    for( int _i96 = 0; _i96 < _list95.Count; ++_i96)
                    {
                      byte _elem97 = 0;
                      _elem97 = iprot.ReadByte();
                      _val94.Add(_elem97);
                    }
                    iprot.ReadListEnd();
                  }
                  MagicMedicationMapping[_key93] = _val94;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              Magic_value = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I32) {
              Magic_percent = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.Map) {
              {
                SkillMedicationMapping = new Dictionary<byte, List<byte>>();
                TMap _map98 = iprot.ReadMapBegin();
                for( int _i99 = 0; _i99 < _map98.Count; ++_i99)
                {
                  byte _key100;
                  List<byte> _val101;
                  _key100 = iprot.ReadByte();
                  {
                    _val101 = new List<byte>();
                    TList _list102 = iprot.ReadListBegin();
                    for( int _i103 = 0; _i103 < _list102.Count; ++_i103)
                    {
                      byte _elem104 = 0;
                      _elem104 = iprot.ReadByte();
                      _val101.Add(_elem104);
                    }
                    iprot.ReadListEnd();
                  }
                  SkillMedicationMapping[_key100] = _val101;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.I32) {
              Skill_value = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.I32) {
              Skill_percent = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("MedicineResponse");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.role_instance_id) {
        field.Name = "role_instance_id";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Role_instance_id);
        oprot.WriteFieldEnd();
      }
      if (PowerMedicationMapping != null && __isset.powerMedicationMapping) {
        field.Name = "powerMedicationMapping";
        field.Type = TType.Map;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.Byte, TType.List, PowerMedicationMapping.Count));
          foreach (byte _iter105 in PowerMedicationMapping.Keys)
          {
            oprot.WriteByte(_iter105);
            {
              oprot.WriteListBegin(new TList(TType.Byte, PowerMedicationMapping[_iter105].Count));
              foreach (byte _iter106 in PowerMedicationMapping[_iter105])
              {
                oprot.WriteByte(_iter106);
              }
              oprot.WriteListEnd();
            }
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.power_value) {
        field.Name = "power_value";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Power_value);
        oprot.WriteFieldEnd();
      }
      if (__isset.power_percent) {
        field.Name = "power_percent";
        field.Type = TType.Byte;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(Power_percent);
        oprot.WriteFieldEnd();
      }
      if (MagicMedicationMapping != null && __isset.magicMedicationMapping) {
        field.Name = "magicMedicationMapping";
        field.Type = TType.Map;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.Byte, TType.List, MagicMedicationMapping.Count));
          foreach (byte _iter107 in MagicMedicationMapping.Keys)
          {
            oprot.WriteByte(_iter107);
            {
              oprot.WriteListBegin(new TList(TType.Byte, MagicMedicationMapping[_iter107].Count));
              foreach (byte _iter108 in MagicMedicationMapping[_iter107])
              {
                oprot.WriteByte(_iter108);
              }
              oprot.WriteListEnd();
            }
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.magic_value) {
        field.Name = "magic_value";
        field.Type = TType.I32;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Magic_value);
        oprot.WriteFieldEnd();
      }
      if (__isset.magic_percent) {
        field.Name = "magic_percent";
        field.Type = TType.I32;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Magic_percent);
        oprot.WriteFieldEnd();
      }
      if (SkillMedicationMapping != null && __isset.skillMedicationMapping) {
        field.Name = "skillMedicationMapping";
        field.Type = TType.Map;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.Byte, TType.List, SkillMedicationMapping.Count));
          foreach (byte _iter109 in SkillMedicationMapping.Keys)
          {
            oprot.WriteByte(_iter109);
            {
              oprot.WriteListBegin(new TList(TType.Byte, SkillMedicationMapping[_iter109].Count));
              foreach (byte _iter110 in SkillMedicationMapping[_iter109])
              {
                oprot.WriteByte(_iter110);
              }
              oprot.WriteListEnd();
            }
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.skill_value) {
        field.Name = "skill_value";
        field.Type = TType.I32;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Skill_value);
        oprot.WriteFieldEnd();
      }
      if (__isset.skill_percent) {
        field.Name = "skill_percent";
        field.Type = TType.I32;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Skill_percent);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("MedicineResponse(");
      sb.Append("Role_instance_id: ");
      sb.Append(Role_instance_id);
      sb.Append(",PowerMedicationMapping: ");
      sb.Append(PowerMedicationMapping);
      sb.Append(",Power_value: ");
      sb.Append(Power_value);
      sb.Append(",Power_percent: ");
      sb.Append(Power_percent);
      sb.Append(",MagicMedicationMapping: ");
      sb.Append(MagicMedicationMapping);
      sb.Append(",Magic_value: ");
      sb.Append(Magic_value);
      sb.Append(",Magic_percent: ");
      sb.Append(Magic_percent);
      sb.Append(",SkillMedicationMapping: ");
      sb.Append(SkillMedicationMapping);
      sb.Append(",Skill_value: ");
      sb.Append(Skill_value);
      sb.Append(",Skill_percent: ");
      sb.Append(Skill_percent);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
