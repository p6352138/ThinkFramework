/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace com.think.messages
{

  [Serializable]
  public partial class NewCrossFightResultConfirmResponse : TBase
  {
    private int _score;
    private int _freeFightNum;
    private int _ranking;

    public int Score
    {
      get
      {
        return _score;
      }
      set
      {
        __isset.score = true;
        this._score = value;
      }
    }

    public int FreeFightNum
    {
      get
      {
        return _freeFightNum;
      }
      set
      {
        __isset.freeFightNum = true;
        this._freeFightNum = value;
      }
    }

    public int Ranking
    {
      get
      {
        return _ranking;
      }
      set
      {
        __isset.ranking = true;
        this._ranking = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool score;
      public bool freeFightNum;
      public bool ranking;
    }

    public NewCrossFightResultConfirmResponse() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              Score = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              FreeFightNum = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              Ranking = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("NewCrossFightResultConfirmResponse");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.score) {
        field.Name = "score";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Score);
        oprot.WriteFieldEnd();
      }
      if (__isset.freeFightNum) {
        field.Name = "freeFightNum";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(FreeFightNum);
        oprot.WriteFieldEnd();
      }
      if (__isset.ranking) {
        field.Name = "ranking";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Ranking);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("NewCrossFightResultConfirmResponse(");
      sb.Append("Score: ");
      sb.Append(Score);
      sb.Append(",FreeFightNum: ");
      sb.Append(FreeFightNum);
      sb.Append(",Ranking: ");
      sb.Append(Ranking);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
