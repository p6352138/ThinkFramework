/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace com.think.messages
{

  [Serializable]
  public partial class NewCrossPlayerFightLogResponse : TBase
  {
    private int _id;
    private int _wheelNum;
    private string _fight_msg;
    private long _create_time;

    public int Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }

    public int WheelNum
    {
      get
      {
        return _wheelNum;
      }
      set
      {
        __isset.wheelNum = true;
        this._wheelNum = value;
      }
    }

    public string Fight_msg
    {
      get
      {
        return _fight_msg;
      }
      set
      {
        __isset.fight_msg = true;
        this._fight_msg = value;
      }
    }

    public long Create_time
    {
      get
      {
        return _create_time;
      }
      set
      {
        __isset.create_time = true;
        this._create_time = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool id;
      public bool wheelNum;
      public bool fight_msg;
      public bool create_time;
    }

    public NewCrossPlayerFightLogResponse() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              Id = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              WheelNum = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              Fight_msg = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I64) {
              Create_time = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("NewCrossPlayerFightLogResponse");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.id) {
        field.Name = "id";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Id);
        oprot.WriteFieldEnd();
      }
      if (__isset.wheelNum) {
        field.Name = "wheelNum";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(WheelNum);
        oprot.WriteFieldEnd();
      }
      if (Fight_msg != null && __isset.fight_msg) {
        field.Name = "fight_msg";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Fight_msg);
        oprot.WriteFieldEnd();
      }
      if (__isset.create_time) {
        field.Name = "create_time";
        field.Type = TType.I64;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Create_time);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("NewCrossPlayerFightLogResponse(");
      sb.Append("Id: ");
      sb.Append(Id);
      sb.Append(",WheelNum: ");
      sb.Append(WheelNum);
      sb.Append(",Fight_msg: ");
      sb.Append(Fight_msg);
      sb.Append(",Create_time: ");
      sb.Append(Create_time);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
