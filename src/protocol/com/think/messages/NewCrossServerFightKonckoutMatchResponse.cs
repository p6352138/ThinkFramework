/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace com.think.messages
{

  [Serializable]
  public partial class NewCrossServerFightKonckoutMatchResponse : TBase
  {
    private string _fight_name;
    private int _win_num;
    private int _fail_num;
    private string _require_num;
    private string _promoted;
    private List<NewCrossServerKingsFightLogResponse> _listFightLog;

    public string Fight_name
    {
      get
      {
        return _fight_name;
      }
      set
      {
        __isset.fight_name = true;
        this._fight_name = value;
      }
    }

    public int Win_num
    {
      get
      {
        return _win_num;
      }
      set
      {
        __isset.win_num = true;
        this._win_num = value;
      }
    }

    public int Fail_num
    {
      get
      {
        return _fail_num;
      }
      set
      {
        __isset.fail_num = true;
        this._fail_num = value;
      }
    }

    public string Require_num
    {
      get
      {
        return _require_num;
      }
      set
      {
        __isset.require_num = true;
        this._require_num = value;
      }
    }

    public string Promoted
    {
      get
      {
        return _promoted;
      }
      set
      {
        __isset.promoted = true;
        this._promoted = value;
      }
    }

    public List<NewCrossServerKingsFightLogResponse> ListFightLog
    {
      get
      {
        return _listFightLog;
      }
      set
      {
        __isset.listFightLog = true;
        this._listFightLog = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool fight_name;
      public bool win_num;
      public bool fail_num;
      public bool require_num;
      public bool promoted;
      public bool listFightLog;
    }

    public NewCrossServerFightKonckoutMatchResponse() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Fight_name = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              Win_num = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              Fail_num = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              Require_num = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              Promoted = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.List) {
              {
                ListFightLog = new List<NewCrossServerKingsFightLogResponse>();
                TList _list873 = iprot.ReadListBegin();
                for( int _i874 = 0; _i874 < _list873.Count; ++_i874)
                {
                  NewCrossServerKingsFightLogResponse _elem875 = new NewCrossServerKingsFightLogResponse();
                  _elem875 = new NewCrossServerKingsFightLogResponse();
                  _elem875.Read(iprot);
                  ListFightLog.Add(_elem875);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("NewCrossServerFightKonckoutMatchResponse");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Fight_name != null && __isset.fight_name) {
        field.Name = "fight_name";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Fight_name);
        oprot.WriteFieldEnd();
      }
      if (__isset.win_num) {
        field.Name = "win_num";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Win_num);
        oprot.WriteFieldEnd();
      }
      if (__isset.fail_num) {
        field.Name = "fail_num";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Fail_num);
        oprot.WriteFieldEnd();
      }
      if (Require_num != null && __isset.require_num) {
        field.Name = "require_num";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Require_num);
        oprot.WriteFieldEnd();
      }
      if (Promoted != null && __isset.promoted) {
        field.Name = "promoted";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Promoted);
        oprot.WriteFieldEnd();
      }
      if (ListFightLog != null && __isset.listFightLog) {
        field.Name = "listFightLog";
        field.Type = TType.List;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, ListFightLog.Count));
          foreach (NewCrossServerKingsFightLogResponse _iter876 in ListFightLog)
          {
            _iter876.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("NewCrossServerFightKonckoutMatchResponse(");
      sb.Append("Fight_name: ");
      sb.Append(Fight_name);
      sb.Append(",Win_num: ");
      sb.Append(Win_num);
      sb.Append(",Fail_num: ");
      sb.Append(Fail_num);
      sb.Append(",Require_num: ");
      sb.Append(Require_num);
      sb.Append(",Promoted: ");
      sb.Append(Promoted);
      sb.Append(",ListFightLog: ");
      sb.Append(ListFightLog);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
