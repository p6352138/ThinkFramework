/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace com.think.messages
{

  [Serializable]
  public partial class NewCrossServerKingsFightRequest : TBase
  {
    private byte _type;
    private int _user_id;
    private long _user_id2;
    private int _fight_id;
    private int _war_zone;
    private List<long> _fightPlayerList;

    public byte Type
    {
      get
      {
        return _type;
      }
      set
      {
        __isset.type = true;
        this._type = value;
      }
    }

    public int User_id
    {
      get
      {
        return _user_id;
      }
      set
      {
        __isset.user_id = true;
        this._user_id = value;
      }
    }

    public long User_id2
    {
      get
      {
        return _user_id2;
      }
      set
      {
        __isset.user_id2 = true;
        this._user_id2 = value;
      }
    }

    public int Fight_id
    {
      get
      {
        return _fight_id;
      }
      set
      {
        __isset.fight_id = true;
        this._fight_id = value;
      }
    }

    public int War_zone
    {
      get
      {
        return _war_zone;
      }
      set
      {
        __isset.war_zone = true;
        this._war_zone = value;
      }
    }

    public List<long> FightPlayerList
    {
      get
      {
        return _fightPlayerList;
      }
      set
      {
        __isset.fightPlayerList = true;
        this._fightPlayerList = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool type;
      public bool user_id;
      public bool user_id2;
      public bool fight_id;
      public bool war_zone;
      public bool fightPlayerList;
    }

    public NewCrossServerKingsFightRequest() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Byte) {
              Type = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              User_id = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I64) {
              User_id2 = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              Fight_id = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              War_zone = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.List) {
              {
                FightPlayerList = new List<long>();
                TList _list861 = iprot.ReadListBegin();
                for( int _i862 = 0; _i862 < _list861.Count; ++_i862)
                {
                  long _elem863 = 0;
                  _elem863 = iprot.ReadI64();
                  FightPlayerList.Add(_elem863);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("NewCrossServerKingsFightRequest");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.type) {
        field.Name = "type";
        field.Type = TType.Byte;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(Type);
        oprot.WriteFieldEnd();
      }
      if (__isset.user_id) {
        field.Name = "user_id";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(User_id);
        oprot.WriteFieldEnd();
      }
      if (__isset.user_id2) {
        field.Name = "user_id2";
        field.Type = TType.I64;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(User_id2);
        oprot.WriteFieldEnd();
      }
      if (__isset.fight_id) {
        field.Name = "fight_id";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Fight_id);
        oprot.WriteFieldEnd();
      }
      if (__isset.war_zone) {
        field.Name = "war_zone";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(War_zone);
        oprot.WriteFieldEnd();
      }
      if (FightPlayerList != null && __isset.fightPlayerList) {
        field.Name = "fightPlayerList";
        field.Type = TType.List;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.I64, FightPlayerList.Count));
          foreach (long _iter864 in FightPlayerList)
          {
            oprot.WriteI64(_iter864);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("NewCrossServerKingsFightRequest(");
      sb.Append("Type: ");
      sb.Append(Type);
      sb.Append(",User_id: ");
      sb.Append(User_id);
      sb.Append(",User_id2: ");
      sb.Append(User_id2);
      sb.Append(",Fight_id: ");
      sb.Append(Fight_id);
      sb.Append(",War_zone: ");
      sb.Append(War_zone);
      sb.Append(",FightPlayerList: ");
      sb.Append(FightPlayerList);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
