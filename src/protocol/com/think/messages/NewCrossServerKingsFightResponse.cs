/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace com.think.messages
{

  [Serializable]
  public partial class NewCrossServerKingsFightResponse : TBase
  {
    private int _active_state;
    private bool _isApply;
    private List<NewCrossServerKingsHonorPlayerResponse> _honorPlayerList;
    private List<NewCrossServerKingsTrophyResponse> _listTrophy;
    private int _surplusSupportNum;
    private long _taoTaiTime;
    private string _activeDesc;

    public int Active_state
    {
      get
      {
        return _active_state;
      }
      set
      {
        __isset.active_state = true;
        this._active_state = value;
      }
    }

    public bool IsApply
    {
      get
      {
        return _isApply;
      }
      set
      {
        __isset.isApply = true;
        this._isApply = value;
      }
    }

    public List<NewCrossServerKingsHonorPlayerResponse> HonorPlayerList
    {
      get
      {
        return _honorPlayerList;
      }
      set
      {
        __isset.honorPlayerList = true;
        this._honorPlayerList = value;
      }
    }

    public List<NewCrossServerKingsTrophyResponse> ListTrophy
    {
      get
      {
        return _listTrophy;
      }
      set
      {
        __isset.listTrophy = true;
        this._listTrophy = value;
      }
    }

    public int SurplusSupportNum
    {
      get
      {
        return _surplusSupportNum;
      }
      set
      {
        __isset.surplusSupportNum = true;
        this._surplusSupportNum = value;
      }
    }

    public long TaoTaiTime
    {
      get
      {
        return _taoTaiTime;
      }
      set
      {
        __isset.taoTaiTime = true;
        this._taoTaiTime = value;
      }
    }

    public string ActiveDesc
    {
      get
      {
        return _activeDesc;
      }
      set
      {
        __isset.activeDesc = true;
        this._activeDesc = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool active_state;
      public bool isApply;
      public bool honorPlayerList;
      public bool listTrophy;
      public bool surplusSupportNum;
      public bool taoTaiTime;
      public bool activeDesc;
    }

    public NewCrossServerKingsFightResponse() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              Active_state = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Bool) {
              IsApply = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.List) {
              {
                HonorPlayerList = new List<NewCrossServerKingsHonorPlayerResponse>();
                TList _list865 = iprot.ReadListBegin();
                for( int _i866 = 0; _i866 < _list865.Count; ++_i866)
                {
                  NewCrossServerKingsHonorPlayerResponse _elem867 = new NewCrossServerKingsHonorPlayerResponse();
                  _elem867 = new NewCrossServerKingsHonorPlayerResponse();
                  _elem867.Read(iprot);
                  HonorPlayerList.Add(_elem867);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.List) {
              {
                ListTrophy = new List<NewCrossServerKingsTrophyResponse>();
                TList _list868 = iprot.ReadListBegin();
                for( int _i869 = 0; _i869 < _list868.Count; ++_i869)
                {
                  NewCrossServerKingsTrophyResponse _elem870 = new NewCrossServerKingsTrophyResponse();
                  _elem870 = new NewCrossServerKingsTrophyResponse();
                  _elem870.Read(iprot);
                  ListTrophy.Add(_elem870);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              SurplusSupportNum = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I64) {
              TaoTaiTime = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.String) {
              ActiveDesc = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("NewCrossServerKingsFightResponse");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.active_state) {
        field.Name = "active_state";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Active_state);
        oprot.WriteFieldEnd();
      }
      if (__isset.isApply) {
        field.Name = "isApply";
        field.Type = TType.Bool;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(IsApply);
        oprot.WriteFieldEnd();
      }
      if (HonorPlayerList != null && __isset.honorPlayerList) {
        field.Name = "honorPlayerList";
        field.Type = TType.List;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, HonorPlayerList.Count));
          foreach (NewCrossServerKingsHonorPlayerResponse _iter871 in HonorPlayerList)
          {
            _iter871.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (ListTrophy != null && __isset.listTrophy) {
        field.Name = "listTrophy";
        field.Type = TType.List;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, ListTrophy.Count));
          foreach (NewCrossServerKingsTrophyResponse _iter872 in ListTrophy)
          {
            _iter872.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.surplusSupportNum) {
        field.Name = "surplusSupportNum";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(SurplusSupportNum);
        oprot.WriteFieldEnd();
      }
      if (__isset.taoTaiTime) {
        field.Name = "taoTaiTime";
        field.Type = TType.I64;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(TaoTaiTime);
        oprot.WriteFieldEnd();
      }
      if (ActiveDesc != null && __isset.activeDesc) {
        field.Name = "activeDesc";
        field.Type = TType.String;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ActiveDesc);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("NewCrossServerKingsFightResponse(");
      sb.Append("Active_state: ");
      sb.Append(Active_state);
      sb.Append(",IsApply: ");
      sb.Append(IsApply);
      sb.Append(",HonorPlayerList: ");
      sb.Append(HonorPlayerList);
      sb.Append(",ListTrophy: ");
      sb.Append(ListTrophy);
      sb.Append(",SurplusSupportNum: ");
      sb.Append(SurplusSupportNum);
      sb.Append(",TaoTaiTime: ");
      sb.Append(TaoTaiTime);
      sb.Append(",ActiveDesc: ");
      sb.Append(ActiveDesc);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
