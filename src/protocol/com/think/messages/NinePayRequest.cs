/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace com.think.messages
{

  [Serializable]
  public partial class NinePayRequest : TBase
  {
    private string _productId;
    private string _productName;
    private string _consumeStreamId;
    private string _cooOrderSerial;
    private int _uin;
    private string _goodsID;
    private string _goodsInfo;
    private int _goodsCount;
    private double _originalMoney;
    private double _orderMoney;
    private string _note;

    public string ProductId
    {
      get
      {
        return _productId;
      }
      set
      {
        __isset.productId = true;
        this._productId = value;
      }
    }

    public string ProductName
    {
      get
      {
        return _productName;
      }
      set
      {
        __isset.productName = true;
        this._productName = value;
      }
    }

    public string ConsumeStreamId
    {
      get
      {
        return _consumeStreamId;
      }
      set
      {
        __isset.consumeStreamId = true;
        this._consumeStreamId = value;
      }
    }

    public string CooOrderSerial
    {
      get
      {
        return _cooOrderSerial;
      }
      set
      {
        __isset.cooOrderSerial = true;
        this._cooOrderSerial = value;
      }
    }

    public int Uin
    {
      get
      {
        return _uin;
      }
      set
      {
        __isset.uin = true;
        this._uin = value;
      }
    }

    public string GoodsID
    {
      get
      {
        return _goodsID;
      }
      set
      {
        __isset.goodsID = true;
        this._goodsID = value;
      }
    }

    public string GoodsInfo
    {
      get
      {
        return _goodsInfo;
      }
      set
      {
        __isset.goodsInfo = true;
        this._goodsInfo = value;
      }
    }

    public int GoodsCount
    {
      get
      {
        return _goodsCount;
      }
      set
      {
        __isset.goodsCount = true;
        this._goodsCount = value;
      }
    }

    public double OriginalMoney
    {
      get
      {
        return _originalMoney;
      }
      set
      {
        __isset.originalMoney = true;
        this._originalMoney = value;
      }
    }

    public double OrderMoney
    {
      get
      {
        return _orderMoney;
      }
      set
      {
        __isset.orderMoney = true;
        this._orderMoney = value;
      }
    }

    public string Note
    {
      get
      {
        return _note;
      }
      set
      {
        __isset.note = true;
        this._note = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool productId;
      public bool productName;
      public bool consumeStreamId;
      public bool cooOrderSerial;
      public bool uin;
      public bool goodsID;
      public bool goodsInfo;
      public bool goodsCount;
      public bool originalMoney;
      public bool orderMoney;
      public bool note;
    }

    public NinePayRequest() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              ProductId = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              ProductName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              ConsumeStreamId = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              CooOrderSerial = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              Uin = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.String) {
              GoodsID = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.String) {
              GoodsInfo = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.I32) {
              GoodsCount = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.Double) {
              OriginalMoney = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.Double) {
              OrderMoney = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.String) {
              Note = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("NinePayRequest");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (ProductId != null && __isset.productId) {
        field.Name = "productId";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ProductId);
        oprot.WriteFieldEnd();
      }
      if (ProductName != null && __isset.productName) {
        field.Name = "productName";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ProductName);
        oprot.WriteFieldEnd();
      }
      if (ConsumeStreamId != null && __isset.consumeStreamId) {
        field.Name = "consumeStreamId";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ConsumeStreamId);
        oprot.WriteFieldEnd();
      }
      if (CooOrderSerial != null && __isset.cooOrderSerial) {
        field.Name = "cooOrderSerial";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(CooOrderSerial);
        oprot.WriteFieldEnd();
      }
      if (__isset.uin) {
        field.Name = "uin";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Uin);
        oprot.WriteFieldEnd();
      }
      if (GoodsID != null && __isset.goodsID) {
        field.Name = "goodsID";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(GoodsID);
        oprot.WriteFieldEnd();
      }
      if (GoodsInfo != null && __isset.goodsInfo) {
        field.Name = "goodsInfo";
        field.Type = TType.String;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(GoodsInfo);
        oprot.WriteFieldEnd();
      }
      if (__isset.goodsCount) {
        field.Name = "goodsCount";
        field.Type = TType.I32;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(GoodsCount);
        oprot.WriteFieldEnd();
      }
      if (__isset.originalMoney) {
        field.Name = "originalMoney";
        field.Type = TType.Double;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(OriginalMoney);
        oprot.WriteFieldEnd();
      }
      if (__isset.orderMoney) {
        field.Name = "orderMoney";
        field.Type = TType.Double;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(OrderMoney);
        oprot.WriteFieldEnd();
      }
      if (Note != null && __isset.note) {
        field.Name = "note";
        field.Type = TType.String;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Note);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("NinePayRequest(");
      sb.Append("ProductId: ");
      sb.Append(ProductId);
      sb.Append(",ProductName: ");
      sb.Append(ProductName);
      sb.Append(",ConsumeStreamId: ");
      sb.Append(ConsumeStreamId);
      sb.Append(",CooOrderSerial: ");
      sb.Append(CooOrderSerial);
      sb.Append(",Uin: ");
      sb.Append(Uin);
      sb.Append(",GoodsID: ");
      sb.Append(GoodsID);
      sb.Append(",GoodsInfo: ");
      sb.Append(GoodsInfo);
      sb.Append(",GoodsCount: ");
      sb.Append(GoodsCount);
      sb.Append(",OriginalMoney: ");
      sb.Append(OriginalMoney);
      sb.Append(",OrderMoney: ");
      sb.Append(OrderMoney);
      sb.Append(",Note: ");
      sb.Append(Note);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
