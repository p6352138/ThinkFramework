/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace com.think.messages
{

  [Serializable]
  public partial class OprationResponse : TBase
  {
    private int _opration_id;
    private byte _state;
    private string _hint_msg;
    private int _pre_opration_id;
    private int _iconID;
    private byte _postion;
    private int _finish_opration_id;
    private int _ui_id;
    private int _sid;

    public int Opration_id
    {
      get
      {
        return _opration_id;
      }
      set
      {
        __isset.opration_id = true;
        this._opration_id = value;
      }
    }

    public byte State
    {
      get
      {
        return _state;
      }
      set
      {
        __isset.state = true;
        this._state = value;
      }
    }

    public string Hint_msg
    {
      get
      {
        return _hint_msg;
      }
      set
      {
        __isset.hint_msg = true;
        this._hint_msg = value;
      }
    }

    public int Pre_opration_id
    {
      get
      {
        return _pre_opration_id;
      }
      set
      {
        __isset.pre_opration_id = true;
        this._pre_opration_id = value;
      }
    }

    public int IconID
    {
      get
      {
        return _iconID;
      }
      set
      {
        __isset.iconID = true;
        this._iconID = value;
      }
    }

    public byte Postion
    {
      get
      {
        return _postion;
      }
      set
      {
        __isset.postion = true;
        this._postion = value;
      }
    }

    public int Finish_opration_id
    {
      get
      {
        return _finish_opration_id;
      }
      set
      {
        __isset.finish_opration_id = true;
        this._finish_opration_id = value;
      }
    }

    public int Ui_id
    {
      get
      {
        return _ui_id;
      }
      set
      {
        __isset.ui_id = true;
        this._ui_id = value;
      }
    }

    public int Sid
    {
      get
      {
        return _sid;
      }
      set
      {
        __isset.sid = true;
        this._sid = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool opration_id;
      public bool state;
      public bool hint_msg;
      public bool pre_opration_id;
      public bool iconID;
      public bool postion;
      public bool finish_opration_id;
      public bool ui_id;
      public bool sid;
    }

    public OprationResponse() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              Opration_id = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Byte) {
              State = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              Hint_msg = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              Pre_opration_id = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              IconID = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.Byte) {
              Postion = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I32) {
              Finish_opration_id = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.I32) {
              Ui_id = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.I32) {
              Sid = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("OprationResponse");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.opration_id) {
        field.Name = "opration_id";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Opration_id);
        oprot.WriteFieldEnd();
      }
      if (__isset.state) {
        field.Name = "state";
        field.Type = TType.Byte;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(State);
        oprot.WriteFieldEnd();
      }
      if (Hint_msg != null && __isset.hint_msg) {
        field.Name = "hint_msg";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Hint_msg);
        oprot.WriteFieldEnd();
      }
      if (__isset.pre_opration_id) {
        field.Name = "pre_opration_id";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Pre_opration_id);
        oprot.WriteFieldEnd();
      }
      if (__isset.iconID) {
        field.Name = "iconID";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(IconID);
        oprot.WriteFieldEnd();
      }
      if (__isset.postion) {
        field.Name = "postion";
        field.Type = TType.Byte;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(Postion);
        oprot.WriteFieldEnd();
      }
      if (__isset.finish_opration_id) {
        field.Name = "finish_opration_id";
        field.Type = TType.I32;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Finish_opration_id);
        oprot.WriteFieldEnd();
      }
      if (__isset.ui_id) {
        field.Name = "ui_id";
        field.Type = TType.I32;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Ui_id);
        oprot.WriteFieldEnd();
      }
      if (__isset.sid) {
        field.Name = "sid";
        field.Type = TType.I32;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Sid);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("OprationResponse(");
      sb.Append("Opration_id: ");
      sb.Append(Opration_id);
      sb.Append(",State: ");
      sb.Append(State);
      sb.Append(",Hint_msg: ");
      sb.Append(Hint_msg);
      sb.Append(",Pre_opration_id: ");
      sb.Append(Pre_opration_id);
      sb.Append(",IconID: ");
      sb.Append(IconID);
      sb.Append(",Postion: ");
      sb.Append(Postion);
      sb.Append(",Finish_opration_id: ");
      sb.Append(Finish_opration_id);
      sb.Append(",Ui_id: ");
      sb.Append(Ui_id);
      sb.Append(",Sid: ");
      sb.Append(Sid);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
