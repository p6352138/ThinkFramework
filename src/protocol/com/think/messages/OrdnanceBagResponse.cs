/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace com.think.messages
{

  [Serializable]
  public partial class OrdnanceBagResponse : TBase
  {
    private int _instanceId;
    private int _userId;
    private int _generalId;
    private int _ordnanceId;
    private short _index;
    private byte _containerType;
    private int _exp;
    private OrdnanceDetailResponse _ordnanceDetail;
    private Dictionary<byte, bool> _ordnanceBusinessman;

    public int InstanceId
    {
      get
      {
        return _instanceId;
      }
      set
      {
        __isset.instanceId = true;
        this._instanceId = value;
      }
    }

    public int UserId
    {
      get
      {
        return _userId;
      }
      set
      {
        __isset.userId = true;
        this._userId = value;
      }
    }

    public int GeneralId
    {
      get
      {
        return _generalId;
      }
      set
      {
        __isset.generalId = true;
        this._generalId = value;
      }
    }

    public int OrdnanceId
    {
      get
      {
        return _ordnanceId;
      }
      set
      {
        __isset.ordnanceId = true;
        this._ordnanceId = value;
      }
    }

    public short Index
    {
      get
      {
        return _index;
      }
      set
      {
        __isset.index = true;
        this._index = value;
      }
    }

    public byte ContainerType
    {
      get
      {
        return _containerType;
      }
      set
      {
        __isset.containerType = true;
        this._containerType = value;
      }
    }

    public int Exp
    {
      get
      {
        return _exp;
      }
      set
      {
        __isset.exp = true;
        this._exp = value;
      }
    }

    public OrdnanceDetailResponse OrdnanceDetail
    {
      get
      {
        return _ordnanceDetail;
      }
      set
      {
        __isset.ordnanceDetail = true;
        this._ordnanceDetail = value;
      }
    }

    public Dictionary<byte, bool> OrdnanceBusinessman
    {
      get
      {
        return _ordnanceBusinessman;
      }
      set
      {
        __isset.ordnanceBusinessman = true;
        this._ordnanceBusinessman = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool instanceId;
      public bool userId;
      public bool generalId;
      public bool ordnanceId;
      public bool index;
      public bool containerType;
      public bool exp;
      public bool ordnanceDetail;
      public bool ordnanceBusinessman;
    }

    public OrdnanceBagResponse() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              InstanceId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              UserId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              GeneralId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              OrdnanceId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I16) {
              Index = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.Byte) {
              ContainerType = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I32) {
              Exp = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.Struct) {
              OrdnanceDetail = new OrdnanceDetailResponse();
              OrdnanceDetail.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.Map) {
              {
                OrdnanceBusinessman = new Dictionary<byte, bool>();
                TMap _map344 = iprot.ReadMapBegin();
                for( int _i345 = 0; _i345 < _map344.Count; ++_i345)
                {
                  byte _key346;
                  bool _val347;
                  _key346 = iprot.ReadByte();
                  _val347 = iprot.ReadBool();
                  OrdnanceBusinessman[_key346] = _val347;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("OrdnanceBagResponse");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.instanceId) {
        field.Name = "instanceId";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(InstanceId);
        oprot.WriteFieldEnd();
      }
      if (__isset.userId) {
        field.Name = "userId";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(UserId);
        oprot.WriteFieldEnd();
      }
      if (__isset.generalId) {
        field.Name = "generalId";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(GeneralId);
        oprot.WriteFieldEnd();
      }
      if (__isset.ordnanceId) {
        field.Name = "ordnanceId";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(OrdnanceId);
        oprot.WriteFieldEnd();
      }
      if (__isset.index) {
        field.Name = "index";
        field.Type = TType.I16;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(Index);
        oprot.WriteFieldEnd();
      }
      if (__isset.containerType) {
        field.Name = "containerType";
        field.Type = TType.Byte;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(ContainerType);
        oprot.WriteFieldEnd();
      }
      if (__isset.exp) {
        field.Name = "exp";
        field.Type = TType.I32;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Exp);
        oprot.WriteFieldEnd();
      }
      if (OrdnanceDetail != null && __isset.ordnanceDetail) {
        field.Name = "ordnanceDetail";
        field.Type = TType.Struct;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        OrdnanceDetail.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (OrdnanceBusinessman != null && __isset.ordnanceBusinessman) {
        field.Name = "ordnanceBusinessman";
        field.Type = TType.Map;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.Byte, TType.Bool, OrdnanceBusinessman.Count));
          foreach (byte _iter348 in OrdnanceBusinessman.Keys)
          {
            oprot.WriteByte(_iter348);
            oprot.WriteBool(OrdnanceBusinessman[_iter348]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("OrdnanceBagResponse(");
      sb.Append("InstanceId: ");
      sb.Append(InstanceId);
      sb.Append(",UserId: ");
      sb.Append(UserId);
      sb.Append(",GeneralId: ");
      sb.Append(GeneralId);
      sb.Append(",OrdnanceId: ");
      sb.Append(OrdnanceId);
      sb.Append(",Index: ");
      sb.Append(Index);
      sb.Append(",ContainerType: ");
      sb.Append(ContainerType);
      sb.Append(",Exp: ");
      sb.Append(Exp);
      sb.Append(",OrdnanceDetail: ");
      sb.Append(OrdnanceDetail== null ? "<null>" : OrdnanceDetail.ToString());
      sb.Append(",OrdnanceBusinessman: ");
      sb.Append(OrdnanceBusinessman);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
