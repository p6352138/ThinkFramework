/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace com.think.messages
{

  [Serializable]
  public partial class PlayerAttributeResponse : TBase
  {
    private short _tfNum;
    private byte _raNum;
    private byte _fMNum;
    private byte _bagSize;
    private byte _perdayTaskDoneNum;
    private byte _imposeNum;
    private short _foceImposeNum;
    private int _tradeNumber;
    private int _legionContribution;
    private int _legionPerdayContriNum;
    private bool _isGetSalary;
    private bool _isAttacked;
    private byte _maxTokenNum;
    private short _extraTokenZZ;
    private short _extraTokenNT;
    private short _extraTokenGJ;
    private short _extraTokenZF;
    private short _extraTokenYK;
    private int _campaignNum;
    private int _attackNum;
    private int _attackedNum;
    private PlayerCDTime _playerCDTime;
    private byte _generalCount;
    private short _ordnanceFragments;
    private int _surplus_trainNum;
    private int _train_book_gold;
    private byte _summonZhang;

    public short TfNum
    {
      get
      {
        return _tfNum;
      }
      set
      {
        __isset.tfNum = true;
        this._tfNum = value;
      }
    }

    public byte RaNum
    {
      get
      {
        return _raNum;
      }
      set
      {
        __isset.raNum = true;
        this._raNum = value;
      }
    }

    public byte FMNum
    {
      get
      {
        return _fMNum;
      }
      set
      {
        __isset.fMNum = true;
        this._fMNum = value;
      }
    }

    public byte BagSize
    {
      get
      {
        return _bagSize;
      }
      set
      {
        __isset.bagSize = true;
        this._bagSize = value;
      }
    }

    public byte PerdayTaskDoneNum
    {
      get
      {
        return _perdayTaskDoneNum;
      }
      set
      {
        __isset.perdayTaskDoneNum = true;
        this._perdayTaskDoneNum = value;
      }
    }

    public byte ImposeNum
    {
      get
      {
        return _imposeNum;
      }
      set
      {
        __isset.imposeNum = true;
        this._imposeNum = value;
      }
    }

    public short FoceImposeNum
    {
      get
      {
        return _foceImposeNum;
      }
      set
      {
        __isset.foceImposeNum = true;
        this._foceImposeNum = value;
      }
    }

    public int TradeNumber
    {
      get
      {
        return _tradeNumber;
      }
      set
      {
        __isset.tradeNumber = true;
        this._tradeNumber = value;
      }
    }

    public int LegionContribution
    {
      get
      {
        return _legionContribution;
      }
      set
      {
        __isset.legionContribution = true;
        this._legionContribution = value;
      }
    }

    public int LegionPerdayContriNum
    {
      get
      {
        return _legionPerdayContriNum;
      }
      set
      {
        __isset.legionPerdayContriNum = true;
        this._legionPerdayContriNum = value;
      }
    }

    public bool IsGetSalary
    {
      get
      {
        return _isGetSalary;
      }
      set
      {
        __isset.isGetSalary = true;
        this._isGetSalary = value;
      }
    }

    public bool IsAttacked
    {
      get
      {
        return _isAttacked;
      }
      set
      {
        __isset.isAttacked = true;
        this._isAttacked = value;
      }
    }

    public byte MaxTokenNum
    {
      get
      {
        return _maxTokenNum;
      }
      set
      {
        __isset.maxTokenNum = true;
        this._maxTokenNum = value;
      }
    }

    public short ExtraTokenZZ
    {
      get
      {
        return _extraTokenZZ;
      }
      set
      {
        __isset.extraTokenZZ = true;
        this._extraTokenZZ = value;
      }
    }

    public short ExtraTokenNT
    {
      get
      {
        return _extraTokenNT;
      }
      set
      {
        __isset.extraTokenNT = true;
        this._extraTokenNT = value;
      }
    }

    public short ExtraTokenGJ
    {
      get
      {
        return _extraTokenGJ;
      }
      set
      {
        __isset.extraTokenGJ = true;
        this._extraTokenGJ = value;
      }
    }

    public short ExtraTokenZF
    {
      get
      {
        return _extraTokenZF;
      }
      set
      {
        __isset.extraTokenZF = true;
        this._extraTokenZF = value;
      }
    }

    public short ExtraTokenYK
    {
      get
      {
        return _extraTokenYK;
      }
      set
      {
        __isset.extraTokenYK = true;
        this._extraTokenYK = value;
      }
    }

    public int CampaignNum
    {
      get
      {
        return _campaignNum;
      }
      set
      {
        __isset.campaignNum = true;
        this._campaignNum = value;
      }
    }

    public int AttackNum
    {
      get
      {
        return _attackNum;
      }
      set
      {
        __isset.attackNum = true;
        this._attackNum = value;
      }
    }

    public int AttackedNum
    {
      get
      {
        return _attackedNum;
      }
      set
      {
        __isset.attackedNum = true;
        this._attackedNum = value;
      }
    }

    public PlayerCDTime PlayerCDTime
    {
      get
      {
        return _playerCDTime;
      }
      set
      {
        __isset.playerCDTime = true;
        this._playerCDTime = value;
      }
    }

    public byte GeneralCount
    {
      get
      {
        return _generalCount;
      }
      set
      {
        __isset.generalCount = true;
        this._generalCount = value;
      }
    }

    public short OrdnanceFragments
    {
      get
      {
        return _ordnanceFragments;
      }
      set
      {
        __isset.ordnanceFragments = true;
        this._ordnanceFragments = value;
      }
    }

    public int Surplus_trainNum
    {
      get
      {
        return _surplus_trainNum;
      }
      set
      {
        __isset.surplus_trainNum = true;
        this._surplus_trainNum = value;
      }
    }

    public int Train_book_gold
    {
      get
      {
        return _train_book_gold;
      }
      set
      {
        __isset.train_book_gold = true;
        this._train_book_gold = value;
      }
    }

    public byte SummonZhang
    {
      get
      {
        return _summonZhang;
      }
      set
      {
        __isset.summonZhang = true;
        this._summonZhang = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool tfNum;
      public bool raNum;
      public bool fMNum;
      public bool bagSize;
      public bool perdayTaskDoneNum;
      public bool imposeNum;
      public bool foceImposeNum;
      public bool tradeNumber;
      public bool legionContribution;
      public bool legionPerdayContriNum;
      public bool isGetSalary;
      public bool isAttacked;
      public bool maxTokenNum;
      public bool extraTokenZZ;
      public bool extraTokenNT;
      public bool extraTokenGJ;
      public bool extraTokenZF;
      public bool extraTokenYK;
      public bool campaignNum;
      public bool attackNum;
      public bool attackedNum;
      public bool playerCDTime;
      public bool generalCount;
      public bool ordnanceFragments;
      public bool surplus_trainNum;
      public bool train_book_gold;
      public bool summonZhang;
    }

    public PlayerAttributeResponse() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I16) {
              TfNum = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Byte) {
              RaNum = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Byte) {
              FMNum = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Byte) {
              BagSize = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Byte) {
              PerdayTaskDoneNum = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.Byte) {
              ImposeNum = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I16) {
              FoceImposeNum = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.I32) {
              TradeNumber = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.I32) {
              LegionContribution = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.I32) {
              LegionPerdayContriNum = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.Bool) {
              IsGetSalary = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.Bool) {
              IsAttacked = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.Byte) {
              MaxTokenNum = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 14:
            if (field.Type == TType.I16) {
              ExtraTokenZZ = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 15:
            if (field.Type == TType.I16) {
              ExtraTokenNT = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 16:
            if (field.Type == TType.I16) {
              ExtraTokenGJ = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 17:
            if (field.Type == TType.I16) {
              ExtraTokenZF = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 18:
            if (field.Type == TType.I16) {
              ExtraTokenYK = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 19:
            if (field.Type == TType.I32) {
              CampaignNum = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 20:
            if (field.Type == TType.I32) {
              AttackNum = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 21:
            if (field.Type == TType.I32) {
              AttackedNum = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 22:
            if (field.Type == TType.Struct) {
              PlayerCDTime = new PlayerCDTime();
              PlayerCDTime.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 23:
            if (field.Type == TType.Byte) {
              GeneralCount = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 24:
            if (field.Type == TType.I16) {
              OrdnanceFragments = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 25:
            if (field.Type == TType.I32) {
              Surplus_trainNum = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 26:
            if (field.Type == TType.I32) {
              Train_book_gold = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 27:
            if (field.Type == TType.Byte) {
              SummonZhang = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("PlayerAttributeResponse");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.tfNum) {
        field.Name = "tfNum";
        field.Type = TType.I16;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(TfNum);
        oprot.WriteFieldEnd();
      }
      if (__isset.raNum) {
        field.Name = "raNum";
        field.Type = TType.Byte;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(RaNum);
        oprot.WriteFieldEnd();
      }
      if (__isset.fMNum) {
        field.Name = "fMNum";
        field.Type = TType.Byte;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(FMNum);
        oprot.WriteFieldEnd();
      }
      if (__isset.bagSize) {
        field.Name = "bagSize";
        field.Type = TType.Byte;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(BagSize);
        oprot.WriteFieldEnd();
      }
      if (__isset.perdayTaskDoneNum) {
        field.Name = "perdayTaskDoneNum";
        field.Type = TType.Byte;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(PerdayTaskDoneNum);
        oprot.WriteFieldEnd();
      }
      if (__isset.imposeNum) {
        field.Name = "imposeNum";
        field.Type = TType.Byte;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(ImposeNum);
        oprot.WriteFieldEnd();
      }
      if (__isset.foceImposeNum) {
        field.Name = "foceImposeNum";
        field.Type = TType.I16;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(FoceImposeNum);
        oprot.WriteFieldEnd();
      }
      if (__isset.tradeNumber) {
        field.Name = "tradeNumber";
        field.Type = TType.I32;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(TradeNumber);
        oprot.WriteFieldEnd();
      }
      if (__isset.legionContribution) {
        field.Name = "legionContribution";
        field.Type = TType.I32;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(LegionContribution);
        oprot.WriteFieldEnd();
      }
      if (__isset.legionPerdayContriNum) {
        field.Name = "legionPerdayContriNum";
        field.Type = TType.I32;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(LegionPerdayContriNum);
        oprot.WriteFieldEnd();
      }
      if (__isset.isGetSalary) {
        field.Name = "isGetSalary";
        field.Type = TType.Bool;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(IsGetSalary);
        oprot.WriteFieldEnd();
      }
      if (__isset.isAttacked) {
        field.Name = "isAttacked";
        field.Type = TType.Bool;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(IsAttacked);
        oprot.WriteFieldEnd();
      }
      if (__isset.maxTokenNum) {
        field.Name = "maxTokenNum";
        field.Type = TType.Byte;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(MaxTokenNum);
        oprot.WriteFieldEnd();
      }
      if (__isset.extraTokenZZ) {
        field.Name = "extraTokenZZ";
        field.Type = TType.I16;
        field.ID = 14;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(ExtraTokenZZ);
        oprot.WriteFieldEnd();
      }
      if (__isset.extraTokenNT) {
        field.Name = "extraTokenNT";
        field.Type = TType.I16;
        field.ID = 15;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(ExtraTokenNT);
        oprot.WriteFieldEnd();
      }
      if (__isset.extraTokenGJ) {
        field.Name = "extraTokenGJ";
        field.Type = TType.I16;
        field.ID = 16;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(ExtraTokenGJ);
        oprot.WriteFieldEnd();
      }
      if (__isset.extraTokenZF) {
        field.Name = "extraTokenZF";
        field.Type = TType.I16;
        field.ID = 17;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(ExtraTokenZF);
        oprot.WriteFieldEnd();
      }
      if (__isset.extraTokenYK) {
        field.Name = "extraTokenYK";
        field.Type = TType.I16;
        field.ID = 18;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(ExtraTokenYK);
        oprot.WriteFieldEnd();
      }
      if (__isset.campaignNum) {
        field.Name = "campaignNum";
        field.Type = TType.I32;
        field.ID = 19;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(CampaignNum);
        oprot.WriteFieldEnd();
      }
      if (__isset.attackNum) {
        field.Name = "attackNum";
        field.Type = TType.I32;
        field.ID = 20;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(AttackNum);
        oprot.WriteFieldEnd();
      }
      if (__isset.attackedNum) {
        field.Name = "attackedNum";
        field.Type = TType.I32;
        field.ID = 21;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(AttackedNum);
        oprot.WriteFieldEnd();
      }
      if (PlayerCDTime != null && __isset.playerCDTime) {
        field.Name = "playerCDTime";
        field.Type = TType.Struct;
        field.ID = 22;
        oprot.WriteFieldBegin(field);
        PlayerCDTime.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (__isset.generalCount) {
        field.Name = "generalCount";
        field.Type = TType.Byte;
        field.ID = 23;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(GeneralCount);
        oprot.WriteFieldEnd();
      }
      if (__isset.ordnanceFragments) {
        field.Name = "ordnanceFragments";
        field.Type = TType.I16;
        field.ID = 24;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(OrdnanceFragments);
        oprot.WriteFieldEnd();
      }
      if (__isset.surplus_trainNum) {
        field.Name = "surplus_trainNum";
        field.Type = TType.I32;
        field.ID = 25;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Surplus_trainNum);
        oprot.WriteFieldEnd();
      }
      if (__isset.train_book_gold) {
        field.Name = "train_book_gold";
        field.Type = TType.I32;
        field.ID = 26;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Train_book_gold);
        oprot.WriteFieldEnd();
      }
      if (__isset.summonZhang) {
        field.Name = "summonZhang";
        field.Type = TType.Byte;
        field.ID = 27;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(SummonZhang);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("PlayerAttributeResponse(");
      sb.Append("TfNum: ");
      sb.Append(TfNum);
      sb.Append(",RaNum: ");
      sb.Append(RaNum);
      sb.Append(",FMNum: ");
      sb.Append(FMNum);
      sb.Append(",BagSize: ");
      sb.Append(BagSize);
      sb.Append(",PerdayTaskDoneNum: ");
      sb.Append(PerdayTaskDoneNum);
      sb.Append(",ImposeNum: ");
      sb.Append(ImposeNum);
      sb.Append(",FoceImposeNum: ");
      sb.Append(FoceImposeNum);
      sb.Append(",TradeNumber: ");
      sb.Append(TradeNumber);
      sb.Append(",LegionContribution: ");
      sb.Append(LegionContribution);
      sb.Append(",LegionPerdayContriNum: ");
      sb.Append(LegionPerdayContriNum);
      sb.Append(",IsGetSalary: ");
      sb.Append(IsGetSalary);
      sb.Append(",IsAttacked: ");
      sb.Append(IsAttacked);
      sb.Append(",MaxTokenNum: ");
      sb.Append(MaxTokenNum);
      sb.Append(",ExtraTokenZZ: ");
      sb.Append(ExtraTokenZZ);
      sb.Append(",ExtraTokenNT: ");
      sb.Append(ExtraTokenNT);
      sb.Append(",ExtraTokenGJ: ");
      sb.Append(ExtraTokenGJ);
      sb.Append(",ExtraTokenZF: ");
      sb.Append(ExtraTokenZF);
      sb.Append(",ExtraTokenYK: ");
      sb.Append(ExtraTokenYK);
      sb.Append(",CampaignNum: ");
      sb.Append(CampaignNum);
      sb.Append(",AttackNum: ");
      sb.Append(AttackNum);
      sb.Append(",AttackedNum: ");
      sb.Append(AttackedNum);
      sb.Append(",PlayerCDTime: ");
      sb.Append(PlayerCDTime== null ? "<null>" : PlayerCDTime.ToString());
      sb.Append(",GeneralCount: ");
      sb.Append(GeneralCount);
      sb.Append(",OrdnanceFragments: ");
      sb.Append(OrdnanceFragments);
      sb.Append(",Surplus_trainNum: ");
      sb.Append(Surplus_trainNum);
      sb.Append(",Train_book_gold: ");
      sb.Append(Train_book_gold);
      sb.Append(",SummonZhang: ");
      sb.Append(SummonZhang);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
