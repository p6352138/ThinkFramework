/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace com.think.messages
{

  [Serializable]
  public partial class PlayerBelleListResponse : TBase
  {
    private byte _resType;
    private int _fuckTimes;
    private List<PlayerBelleResponse> _playerBelleList;
    private PlayerBelleResponse _playerBelleResponse;

    public byte ResType
    {
      get
      {
        return _resType;
      }
      set
      {
        __isset.resType = true;
        this._resType = value;
      }
    }

    public int FuckTimes
    {
      get
      {
        return _fuckTimes;
      }
      set
      {
        __isset.fuckTimes = true;
        this._fuckTimes = value;
      }
    }

    public List<PlayerBelleResponse> PlayerBelleList
    {
      get
      {
        return _playerBelleList;
      }
      set
      {
        __isset.playerBelleList = true;
        this._playerBelleList = value;
      }
    }

    public PlayerBelleResponse PlayerBelleResponse
    {
      get
      {
        return _playerBelleResponse;
      }
      set
      {
        __isset.playerBelleResponse = true;
        this._playerBelleResponse = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool resType;
      public bool fuckTimes;
      public bool playerBelleList;
      public bool playerBelleResponse;
    }

    public PlayerBelleListResponse() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Byte) {
              ResType = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              FuckTimes = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.List) {
              {
                PlayerBelleList = new List<PlayerBelleResponse>();
                TList _list592 = iprot.ReadListBegin();
                for( int _i593 = 0; _i593 < _list592.Count; ++_i593)
                {
                  PlayerBelleResponse _elem594 = new PlayerBelleResponse();
                  _elem594 = new PlayerBelleResponse();
                  _elem594.Read(iprot);
                  PlayerBelleList.Add(_elem594);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Struct) {
              PlayerBelleResponse = new PlayerBelleResponse();
              PlayerBelleResponse.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("PlayerBelleListResponse");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.resType) {
        field.Name = "resType";
        field.Type = TType.Byte;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(ResType);
        oprot.WriteFieldEnd();
      }
      if (__isset.fuckTimes) {
        field.Name = "fuckTimes";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(FuckTimes);
        oprot.WriteFieldEnd();
      }
      if (PlayerBelleList != null && __isset.playerBelleList) {
        field.Name = "playerBelleList";
        field.Type = TType.List;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, PlayerBelleList.Count));
          foreach (PlayerBelleResponse _iter595 in PlayerBelleList)
          {
            _iter595.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (PlayerBelleResponse != null && __isset.playerBelleResponse) {
        field.Name = "playerBelleResponse";
        field.Type = TType.Struct;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        PlayerBelleResponse.Write(oprot);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("PlayerBelleListResponse(");
      sb.Append("ResType: ");
      sb.Append(ResType);
      sb.Append(",FuckTimes: ");
      sb.Append(FuckTimes);
      sb.Append(",PlayerBelleList: ");
      sb.Append(PlayerBelleList);
      sb.Append(",PlayerBelleResponse: ");
      sb.Append(PlayerBelleResponse== null ? "<null>" : PlayerBelleResponse.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }

}
