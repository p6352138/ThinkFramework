/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace com.think.messages
{

  [Serializable]
  public partial class PlayerCDTime : TBase
  {
    private long _inspireCd;
    private long _protectTime;
    private long _battleTime;
    private long _lastImposeTime;
    private long _lastTransferTime;
    private long _lastGuideTime;

    public long InspireCd
    {
      get
      {
        return _inspireCd;
      }
      set
      {
        __isset.inspireCd = true;
        this._inspireCd = value;
      }
    }

    public long ProtectTime
    {
      get
      {
        return _protectTime;
      }
      set
      {
        __isset.protectTime = true;
        this._protectTime = value;
      }
    }

    public long BattleTime
    {
      get
      {
        return _battleTime;
      }
      set
      {
        __isset.battleTime = true;
        this._battleTime = value;
      }
    }

    public long LastImposeTime
    {
      get
      {
        return _lastImposeTime;
      }
      set
      {
        __isset.lastImposeTime = true;
        this._lastImposeTime = value;
      }
    }

    public long LastTransferTime
    {
      get
      {
        return _lastTransferTime;
      }
      set
      {
        __isset.lastTransferTime = true;
        this._lastTransferTime = value;
      }
    }

    public long LastGuideTime
    {
      get
      {
        return _lastGuideTime;
      }
      set
      {
        __isset.lastGuideTime = true;
        this._lastGuideTime = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool inspireCd;
      public bool protectTime;
      public bool battleTime;
      public bool lastImposeTime;
      public bool lastTransferTime;
      public bool lastGuideTime;
    }

    public PlayerCDTime() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64) {
              InspireCd = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I64) {
              ProtectTime = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I64) {
              BattleTime = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I64) {
              LastImposeTime = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I64) {
              LastTransferTime = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I64) {
              LastGuideTime = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("PlayerCDTime");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.inspireCd) {
        field.Name = "inspireCd";
        field.Type = TType.I64;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(InspireCd);
        oprot.WriteFieldEnd();
      }
      if (__isset.protectTime) {
        field.Name = "protectTime";
        field.Type = TType.I64;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(ProtectTime);
        oprot.WriteFieldEnd();
      }
      if (__isset.battleTime) {
        field.Name = "battleTime";
        field.Type = TType.I64;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(BattleTime);
        oprot.WriteFieldEnd();
      }
      if (__isset.lastImposeTime) {
        field.Name = "lastImposeTime";
        field.Type = TType.I64;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(LastImposeTime);
        oprot.WriteFieldEnd();
      }
      if (__isset.lastTransferTime) {
        field.Name = "lastTransferTime";
        field.Type = TType.I64;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(LastTransferTime);
        oprot.WriteFieldEnd();
      }
      if (__isset.lastGuideTime) {
        field.Name = "lastGuideTime";
        field.Type = TType.I64;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(LastGuideTime);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("PlayerCDTime(");
      sb.Append("InspireCd: ");
      sb.Append(InspireCd);
      sb.Append(",ProtectTime: ");
      sb.Append(ProtectTime);
      sb.Append(",BattleTime: ");
      sb.Append(BattleTime);
      sb.Append(",LastImposeTime: ");
      sb.Append(LastImposeTime);
      sb.Append(",LastTransferTime: ");
      sb.Append(LastTransferTime);
      sb.Append(",LastGuideTime: ");
      sb.Append(LastGuideTime);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
