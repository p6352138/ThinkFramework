/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace com.think.messages
{

  [Serializable]
  public partial class PlayerCompareResponse : TBase
  {
    private PlayerCompareInfo1Response _sourcePlayer;
    private PlayerCompareInfo1Response _targetPlayer;

    public PlayerCompareInfo1Response SourcePlayer
    {
      get
      {
        return _sourcePlayer;
      }
      set
      {
        __isset.sourcePlayer = true;
        this._sourcePlayer = value;
      }
    }

    public PlayerCompareInfo1Response TargetPlayer
    {
      get
      {
        return _targetPlayer;
      }
      set
      {
        __isset.targetPlayer = true;
        this._targetPlayer = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool sourcePlayer;
      public bool targetPlayer;
    }

    public PlayerCompareResponse() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct) {
              SourcePlayer = new PlayerCompareInfo1Response();
              SourcePlayer.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Struct) {
              TargetPlayer = new PlayerCompareInfo1Response();
              TargetPlayer.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("PlayerCompareResponse");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (SourcePlayer != null && __isset.sourcePlayer) {
        field.Name = "sourcePlayer";
        field.Type = TType.Struct;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        SourcePlayer.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (TargetPlayer != null && __isset.targetPlayer) {
        field.Name = "targetPlayer";
        field.Type = TType.Struct;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        TargetPlayer.Write(oprot);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("PlayerCompareResponse(");
      sb.Append("SourcePlayer: ");
      sb.Append(SourcePlayer== null ? "<null>" : SourcePlayer.ToString());
      sb.Append(",TargetPlayer: ");
      sb.Append(TargetPlayer== null ? "<null>" : TargetPlayer.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }

}
