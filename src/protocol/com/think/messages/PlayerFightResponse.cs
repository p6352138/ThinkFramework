/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace com.think.messages
{

  [Serializable]
  public partial class PlayerFightResponse : TBase
  {
    private bool _isSucc;
    private byte _result_type;
    private string _fight_describe;
    private int _attackerLoss;
    private int _targetLoss;
    private Dictionary<byte, FightFriendDataResponse> _attackerFriend;
    private Dictionary<byte, FightFriendDataResponse> _targetFriend;
    private List<FightActionResponse> _fightActionList;
    private string _attackerName;
    private string _targetName;
    private int _id;
    private int _exploit;
    private int _prestige;
    private int _itemID;
    private byte _trait;
    private int _itemImage;
    private string _itemName;
    private int _scene;
    private int _money;
    private bool _isLast;
    private bool _isPass;
    private int _attacker_fighting_capacity;
    private int _target_fighting_capacity;
    private int _adam_war;
    private int _general_id;
    private int _attacker_strategy;
    private string _attacker_strategy_name;
    private int _attacker_strategy_icon;
    private int _target_strategy;
    private string _target_strategy_name;
    private int _target_strategy_icon;
    private byte _strategy_restrain;
    private Dictionary<byte, int> _attackerStrategyAttributeMap;
    private Dictionary<byte, int> _targetStrategyAttributeMap;
    private Dictionary<byte, int> _restrainStrategyAttributeMap;
    private int _leader_id;
    private int _fight_time;
    private int _food;
    private int _technique;
    private int _fragment;
    private int _exp;
    private List<PlayerFightScoreResponse> _defeat_score;
    private QuestionResponse _questionResponse;
    private int _general_soul;
    private int _opration_id;
    private List<FightSchemeActionResponse> _fightActionSchemeList;
    private List<BorrowGeneralResponse> _borrowGeneralList;
    private List<int> _attacker_icon;
    private List<int> _target_icon;
    private int _forces;
    private PlunderGarrisonResponse _plunderGarrison;
    private List<int> _attacker_banner;
    private List<int> _target_banner;
    private List<ResourceResponse> _listAward;
    private string _fight_share_name;
    private List<FightStrategyResponse> _listFightStrategy;
    private byte _isFightStrategy;

    public bool IsSucc
    {
      get
      {
        return _isSucc;
      }
      set
      {
        __isset.isSucc = true;
        this._isSucc = value;
      }
    }

    public byte Result_type
    {
      get
      {
        return _result_type;
      }
      set
      {
        __isset.result_type = true;
        this._result_type = value;
      }
    }

    public string Fight_describe
    {
      get
      {
        return _fight_describe;
      }
      set
      {
        __isset.fight_describe = true;
        this._fight_describe = value;
      }
    }

    public int AttackerLoss
    {
      get
      {
        return _attackerLoss;
      }
      set
      {
        __isset.attackerLoss = true;
        this._attackerLoss = value;
      }
    }

    public int TargetLoss
    {
      get
      {
        return _targetLoss;
      }
      set
      {
        __isset.targetLoss = true;
        this._targetLoss = value;
      }
    }

    public Dictionary<byte, FightFriendDataResponse> AttackerFriend
    {
      get
      {
        return _attackerFriend;
      }
      set
      {
        __isset.attackerFriend = true;
        this._attackerFriend = value;
      }
    }

    public Dictionary<byte, FightFriendDataResponse> TargetFriend
    {
      get
      {
        return _targetFriend;
      }
      set
      {
        __isset.targetFriend = true;
        this._targetFriend = value;
      }
    }

    public List<FightActionResponse> FightActionList
    {
      get
      {
        return _fightActionList;
      }
      set
      {
        __isset.fightActionList = true;
        this._fightActionList = value;
      }
    }

    public string AttackerName
    {
      get
      {
        return _attackerName;
      }
      set
      {
        __isset.attackerName = true;
        this._attackerName = value;
      }
    }

    public string TargetName
    {
      get
      {
        return _targetName;
      }
      set
      {
        __isset.targetName = true;
        this._targetName = value;
      }
    }

    public int Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }

    public int Exploit
    {
      get
      {
        return _exploit;
      }
      set
      {
        __isset.exploit = true;
        this._exploit = value;
      }
    }

    public int Prestige
    {
      get
      {
        return _prestige;
      }
      set
      {
        __isset.prestige = true;
        this._prestige = value;
      }
    }

    public int ItemID
    {
      get
      {
        return _itemID;
      }
      set
      {
        __isset.itemID = true;
        this._itemID = value;
      }
    }

    public byte Trait
    {
      get
      {
        return _trait;
      }
      set
      {
        __isset.trait = true;
        this._trait = value;
      }
    }

    public int ItemImage
    {
      get
      {
        return _itemImage;
      }
      set
      {
        __isset.itemImage = true;
        this._itemImage = value;
      }
    }

    public string ItemName
    {
      get
      {
        return _itemName;
      }
      set
      {
        __isset.itemName = true;
        this._itemName = value;
      }
    }

    public int Scene
    {
      get
      {
        return _scene;
      }
      set
      {
        __isset.scene = true;
        this._scene = value;
      }
    }

    public int Money
    {
      get
      {
        return _money;
      }
      set
      {
        __isset.money = true;
        this._money = value;
      }
    }

    public bool IsLast
    {
      get
      {
        return _isLast;
      }
      set
      {
        __isset.isLast = true;
        this._isLast = value;
      }
    }

    public bool IsPass
    {
      get
      {
        return _isPass;
      }
      set
      {
        __isset.isPass = true;
        this._isPass = value;
      }
    }

    public int Attacker_fighting_capacity
    {
      get
      {
        return _attacker_fighting_capacity;
      }
      set
      {
        __isset.attacker_fighting_capacity = true;
        this._attacker_fighting_capacity = value;
      }
    }

    public int Target_fighting_capacity
    {
      get
      {
        return _target_fighting_capacity;
      }
      set
      {
        __isset.target_fighting_capacity = true;
        this._target_fighting_capacity = value;
      }
    }

    public int Adam_war
    {
      get
      {
        return _adam_war;
      }
      set
      {
        __isset.adam_war = true;
        this._adam_war = value;
      }
    }

    public int General_id
    {
      get
      {
        return _general_id;
      }
      set
      {
        __isset.general_id = true;
        this._general_id = value;
      }
    }

    public int Attacker_strategy
    {
      get
      {
        return _attacker_strategy;
      }
      set
      {
        __isset.attacker_strategy = true;
        this._attacker_strategy = value;
      }
    }

    public string Attacker_strategy_name
    {
      get
      {
        return _attacker_strategy_name;
      }
      set
      {
        __isset.attacker_strategy_name = true;
        this._attacker_strategy_name = value;
      }
    }

    public int Attacker_strategy_icon
    {
      get
      {
        return _attacker_strategy_icon;
      }
      set
      {
        __isset.attacker_strategy_icon = true;
        this._attacker_strategy_icon = value;
      }
    }

    public int Target_strategy
    {
      get
      {
        return _target_strategy;
      }
      set
      {
        __isset.target_strategy = true;
        this._target_strategy = value;
      }
    }

    public string Target_strategy_name
    {
      get
      {
        return _target_strategy_name;
      }
      set
      {
        __isset.target_strategy_name = true;
        this._target_strategy_name = value;
      }
    }

    public int Target_strategy_icon
    {
      get
      {
        return _target_strategy_icon;
      }
      set
      {
        __isset.target_strategy_icon = true;
        this._target_strategy_icon = value;
      }
    }

    public byte Strategy_restrain
    {
      get
      {
        return _strategy_restrain;
      }
      set
      {
        __isset.strategy_restrain = true;
        this._strategy_restrain = value;
      }
    }

    public Dictionary<byte, int> AttackerStrategyAttributeMap
    {
      get
      {
        return _attackerStrategyAttributeMap;
      }
      set
      {
        __isset.attackerStrategyAttributeMap = true;
        this._attackerStrategyAttributeMap = value;
      }
    }

    public Dictionary<byte, int> TargetStrategyAttributeMap
    {
      get
      {
        return _targetStrategyAttributeMap;
      }
      set
      {
        __isset.targetStrategyAttributeMap = true;
        this._targetStrategyAttributeMap = value;
      }
    }

    public Dictionary<byte, int> RestrainStrategyAttributeMap
    {
      get
      {
        return _restrainStrategyAttributeMap;
      }
      set
      {
        __isset.restrainStrategyAttributeMap = true;
        this._restrainStrategyAttributeMap = value;
      }
    }

    public int Leader_id
    {
      get
      {
        return _leader_id;
      }
      set
      {
        __isset.leader_id = true;
        this._leader_id = value;
      }
    }

    public int Fight_time
    {
      get
      {
        return _fight_time;
      }
      set
      {
        __isset.fight_time = true;
        this._fight_time = value;
      }
    }

    public int Food
    {
      get
      {
        return _food;
      }
      set
      {
        __isset.food = true;
        this._food = value;
      }
    }

    public int Technique
    {
      get
      {
        return _technique;
      }
      set
      {
        __isset.technique = true;
        this._technique = value;
      }
    }

    public int Fragment
    {
      get
      {
        return _fragment;
      }
      set
      {
        __isset.fragment = true;
        this._fragment = value;
      }
    }

    public int Exp
    {
      get
      {
        return _exp;
      }
      set
      {
        __isset.exp = true;
        this._exp = value;
      }
    }

    public List<PlayerFightScoreResponse> Defeat_score
    {
      get
      {
        return _defeat_score;
      }
      set
      {
        __isset.defeat_score = true;
        this._defeat_score = value;
      }
    }

    public QuestionResponse QuestionResponse
    {
      get
      {
        return _questionResponse;
      }
      set
      {
        __isset.questionResponse = true;
        this._questionResponse = value;
      }
    }

    public int General_soul
    {
      get
      {
        return _general_soul;
      }
      set
      {
        __isset.general_soul = true;
        this._general_soul = value;
      }
    }

    public int Opration_id
    {
      get
      {
        return _opration_id;
      }
      set
      {
        __isset.opration_id = true;
        this._opration_id = value;
      }
    }

    public List<FightSchemeActionResponse> FightActionSchemeList
    {
      get
      {
        return _fightActionSchemeList;
      }
      set
      {
        __isset.fightActionSchemeList = true;
        this._fightActionSchemeList = value;
      }
    }

    public List<BorrowGeneralResponse> BorrowGeneralList
    {
      get
      {
        return _borrowGeneralList;
      }
      set
      {
        __isset.borrowGeneralList = true;
        this._borrowGeneralList = value;
      }
    }

    public List<int> Attacker_icon
    {
      get
      {
        return _attacker_icon;
      }
      set
      {
        __isset.attacker_icon = true;
        this._attacker_icon = value;
      }
    }

    public List<int> Target_icon
    {
      get
      {
        return _target_icon;
      }
      set
      {
        __isset.target_icon = true;
        this._target_icon = value;
      }
    }

    public int Forces
    {
      get
      {
        return _forces;
      }
      set
      {
        __isset.forces = true;
        this._forces = value;
      }
    }

    public PlunderGarrisonResponse PlunderGarrison
    {
      get
      {
        return _plunderGarrison;
      }
      set
      {
        __isset.plunderGarrison = true;
        this._plunderGarrison = value;
      }
    }

    public List<int> Attacker_banner
    {
      get
      {
        return _attacker_banner;
      }
      set
      {
        __isset.attacker_banner = true;
        this._attacker_banner = value;
      }
    }

    public List<int> Target_banner
    {
      get
      {
        return _target_banner;
      }
      set
      {
        __isset.target_banner = true;
        this._target_banner = value;
      }
    }

    public List<ResourceResponse> ListAward
    {
      get
      {
        return _listAward;
      }
      set
      {
        __isset.listAward = true;
        this._listAward = value;
      }
    }

    public string Fight_share_name
    {
      get
      {
        return _fight_share_name;
      }
      set
      {
        __isset.fight_share_name = true;
        this._fight_share_name = value;
      }
    }

    public List<FightStrategyResponse> ListFightStrategy
    {
      get
      {
        return _listFightStrategy;
      }
      set
      {
        __isset.listFightStrategy = true;
        this._listFightStrategy = value;
      }
    }

    public byte IsFightStrategy
    {
      get
      {
        return _isFightStrategy;
      }
      set
      {
        __isset.isFightStrategy = true;
        this._isFightStrategy = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool isSucc;
      public bool result_type;
      public bool fight_describe;
      public bool attackerLoss;
      public bool targetLoss;
      public bool attackerFriend;
      public bool targetFriend;
      public bool fightActionList;
      public bool attackerName;
      public bool targetName;
      public bool id;
      public bool exploit;
      public bool prestige;
      public bool itemID;
      public bool trait;
      public bool itemImage;
      public bool itemName;
      public bool scene;
      public bool money;
      public bool isLast;
      public bool isPass;
      public bool attacker_fighting_capacity;
      public bool target_fighting_capacity;
      public bool adam_war;
      public bool general_id;
      public bool attacker_strategy;
      public bool attacker_strategy_name;
      public bool attacker_strategy_icon;
      public bool target_strategy;
      public bool target_strategy_name;
      public bool target_strategy_icon;
      public bool strategy_restrain;
      public bool attackerStrategyAttributeMap;
      public bool targetStrategyAttributeMap;
      public bool restrainStrategyAttributeMap;
      public bool leader_id;
      public bool fight_time;
      public bool food;
      public bool technique;
      public bool fragment;
      public bool exp;
      public bool defeat_score;
      public bool questionResponse;
      public bool general_soul;
      public bool opration_id;
      public bool fightActionSchemeList;
      public bool borrowGeneralList;
      public bool attacker_icon;
      public bool target_icon;
      public bool forces;
      public bool plunderGarrison;
      public bool attacker_banner;
      public bool target_banner;
      public bool listAward;
      public bool fight_share_name;
      public bool listFightStrategy;
      public bool isFightStrategy;
    }

    public PlayerFightResponse() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Bool) {
              IsSucc = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Byte) {
              Result_type = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              Fight_describe = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              AttackerLoss = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              TargetLoss = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.Map) {
              {
                AttackerFriend = new Dictionary<byte, FightFriendDataResponse>();
                TMap _map132 = iprot.ReadMapBegin();
                for( int _i133 = 0; _i133 < _map132.Count; ++_i133)
                {
                  byte _key134;
                  FightFriendDataResponse _val135;
                  _key134 = iprot.ReadByte();
                  _val135 = new FightFriendDataResponse();
                  _val135.Read(iprot);
                  AttackerFriend[_key134] = _val135;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.Map) {
              {
                TargetFriend = new Dictionary<byte, FightFriendDataResponse>();
                TMap _map136 = iprot.ReadMapBegin();
                for( int _i137 = 0; _i137 < _map136.Count; ++_i137)
                {
                  byte _key138;
                  FightFriendDataResponse _val139;
                  _key138 = iprot.ReadByte();
                  _val139 = new FightFriendDataResponse();
                  _val139.Read(iprot);
                  TargetFriend[_key138] = _val139;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.List) {
              {
                FightActionList = new List<FightActionResponse>();
                TList _list140 = iprot.ReadListBegin();
                for( int _i141 = 0; _i141 < _list140.Count; ++_i141)
                {
                  FightActionResponse _elem142 = new FightActionResponse();
                  _elem142 = new FightActionResponse();
                  _elem142.Read(iprot);
                  FightActionList.Add(_elem142);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.String) {
              AttackerName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.String) {
              TargetName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.I32) {
              Id = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.I32) {
              Exploit = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.I32) {
              Prestige = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 14:
            if (field.Type == TType.I32) {
              ItemID = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 15:
            if (field.Type == TType.Byte) {
              Trait = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 16:
            if (field.Type == TType.I32) {
              ItemImage = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 17:
            if (field.Type == TType.String) {
              ItemName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 18:
            if (field.Type == TType.I32) {
              Scene = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 19:
            if (field.Type == TType.I32) {
              Money = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 20:
            if (field.Type == TType.Bool) {
              IsLast = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 21:
            if (field.Type == TType.Bool) {
              IsPass = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 22:
            if (field.Type == TType.I32) {
              Attacker_fighting_capacity = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 23:
            if (field.Type == TType.I32) {
              Target_fighting_capacity = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 24:
            if (field.Type == TType.I32) {
              Adam_war = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 25:
            if (field.Type == TType.I32) {
              General_id = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 26:
            if (field.Type == TType.I32) {
              Attacker_strategy = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 27:
            if (field.Type == TType.String) {
              Attacker_strategy_name = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 28:
            if (field.Type == TType.I32) {
              Attacker_strategy_icon = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 29:
            if (field.Type == TType.I32) {
              Target_strategy = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 30:
            if (field.Type == TType.String) {
              Target_strategy_name = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 31:
            if (field.Type == TType.I32) {
              Target_strategy_icon = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 32:
            if (field.Type == TType.Byte) {
              Strategy_restrain = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 33:
            if (field.Type == TType.Map) {
              {
                AttackerStrategyAttributeMap = new Dictionary<byte, int>();
                TMap _map143 = iprot.ReadMapBegin();
                for( int _i144 = 0; _i144 < _map143.Count; ++_i144)
                {
                  byte _key145;
                  int _val146;
                  _key145 = iprot.ReadByte();
                  _val146 = iprot.ReadI32();
                  AttackerStrategyAttributeMap[_key145] = _val146;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 34:
            if (field.Type == TType.Map) {
              {
                TargetStrategyAttributeMap = new Dictionary<byte, int>();
                TMap _map147 = iprot.ReadMapBegin();
                for( int _i148 = 0; _i148 < _map147.Count; ++_i148)
                {
                  byte _key149;
                  int _val150;
                  _key149 = iprot.ReadByte();
                  _val150 = iprot.ReadI32();
                  TargetStrategyAttributeMap[_key149] = _val150;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 35:
            if (field.Type == TType.Map) {
              {
                RestrainStrategyAttributeMap = new Dictionary<byte, int>();
                TMap _map151 = iprot.ReadMapBegin();
                for( int _i152 = 0; _i152 < _map151.Count; ++_i152)
                {
                  byte _key153;
                  int _val154;
                  _key153 = iprot.ReadByte();
                  _val154 = iprot.ReadI32();
                  RestrainStrategyAttributeMap[_key153] = _val154;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 36:
            if (field.Type == TType.I32) {
              Leader_id = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 37:
            if (field.Type == TType.I32) {
              Fight_time = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 38:
            if (field.Type == TType.I32) {
              Food = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 39:
            if (field.Type == TType.I32) {
              Technique = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 40:
            if (field.Type == TType.I32) {
              Fragment = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 41:
            if (field.Type == TType.I32) {
              Exp = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 42:
            if (field.Type == TType.List) {
              {
                Defeat_score = new List<PlayerFightScoreResponse>();
                TList _list155 = iprot.ReadListBegin();
                for( int _i156 = 0; _i156 < _list155.Count; ++_i156)
                {
                  PlayerFightScoreResponse _elem157 = new PlayerFightScoreResponse();
                  _elem157 = new PlayerFightScoreResponse();
                  _elem157.Read(iprot);
                  Defeat_score.Add(_elem157);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 43:
            if (field.Type == TType.Struct) {
              QuestionResponse = new QuestionResponse();
              QuestionResponse.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 44:
            if (field.Type == TType.I32) {
              General_soul = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 45:
            if (field.Type == TType.I32) {
              Opration_id = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 46:
            if (field.Type == TType.List) {
              {
                FightActionSchemeList = new List<FightSchemeActionResponse>();
                TList _list158 = iprot.ReadListBegin();
                for( int _i159 = 0; _i159 < _list158.Count; ++_i159)
                {
                  FightSchemeActionResponse _elem160 = new FightSchemeActionResponse();
                  _elem160 = new FightSchemeActionResponse();
                  _elem160.Read(iprot);
                  FightActionSchemeList.Add(_elem160);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 47:
            if (field.Type == TType.List) {
              {
                BorrowGeneralList = new List<BorrowGeneralResponse>();
                TList _list161 = iprot.ReadListBegin();
                for( int _i162 = 0; _i162 < _list161.Count; ++_i162)
                {
                  BorrowGeneralResponse _elem163 = new BorrowGeneralResponse();
                  _elem163 = new BorrowGeneralResponse();
                  _elem163.Read(iprot);
                  BorrowGeneralList.Add(_elem163);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 48:
            if (field.Type == TType.List) {
              {
                Attacker_icon = new List<int>();
                TList _list164 = iprot.ReadListBegin();
                for( int _i165 = 0; _i165 < _list164.Count; ++_i165)
                {
                  int _elem166 = 0;
                  _elem166 = iprot.ReadI32();
                  Attacker_icon.Add(_elem166);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 49:
            if (field.Type == TType.List) {
              {
                Target_icon = new List<int>();
                TList _list167 = iprot.ReadListBegin();
                for( int _i168 = 0; _i168 < _list167.Count; ++_i168)
                {
                  int _elem169 = 0;
                  _elem169 = iprot.ReadI32();
                  Target_icon.Add(_elem169);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 50:
            if (field.Type == TType.I32) {
              Forces = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 51:
            if (field.Type == TType.Struct) {
              PlunderGarrison = new PlunderGarrisonResponse();
              PlunderGarrison.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 52:
            if (field.Type == TType.List) {
              {
                Attacker_banner = new List<int>();
                TList _list170 = iprot.ReadListBegin();
                for( int _i171 = 0; _i171 < _list170.Count; ++_i171)
                {
                  int _elem172 = 0;
                  _elem172 = iprot.ReadI32();
                  Attacker_banner.Add(_elem172);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 53:
            if (field.Type == TType.List) {
              {
                Target_banner = new List<int>();
                TList _list173 = iprot.ReadListBegin();
                for( int _i174 = 0; _i174 < _list173.Count; ++_i174)
                {
                  int _elem175 = 0;
                  _elem175 = iprot.ReadI32();
                  Target_banner.Add(_elem175);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 54:
            if (field.Type == TType.List) {
              {
                ListAward = new List<ResourceResponse>();
                TList _list176 = iprot.ReadListBegin();
                for( int _i177 = 0; _i177 < _list176.Count; ++_i177)
                {
                  ResourceResponse _elem178 = new ResourceResponse();
                  _elem178 = new ResourceResponse();
                  _elem178.Read(iprot);
                  ListAward.Add(_elem178);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 55:
            if (field.Type == TType.String) {
              Fight_share_name = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 56:
            if (field.Type == TType.List) {
              {
                ListFightStrategy = new List<FightStrategyResponse>();
                TList _list179 = iprot.ReadListBegin();
                for( int _i180 = 0; _i180 < _list179.Count; ++_i180)
                {
                  FightStrategyResponse _elem181 = new FightStrategyResponse();
                  _elem181 = new FightStrategyResponse();
                  _elem181.Read(iprot);
                  ListFightStrategy.Add(_elem181);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 57:
            if (field.Type == TType.Byte) {
              IsFightStrategy = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("PlayerFightResponse");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.isSucc) {
        field.Name = "isSucc";
        field.Type = TType.Bool;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(IsSucc);
        oprot.WriteFieldEnd();
      }
      if (__isset.result_type) {
        field.Name = "result_type";
        field.Type = TType.Byte;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(Result_type);
        oprot.WriteFieldEnd();
      }
      if (Fight_describe != null && __isset.fight_describe) {
        field.Name = "fight_describe";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Fight_describe);
        oprot.WriteFieldEnd();
      }
      if (__isset.attackerLoss) {
        field.Name = "attackerLoss";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(AttackerLoss);
        oprot.WriteFieldEnd();
      }
      if (__isset.targetLoss) {
        field.Name = "targetLoss";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(TargetLoss);
        oprot.WriteFieldEnd();
      }
      if (AttackerFriend != null && __isset.attackerFriend) {
        field.Name = "attackerFriend";
        field.Type = TType.Map;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.Byte, TType.Struct, AttackerFriend.Count));
          foreach (byte _iter182 in AttackerFriend.Keys)
          {
            oprot.WriteByte(_iter182);
            AttackerFriend[_iter182].Write(oprot);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (TargetFriend != null && __isset.targetFriend) {
        field.Name = "targetFriend";
        field.Type = TType.Map;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.Byte, TType.Struct, TargetFriend.Count));
          foreach (byte _iter183 in TargetFriend.Keys)
          {
            oprot.WriteByte(_iter183);
            TargetFriend[_iter183].Write(oprot);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (FightActionList != null && __isset.fightActionList) {
        field.Name = "fightActionList";
        field.Type = TType.List;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, FightActionList.Count));
          foreach (FightActionResponse _iter184 in FightActionList)
          {
            _iter184.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (AttackerName != null && __isset.attackerName) {
        field.Name = "attackerName";
        field.Type = TType.String;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(AttackerName);
        oprot.WriteFieldEnd();
      }
      if (TargetName != null && __isset.targetName) {
        field.Name = "targetName";
        field.Type = TType.String;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(TargetName);
        oprot.WriteFieldEnd();
      }
      if (__isset.id) {
        field.Name = "id";
        field.Type = TType.I32;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Id);
        oprot.WriteFieldEnd();
      }
      if (__isset.exploit) {
        field.Name = "exploit";
        field.Type = TType.I32;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Exploit);
        oprot.WriteFieldEnd();
      }
      if (__isset.prestige) {
        field.Name = "prestige";
        field.Type = TType.I32;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Prestige);
        oprot.WriteFieldEnd();
      }
      if (__isset.itemID) {
        field.Name = "itemID";
        field.Type = TType.I32;
        field.ID = 14;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ItemID);
        oprot.WriteFieldEnd();
      }
      if (__isset.trait) {
        field.Name = "trait";
        field.Type = TType.Byte;
        field.ID = 15;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(Trait);
        oprot.WriteFieldEnd();
      }
      if (__isset.itemImage) {
        field.Name = "itemImage";
        field.Type = TType.I32;
        field.ID = 16;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ItemImage);
        oprot.WriteFieldEnd();
      }
      if (ItemName != null && __isset.itemName) {
        field.Name = "itemName";
        field.Type = TType.String;
        field.ID = 17;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ItemName);
        oprot.WriteFieldEnd();
      }
      if (__isset.scene) {
        field.Name = "scene";
        field.Type = TType.I32;
        field.ID = 18;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Scene);
        oprot.WriteFieldEnd();
      }
      if (__isset.money) {
        field.Name = "money";
        field.Type = TType.I32;
        field.ID = 19;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Money);
        oprot.WriteFieldEnd();
      }
      if (__isset.isLast) {
        field.Name = "isLast";
        field.Type = TType.Bool;
        field.ID = 20;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(IsLast);
        oprot.WriteFieldEnd();
      }
      if (__isset.isPass) {
        field.Name = "isPass";
        field.Type = TType.Bool;
        field.ID = 21;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(IsPass);
        oprot.WriteFieldEnd();
      }
      if (__isset.attacker_fighting_capacity) {
        field.Name = "attacker_fighting_capacity";
        field.Type = TType.I32;
        field.ID = 22;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Attacker_fighting_capacity);
        oprot.WriteFieldEnd();
      }
      if (__isset.target_fighting_capacity) {
        field.Name = "target_fighting_capacity";
        field.Type = TType.I32;
        field.ID = 23;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Target_fighting_capacity);
        oprot.WriteFieldEnd();
      }
      if (__isset.adam_war) {
        field.Name = "adam_war";
        field.Type = TType.I32;
        field.ID = 24;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Adam_war);
        oprot.WriteFieldEnd();
      }
      if (__isset.general_id) {
        field.Name = "general_id";
        field.Type = TType.I32;
        field.ID = 25;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(General_id);
        oprot.WriteFieldEnd();
      }
      if (__isset.attacker_strategy) {
        field.Name = "attacker_strategy";
        field.Type = TType.I32;
        field.ID = 26;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Attacker_strategy);
        oprot.WriteFieldEnd();
      }
      if (Attacker_strategy_name != null && __isset.attacker_strategy_name) {
        field.Name = "attacker_strategy_name";
        field.Type = TType.String;
        field.ID = 27;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Attacker_strategy_name);
        oprot.WriteFieldEnd();
      }
      if (__isset.attacker_strategy_icon) {
        field.Name = "attacker_strategy_icon";
        field.Type = TType.I32;
        field.ID = 28;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Attacker_strategy_icon);
        oprot.WriteFieldEnd();
      }
      if (__isset.target_strategy) {
        field.Name = "target_strategy";
        field.Type = TType.I32;
        field.ID = 29;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Target_strategy);
        oprot.WriteFieldEnd();
      }
      if (Target_strategy_name != null && __isset.target_strategy_name) {
        field.Name = "target_strategy_name";
        field.Type = TType.String;
        field.ID = 30;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Target_strategy_name);
        oprot.WriteFieldEnd();
      }
      if (__isset.target_strategy_icon) {
        field.Name = "target_strategy_icon";
        field.Type = TType.I32;
        field.ID = 31;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Target_strategy_icon);
        oprot.WriteFieldEnd();
      }
      if (__isset.strategy_restrain) {
        field.Name = "strategy_restrain";
        field.Type = TType.Byte;
        field.ID = 32;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(Strategy_restrain);
        oprot.WriteFieldEnd();
      }
      if (AttackerStrategyAttributeMap != null && __isset.attackerStrategyAttributeMap) {
        field.Name = "attackerStrategyAttributeMap";
        field.Type = TType.Map;
        field.ID = 33;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.Byte, TType.I32, AttackerStrategyAttributeMap.Count));
          foreach (byte _iter185 in AttackerStrategyAttributeMap.Keys)
          {
            oprot.WriteByte(_iter185);
            oprot.WriteI32(AttackerStrategyAttributeMap[_iter185]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (TargetStrategyAttributeMap != null && __isset.targetStrategyAttributeMap) {
        field.Name = "targetStrategyAttributeMap";
        field.Type = TType.Map;
        field.ID = 34;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.Byte, TType.I32, TargetStrategyAttributeMap.Count));
          foreach (byte _iter186 in TargetStrategyAttributeMap.Keys)
          {
            oprot.WriteByte(_iter186);
            oprot.WriteI32(TargetStrategyAttributeMap[_iter186]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (RestrainStrategyAttributeMap != null && __isset.restrainStrategyAttributeMap) {
        field.Name = "restrainStrategyAttributeMap";
        field.Type = TType.Map;
        field.ID = 35;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.Byte, TType.I32, RestrainStrategyAttributeMap.Count));
          foreach (byte _iter187 in RestrainStrategyAttributeMap.Keys)
          {
            oprot.WriteByte(_iter187);
            oprot.WriteI32(RestrainStrategyAttributeMap[_iter187]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.leader_id) {
        field.Name = "leader_id";
        field.Type = TType.I32;
        field.ID = 36;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Leader_id);
        oprot.WriteFieldEnd();
      }
      if (__isset.fight_time) {
        field.Name = "fight_time";
        field.Type = TType.I32;
        field.ID = 37;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Fight_time);
        oprot.WriteFieldEnd();
      }
      if (__isset.food) {
        field.Name = "food";
        field.Type = TType.I32;
        field.ID = 38;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Food);
        oprot.WriteFieldEnd();
      }
      if (__isset.technique) {
        field.Name = "technique";
        field.Type = TType.I32;
        field.ID = 39;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Technique);
        oprot.WriteFieldEnd();
      }
      if (__isset.fragment) {
        field.Name = "fragment";
        field.Type = TType.I32;
        field.ID = 40;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Fragment);
        oprot.WriteFieldEnd();
      }
      if (__isset.exp) {
        field.Name = "exp";
        field.Type = TType.I32;
        field.ID = 41;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Exp);
        oprot.WriteFieldEnd();
      }
      if (Defeat_score != null && __isset.defeat_score) {
        field.Name = "defeat_score";
        field.Type = TType.List;
        field.ID = 42;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Defeat_score.Count));
          foreach (PlayerFightScoreResponse _iter188 in Defeat_score)
          {
            _iter188.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (QuestionResponse != null && __isset.questionResponse) {
        field.Name = "questionResponse";
        field.Type = TType.Struct;
        field.ID = 43;
        oprot.WriteFieldBegin(field);
        QuestionResponse.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (__isset.general_soul) {
        field.Name = "general_soul";
        field.Type = TType.I32;
        field.ID = 44;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(General_soul);
        oprot.WriteFieldEnd();
      }
      if (__isset.opration_id) {
        field.Name = "opration_id";
        field.Type = TType.I32;
        field.ID = 45;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Opration_id);
        oprot.WriteFieldEnd();
      }
      if (FightActionSchemeList != null && __isset.fightActionSchemeList) {
        field.Name = "fightActionSchemeList";
        field.Type = TType.List;
        field.ID = 46;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, FightActionSchemeList.Count));
          foreach (FightSchemeActionResponse _iter189 in FightActionSchemeList)
          {
            _iter189.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (BorrowGeneralList != null && __isset.borrowGeneralList) {
        field.Name = "borrowGeneralList";
        field.Type = TType.List;
        field.ID = 47;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, BorrowGeneralList.Count));
          foreach (BorrowGeneralResponse _iter190 in BorrowGeneralList)
          {
            _iter190.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Attacker_icon != null && __isset.attacker_icon) {
        field.Name = "attacker_icon";
        field.Type = TType.List;
        field.ID = 48;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.I32, Attacker_icon.Count));
          foreach (int _iter191 in Attacker_icon)
          {
            oprot.WriteI32(_iter191);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Target_icon != null && __isset.target_icon) {
        field.Name = "target_icon";
        field.Type = TType.List;
        field.ID = 49;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.I32, Target_icon.Count));
          foreach (int _iter192 in Target_icon)
          {
            oprot.WriteI32(_iter192);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.forces) {
        field.Name = "forces";
        field.Type = TType.I32;
        field.ID = 50;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Forces);
        oprot.WriteFieldEnd();
      }
      if (PlunderGarrison != null && __isset.plunderGarrison) {
        field.Name = "plunderGarrison";
        field.Type = TType.Struct;
        field.ID = 51;
        oprot.WriteFieldBegin(field);
        PlunderGarrison.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (Attacker_banner != null && __isset.attacker_banner) {
        field.Name = "attacker_banner";
        field.Type = TType.List;
        field.ID = 52;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.I32, Attacker_banner.Count));
          foreach (int _iter193 in Attacker_banner)
          {
            oprot.WriteI32(_iter193);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Target_banner != null && __isset.target_banner) {
        field.Name = "target_banner";
        field.Type = TType.List;
        field.ID = 53;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.I32, Target_banner.Count));
          foreach (int _iter194 in Target_banner)
          {
            oprot.WriteI32(_iter194);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (ListAward != null && __isset.listAward) {
        field.Name = "listAward";
        field.Type = TType.List;
        field.ID = 54;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, ListAward.Count));
          foreach (ResourceResponse _iter195 in ListAward)
          {
            _iter195.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Fight_share_name != null && __isset.fight_share_name) {
        field.Name = "fight_share_name";
        field.Type = TType.String;
        field.ID = 55;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Fight_share_name);
        oprot.WriteFieldEnd();
      }
      if (ListFightStrategy != null && __isset.listFightStrategy) {
        field.Name = "listFightStrategy";
        field.Type = TType.List;
        field.ID = 56;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, ListFightStrategy.Count));
          foreach (FightStrategyResponse _iter196 in ListFightStrategy)
          {
            _iter196.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.isFightStrategy) {
        field.Name = "isFightStrategy";
        field.Type = TType.Byte;
        field.ID = 57;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(IsFightStrategy);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("PlayerFightResponse(");
      sb.Append("IsSucc: ");
      sb.Append(IsSucc);
      sb.Append(",Result_type: ");
      sb.Append(Result_type);
      sb.Append(",Fight_describe: ");
      sb.Append(Fight_describe);
      sb.Append(",AttackerLoss: ");
      sb.Append(AttackerLoss);
      sb.Append(",TargetLoss: ");
      sb.Append(TargetLoss);
      sb.Append(",AttackerFriend: ");
      sb.Append(AttackerFriend);
      sb.Append(",TargetFriend: ");
      sb.Append(TargetFriend);
      sb.Append(",FightActionList: ");
      sb.Append(FightActionList);
      sb.Append(",AttackerName: ");
      sb.Append(AttackerName);
      sb.Append(",TargetName: ");
      sb.Append(TargetName);
      sb.Append(",Id: ");
      sb.Append(Id);
      sb.Append(",Exploit: ");
      sb.Append(Exploit);
      sb.Append(",Prestige: ");
      sb.Append(Prestige);
      sb.Append(",ItemID: ");
      sb.Append(ItemID);
      sb.Append(",Trait: ");
      sb.Append(Trait);
      sb.Append(",ItemImage: ");
      sb.Append(ItemImage);
      sb.Append(",ItemName: ");
      sb.Append(ItemName);
      sb.Append(",Scene: ");
      sb.Append(Scene);
      sb.Append(",Money: ");
      sb.Append(Money);
      sb.Append(",IsLast: ");
      sb.Append(IsLast);
      sb.Append(",IsPass: ");
      sb.Append(IsPass);
      sb.Append(",Attacker_fighting_capacity: ");
      sb.Append(Attacker_fighting_capacity);
      sb.Append(",Target_fighting_capacity: ");
      sb.Append(Target_fighting_capacity);
      sb.Append(",Adam_war: ");
      sb.Append(Adam_war);
      sb.Append(",General_id: ");
      sb.Append(General_id);
      sb.Append(",Attacker_strategy: ");
      sb.Append(Attacker_strategy);
      sb.Append(",Attacker_strategy_name: ");
      sb.Append(Attacker_strategy_name);
      sb.Append(",Attacker_strategy_icon: ");
      sb.Append(Attacker_strategy_icon);
      sb.Append(",Target_strategy: ");
      sb.Append(Target_strategy);
      sb.Append(",Target_strategy_name: ");
      sb.Append(Target_strategy_name);
      sb.Append(",Target_strategy_icon: ");
      sb.Append(Target_strategy_icon);
      sb.Append(",Strategy_restrain: ");
      sb.Append(Strategy_restrain);
      sb.Append(",AttackerStrategyAttributeMap: ");
      sb.Append(AttackerStrategyAttributeMap);
      sb.Append(",TargetStrategyAttributeMap: ");
      sb.Append(TargetStrategyAttributeMap);
      sb.Append(",RestrainStrategyAttributeMap: ");
      sb.Append(RestrainStrategyAttributeMap);
      sb.Append(",Leader_id: ");
      sb.Append(Leader_id);
      sb.Append(",Fight_time: ");
      sb.Append(Fight_time);
      sb.Append(",Food: ");
      sb.Append(Food);
      sb.Append(",Technique: ");
      sb.Append(Technique);
      sb.Append(",Fragment: ");
      sb.Append(Fragment);
      sb.Append(",Exp: ");
      sb.Append(Exp);
      sb.Append(",Defeat_score: ");
      sb.Append(Defeat_score);
      sb.Append(",QuestionResponse: ");
      sb.Append(QuestionResponse== null ? "<null>" : QuestionResponse.ToString());
      sb.Append(",General_soul: ");
      sb.Append(General_soul);
      sb.Append(",Opration_id: ");
      sb.Append(Opration_id);
      sb.Append(",FightActionSchemeList: ");
      sb.Append(FightActionSchemeList);
      sb.Append(",BorrowGeneralList: ");
      sb.Append(BorrowGeneralList);
      sb.Append(",Attacker_icon: ");
      sb.Append(Attacker_icon);
      sb.Append(",Target_icon: ");
      sb.Append(Target_icon);
      sb.Append(",Forces: ");
      sb.Append(Forces);
      sb.Append(",PlunderGarrison: ");
      sb.Append(PlunderGarrison== null ? "<null>" : PlunderGarrison.ToString());
      sb.Append(",Attacker_banner: ");
      sb.Append(Attacker_banner);
      sb.Append(",Target_banner: ");
      sb.Append(Target_banner);
      sb.Append(",ListAward: ");
      sb.Append(ListAward);
      sb.Append(",Fight_share_name: ");
      sb.Append(Fight_share_name);
      sb.Append(",ListFightStrategy: ");
      sb.Append(ListFightStrategy);
      sb.Append(",IsFightStrategy: ");
      sb.Append(IsFightStrategy);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
