/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace com.think.messages
{

  [Serializable]
  public partial class PlayerMapItemsResponse : TBase
  {
    private int _item_id;
    private string _item;
    private short _item_num;
    private List<string> _listResource;
    private string _gold;
    private int _map_id;

    public int Item_id
    {
      get
      {
        return _item_id;
      }
      set
      {
        __isset.item_id = true;
        this._item_id = value;
      }
    }

    public string Item
    {
      get
      {
        return _item;
      }
      set
      {
        __isset.item = true;
        this._item = value;
      }
    }

    public short Item_num
    {
      get
      {
        return _item_num;
      }
      set
      {
        __isset.item_num = true;
        this._item_num = value;
      }
    }

    public List<string> ListResource
    {
      get
      {
        return _listResource;
      }
      set
      {
        __isset.listResource = true;
        this._listResource = value;
      }
    }

    public string Gold
    {
      get
      {
        return _gold;
      }
      set
      {
        __isset.gold = true;
        this._gold = value;
      }
    }

    public int Map_id
    {
      get
      {
        return _map_id;
      }
      set
      {
        __isset.map_id = true;
        this._map_id = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool item_id;
      public bool item;
      public bool item_num;
      public bool listResource;
      public bool gold;
      public bool map_id;
    }

    public PlayerMapItemsResponse() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              Item_id = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Item = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I16) {
              Item_num = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.List) {
              {
                ListResource = new List<string>();
                TList _list394 = iprot.ReadListBegin();
                for( int _i395 = 0; _i395 < _list394.Count; ++_i395)
                {
                  string _elem396 = null;
                  _elem396 = iprot.ReadString();
                  ListResource.Add(_elem396);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              Gold = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              Map_id = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("PlayerMapItemsResponse");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.item_id) {
        field.Name = "item_id";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Item_id);
        oprot.WriteFieldEnd();
      }
      if (Item != null && __isset.item) {
        field.Name = "item";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Item);
        oprot.WriteFieldEnd();
      }
      if (__isset.item_num) {
        field.Name = "item_num";
        field.Type = TType.I16;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(Item_num);
        oprot.WriteFieldEnd();
      }
      if (ListResource != null && __isset.listResource) {
        field.Name = "listResource";
        field.Type = TType.List;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, ListResource.Count));
          foreach (string _iter397 in ListResource)
          {
            oprot.WriteString(_iter397);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Gold != null && __isset.gold) {
        field.Name = "gold";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Gold);
        oprot.WriteFieldEnd();
      }
      if (__isset.map_id) {
        field.Name = "map_id";
        field.Type = TType.I32;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Map_id);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("PlayerMapItemsResponse(");
      sb.Append("Item_id: ");
      sb.Append(Item_id);
      sb.Append(",Item: ");
      sb.Append(Item);
      sb.Append(",Item_num: ");
      sb.Append(Item_num);
      sb.Append(",ListResource: ");
      sb.Append(ListResource);
      sb.Append(",Gold: ");
      sb.Append(Gold);
      sb.Append(",Map_id: ");
      sb.Append(Map_id);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
