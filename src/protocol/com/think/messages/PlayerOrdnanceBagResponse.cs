/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace com.think.messages
{

  [Serializable]
  public partial class PlayerOrdnanceBagResponse : TBase
  {
    private byte _type;
    private int _size;
    private List<OrdnanceBagResponse> _PlayerOrdnanceBag;
    private Dictionary<byte, OrdnanceBusinessmanResponse> _ordnanceBusinessman;
    private string _next_size;

    public byte Type
    {
      get
      {
        return _type;
      }
      set
      {
        __isset.type = true;
        this._type = value;
      }
    }

    public int Size
    {
      get
      {
        return _size;
      }
      set
      {
        __isset.size = true;
        this._size = value;
      }
    }

    public List<OrdnanceBagResponse> PlayerOrdnanceBag
    {
      get
      {
        return _PlayerOrdnanceBag;
      }
      set
      {
        __isset.PlayerOrdnanceBag = true;
        this._PlayerOrdnanceBag = value;
      }
    }

    public Dictionary<byte, OrdnanceBusinessmanResponse> OrdnanceBusinessman
    {
      get
      {
        return _ordnanceBusinessman;
      }
      set
      {
        __isset.ordnanceBusinessman = true;
        this._ordnanceBusinessman = value;
      }
    }

    public string Next_size
    {
      get
      {
        return _next_size;
      }
      set
      {
        __isset.next_size = true;
        this._next_size = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool type;
      public bool size;
      public bool PlayerOrdnanceBag;
      public bool ordnanceBusinessman;
      public bool next_size;
    }

    public PlayerOrdnanceBagResponse() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Byte) {
              Type = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              Size = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.List) {
              {
                PlayerOrdnanceBag = new List<OrdnanceBagResponse>();
                TList _list353 = iprot.ReadListBegin();
                for( int _i354 = 0; _i354 < _list353.Count; ++_i354)
                {
                  OrdnanceBagResponse _elem355 = new OrdnanceBagResponse();
                  _elem355 = new OrdnanceBagResponse();
                  _elem355.Read(iprot);
                  PlayerOrdnanceBag.Add(_elem355);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Map) {
              {
                OrdnanceBusinessman = new Dictionary<byte, OrdnanceBusinessmanResponse>();
                TMap _map356 = iprot.ReadMapBegin();
                for( int _i357 = 0; _i357 < _map356.Count; ++_i357)
                {
                  byte _key358;
                  OrdnanceBusinessmanResponse _val359;
                  _key358 = iprot.ReadByte();
                  _val359 = new OrdnanceBusinessmanResponse();
                  _val359.Read(iprot);
                  OrdnanceBusinessman[_key358] = _val359;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              Next_size = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("PlayerOrdnanceBagResponse");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.type) {
        field.Name = "type";
        field.Type = TType.Byte;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(Type);
        oprot.WriteFieldEnd();
      }
      if (__isset.size) {
        field.Name = "size";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Size);
        oprot.WriteFieldEnd();
      }
      if (PlayerOrdnanceBag != null && __isset.PlayerOrdnanceBag) {
        field.Name = "PlayerOrdnanceBag";
        field.Type = TType.List;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, PlayerOrdnanceBag.Count));
          foreach (OrdnanceBagResponse _iter360 in PlayerOrdnanceBag)
          {
            _iter360.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (OrdnanceBusinessman != null && __isset.ordnanceBusinessman) {
        field.Name = "ordnanceBusinessman";
        field.Type = TType.Map;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.Byte, TType.Struct, OrdnanceBusinessman.Count));
          foreach (byte _iter361 in OrdnanceBusinessman.Keys)
          {
            oprot.WriteByte(_iter361);
            OrdnanceBusinessman[_iter361].Write(oprot);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Next_size != null && __isset.next_size) {
        field.Name = "next_size";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Next_size);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("PlayerOrdnanceBagResponse(");
      sb.Append("Type: ");
      sb.Append(Type);
      sb.Append(",Size: ");
      sb.Append(Size);
      sb.Append(",PlayerOrdnanceBag: ");
      sb.Append(PlayerOrdnanceBag);
      sb.Append(",OrdnanceBusinessman: ");
      sb.Append(OrdnanceBusinessman);
      sb.Append(",Next_size: ");
      sb.Append(Next_size);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
