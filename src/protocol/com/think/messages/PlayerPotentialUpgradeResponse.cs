/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace com.think.messages
{

  [Serializable]
  public partial class PlayerPotentialUpgradeResponse : TBase
  {
    private PotentialResponse _potential;
    private byte _freeAddPotential;
    private int _gold;
    private int _addValue;

    public PotentialResponse Potential
    {
      get
      {
        return _potential;
      }
      set
      {
        __isset.potential = true;
        this._potential = value;
      }
    }

    public byte FreeAddPotential
    {
      get
      {
        return _freeAddPotential;
      }
      set
      {
        __isset.freeAddPotential = true;
        this._freeAddPotential = value;
      }
    }

    public int Gold
    {
      get
      {
        return _gold;
      }
      set
      {
        __isset.gold = true;
        this._gold = value;
      }
    }

    public int AddValue
    {
      get
      {
        return _addValue;
      }
      set
      {
        __isset.addValue = true;
        this._addValue = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool potential;
      public bool freeAddPotential;
      public bool gold;
      public bool addValue;
    }

    public PlayerPotentialUpgradeResponse() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct) {
              Potential = new PotentialResponse();
              Potential.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Byte) {
              FreeAddPotential = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              Gold = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              AddValue = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("PlayerPotentialUpgradeResponse");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Potential != null && __isset.potential) {
        field.Name = "potential";
        field.Type = TType.Struct;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        Potential.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (__isset.freeAddPotential) {
        field.Name = "freeAddPotential";
        field.Type = TType.Byte;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(FreeAddPotential);
        oprot.WriteFieldEnd();
      }
      if (__isset.gold) {
        field.Name = "gold";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Gold);
        oprot.WriteFieldEnd();
      }
      if (__isset.addValue) {
        field.Name = "addValue";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(AddValue);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("PlayerPotentialUpgradeResponse(");
      sb.Append("Potential: ");
      sb.Append(Potential== null ? "<null>" : Potential.ToString());
      sb.Append(",FreeAddPotential: ");
      sb.Append(FreeAddPotential);
      sb.Append(",Gold: ");
      sb.Append(Gold);
      sb.Append(",AddValue: ");
      sb.Append(AddValue);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
