/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace com.think.messages
{

  [Serializable]
  public partial class PlayerStrategyResponse : TBase
  {
    private int _strategy_id;
    private string _strategy_name;
    private short _strategy_level;
    private int _consume;
    private Dictionary<byte, int> _attributeMap;
    private List<StrategyRestrainResponse> _restrainList;
    private Dictionary<byte, int> _subjoinAttributeMap;
    private int _icon;
    private bool _isUpgrade;
    private byte _strategy_type;
    private Dictionary<byte, int> _upgradeAttributeMap;
    private Dictionary<byte, int> _upgradeSubjoinAttributeMap;

    public int Strategy_id
    {
      get
      {
        return _strategy_id;
      }
      set
      {
        __isset.strategy_id = true;
        this._strategy_id = value;
      }
    }

    public string Strategy_name
    {
      get
      {
        return _strategy_name;
      }
      set
      {
        __isset.strategy_name = true;
        this._strategy_name = value;
      }
    }

    public short Strategy_level
    {
      get
      {
        return _strategy_level;
      }
      set
      {
        __isset.strategy_level = true;
        this._strategy_level = value;
      }
    }

    public int Consume
    {
      get
      {
        return _consume;
      }
      set
      {
        __isset.consume = true;
        this._consume = value;
      }
    }

    public Dictionary<byte, int> AttributeMap
    {
      get
      {
        return _attributeMap;
      }
      set
      {
        __isset.attributeMap = true;
        this._attributeMap = value;
      }
    }

    public List<StrategyRestrainResponse> RestrainList
    {
      get
      {
        return _restrainList;
      }
      set
      {
        __isset.restrainList = true;
        this._restrainList = value;
      }
    }

    public Dictionary<byte, int> SubjoinAttributeMap
    {
      get
      {
        return _subjoinAttributeMap;
      }
      set
      {
        __isset.subjoinAttributeMap = true;
        this._subjoinAttributeMap = value;
      }
    }

    public int Icon
    {
      get
      {
        return _icon;
      }
      set
      {
        __isset.icon = true;
        this._icon = value;
      }
    }

    public bool IsUpgrade
    {
      get
      {
        return _isUpgrade;
      }
      set
      {
        __isset.isUpgrade = true;
        this._isUpgrade = value;
      }
    }

    public byte Strategy_type
    {
      get
      {
        return _strategy_type;
      }
      set
      {
        __isset.strategy_type = true;
        this._strategy_type = value;
      }
    }

    public Dictionary<byte, int> UpgradeAttributeMap
    {
      get
      {
        return _upgradeAttributeMap;
      }
      set
      {
        __isset.upgradeAttributeMap = true;
        this._upgradeAttributeMap = value;
      }
    }

    public Dictionary<byte, int> UpgradeSubjoinAttributeMap
    {
      get
      {
        return _upgradeSubjoinAttributeMap;
      }
      set
      {
        __isset.upgradeSubjoinAttributeMap = true;
        this._upgradeSubjoinAttributeMap = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool strategy_id;
      public bool strategy_name;
      public bool strategy_level;
      public bool consume;
      public bool attributeMap;
      public bool restrainList;
      public bool subjoinAttributeMap;
      public bool icon;
      public bool isUpgrade;
      public bool strategy_type;
      public bool upgradeAttributeMap;
      public bool upgradeSubjoinAttributeMap;
    }

    public PlayerStrategyResponse() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              Strategy_id = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Strategy_name = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I16) {
              Strategy_level = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              Consume = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Map) {
              {
                AttributeMap = new Dictionary<byte, int>();
                TMap _map480 = iprot.ReadMapBegin();
                for( int _i481 = 0; _i481 < _map480.Count; ++_i481)
                {
                  byte _key482;
                  int _val483;
                  _key482 = iprot.ReadByte();
                  _val483 = iprot.ReadI32();
                  AttributeMap[_key482] = _val483;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.List) {
              {
                RestrainList = new List<StrategyRestrainResponse>();
                TList _list484 = iprot.ReadListBegin();
                for( int _i485 = 0; _i485 < _list484.Count; ++_i485)
                {
                  StrategyRestrainResponse _elem486 = new StrategyRestrainResponse();
                  _elem486 = new StrategyRestrainResponse();
                  _elem486.Read(iprot);
                  RestrainList.Add(_elem486);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.Map) {
              {
                SubjoinAttributeMap = new Dictionary<byte, int>();
                TMap _map487 = iprot.ReadMapBegin();
                for( int _i488 = 0; _i488 < _map487.Count; ++_i488)
                {
                  byte _key489;
                  int _val490;
                  _key489 = iprot.ReadByte();
                  _val490 = iprot.ReadI32();
                  SubjoinAttributeMap[_key489] = _val490;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.I32) {
              Icon = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.Bool) {
              IsUpgrade = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.Byte) {
              Strategy_type = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.Map) {
              {
                UpgradeAttributeMap = new Dictionary<byte, int>();
                TMap _map491 = iprot.ReadMapBegin();
                for( int _i492 = 0; _i492 < _map491.Count; ++_i492)
                {
                  byte _key493;
                  int _val494;
                  _key493 = iprot.ReadByte();
                  _val494 = iprot.ReadI32();
                  UpgradeAttributeMap[_key493] = _val494;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.Map) {
              {
                UpgradeSubjoinAttributeMap = new Dictionary<byte, int>();
                TMap _map495 = iprot.ReadMapBegin();
                for( int _i496 = 0; _i496 < _map495.Count; ++_i496)
                {
                  byte _key497;
                  int _val498;
                  _key497 = iprot.ReadByte();
                  _val498 = iprot.ReadI32();
                  UpgradeSubjoinAttributeMap[_key497] = _val498;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("PlayerStrategyResponse");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.strategy_id) {
        field.Name = "strategy_id";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Strategy_id);
        oprot.WriteFieldEnd();
      }
      if (Strategy_name != null && __isset.strategy_name) {
        field.Name = "strategy_name";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Strategy_name);
        oprot.WriteFieldEnd();
      }
      if (__isset.strategy_level) {
        field.Name = "strategy_level";
        field.Type = TType.I16;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(Strategy_level);
        oprot.WriteFieldEnd();
      }
      if (__isset.consume) {
        field.Name = "consume";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Consume);
        oprot.WriteFieldEnd();
      }
      if (AttributeMap != null && __isset.attributeMap) {
        field.Name = "attributeMap";
        field.Type = TType.Map;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.Byte, TType.I32, AttributeMap.Count));
          foreach (byte _iter499 in AttributeMap.Keys)
          {
            oprot.WriteByte(_iter499);
            oprot.WriteI32(AttributeMap[_iter499]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (RestrainList != null && __isset.restrainList) {
        field.Name = "restrainList";
        field.Type = TType.List;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, RestrainList.Count));
          foreach (StrategyRestrainResponse _iter500 in RestrainList)
          {
            _iter500.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (SubjoinAttributeMap != null && __isset.subjoinAttributeMap) {
        field.Name = "subjoinAttributeMap";
        field.Type = TType.Map;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.Byte, TType.I32, SubjoinAttributeMap.Count));
          foreach (byte _iter501 in SubjoinAttributeMap.Keys)
          {
            oprot.WriteByte(_iter501);
            oprot.WriteI32(SubjoinAttributeMap[_iter501]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.icon) {
        field.Name = "icon";
        field.Type = TType.I32;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Icon);
        oprot.WriteFieldEnd();
      }
      if (__isset.isUpgrade) {
        field.Name = "isUpgrade";
        field.Type = TType.Bool;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(IsUpgrade);
        oprot.WriteFieldEnd();
      }
      if (__isset.strategy_type) {
        field.Name = "strategy_type";
        field.Type = TType.Byte;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(Strategy_type);
        oprot.WriteFieldEnd();
      }
      if (UpgradeAttributeMap != null && __isset.upgradeAttributeMap) {
        field.Name = "upgradeAttributeMap";
        field.Type = TType.Map;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.Byte, TType.I32, UpgradeAttributeMap.Count));
          foreach (byte _iter502 in UpgradeAttributeMap.Keys)
          {
            oprot.WriteByte(_iter502);
            oprot.WriteI32(UpgradeAttributeMap[_iter502]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (UpgradeSubjoinAttributeMap != null && __isset.upgradeSubjoinAttributeMap) {
        field.Name = "upgradeSubjoinAttributeMap";
        field.Type = TType.Map;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.Byte, TType.I32, UpgradeSubjoinAttributeMap.Count));
          foreach (byte _iter503 in UpgradeSubjoinAttributeMap.Keys)
          {
            oprot.WriteByte(_iter503);
            oprot.WriteI32(UpgradeSubjoinAttributeMap[_iter503]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("PlayerStrategyResponse(");
      sb.Append("Strategy_id: ");
      sb.Append(Strategy_id);
      sb.Append(",Strategy_name: ");
      sb.Append(Strategy_name);
      sb.Append(",Strategy_level: ");
      sb.Append(Strategy_level);
      sb.Append(",Consume: ");
      sb.Append(Consume);
      sb.Append(",AttributeMap: ");
      sb.Append(AttributeMap);
      sb.Append(",RestrainList: ");
      sb.Append(RestrainList);
      sb.Append(",SubjoinAttributeMap: ");
      sb.Append(SubjoinAttributeMap);
      sb.Append(",Icon: ");
      sb.Append(Icon);
      sb.Append(",IsUpgrade: ");
      sb.Append(IsUpgrade);
      sb.Append(",Strategy_type: ");
      sb.Append(Strategy_type);
      sb.Append(",UpgradeAttributeMap: ");
      sb.Append(UpgradeAttributeMap);
      sb.Append(",UpgradeSubjoinAttributeMap: ");
      sb.Append(UpgradeSubjoinAttributeMap);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
