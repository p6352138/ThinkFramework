/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace com.think.messages
{

  [Serializable]
  public partial class PlayerTrainListResponse : TBase
  {
    private List<PlayerTrainResponse> _playerTrainList;
    private short _consume_exploit;
    private byte _type;

    public List<PlayerTrainResponse> PlayerTrainList
    {
      get
      {
        return _playerTrainList;
      }
      set
      {
        __isset.playerTrainList = true;
        this._playerTrainList = value;
      }
    }

    public short Consume_exploit
    {
      get
      {
        return _consume_exploit;
      }
      set
      {
        __isset.consume_exploit = true;
        this._consume_exploit = value;
      }
    }

    public byte Type
    {
      get
      {
        return _type;
      }
      set
      {
        __isset.type = true;
        this._type = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool playerTrainList;
      public bool consume_exploit;
      public bool type;
    }

    public PlayerTrainListResponse() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.List) {
              {
                PlayerTrainList = new List<PlayerTrainResponse>();
                TList _list315 = iprot.ReadListBegin();
                for( int _i316 = 0; _i316 < _list315.Count; ++_i316)
                {
                  PlayerTrainResponse _elem317 = new PlayerTrainResponse();
                  _elem317 = new PlayerTrainResponse();
                  _elem317.Read(iprot);
                  PlayerTrainList.Add(_elem317);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I16) {
              Consume_exploit = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Byte) {
              Type = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("PlayerTrainListResponse");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (PlayerTrainList != null && __isset.playerTrainList) {
        field.Name = "playerTrainList";
        field.Type = TType.List;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, PlayerTrainList.Count));
          foreach (PlayerTrainResponse _iter318 in PlayerTrainList)
          {
            _iter318.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.consume_exploit) {
        field.Name = "consume_exploit";
        field.Type = TType.I16;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(Consume_exploit);
        oprot.WriteFieldEnd();
      }
      if (__isset.type) {
        field.Name = "type";
        field.Type = TType.Byte;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(Type);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("PlayerTrainListResponse(");
      sb.Append("PlayerTrainList: ");
      sb.Append(PlayerTrainList);
      sb.Append(",Consume_exploit: ");
      sb.Append(Consume_exploit);
      sb.Append(",Type: ");
      sb.Append(Type);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
