/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace com.think.messages
{

  [Serializable]
  public partial class PotentialResponse : TBase
  {
    private int _role_instance_id;
    private BasePropertyResponse _old_property;
    private BasePropertyResponse _new_property;
    private int _potentialValue;
    private int _percent;
    private int _color;

    public int Role_instance_id
    {
      get
      {
        return _role_instance_id;
      }
      set
      {
        __isset.role_instance_id = true;
        this._role_instance_id = value;
      }
    }

    public BasePropertyResponse Old_property
    {
      get
      {
        return _old_property;
      }
      set
      {
        __isset.old_property = true;
        this._old_property = value;
      }
    }

    public BasePropertyResponse New_property
    {
      get
      {
        return _new_property;
      }
      set
      {
        __isset.new_property = true;
        this._new_property = value;
      }
    }

    public int PotentialValue
    {
      get
      {
        return _potentialValue;
      }
      set
      {
        __isset.potentialValue = true;
        this._potentialValue = value;
      }
    }

    public int Percent
    {
      get
      {
        return _percent;
      }
      set
      {
        __isset.percent = true;
        this._percent = value;
      }
    }

    public int Color
    {
      get
      {
        return _color;
      }
      set
      {
        __isset.color = true;
        this._color = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool role_instance_id;
      public bool old_property;
      public bool new_property;
      public bool potentialValue;
      public bool percent;
      public bool color;
    }

    public PotentialResponse() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              Role_instance_id = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Struct) {
              Old_property = new BasePropertyResponse();
              Old_property.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Struct) {
              New_property = new BasePropertyResponse();
              New_property.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              PotentialValue = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              Percent = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              Color = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("PotentialResponse");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.role_instance_id) {
        field.Name = "role_instance_id";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Role_instance_id);
        oprot.WriteFieldEnd();
      }
      if (Old_property != null && __isset.old_property) {
        field.Name = "old_property";
        field.Type = TType.Struct;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        Old_property.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (New_property != null && __isset.new_property) {
        field.Name = "new_property";
        field.Type = TType.Struct;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        New_property.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (__isset.potentialValue) {
        field.Name = "potentialValue";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(PotentialValue);
        oprot.WriteFieldEnd();
      }
      if (__isset.percent) {
        field.Name = "percent";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Percent);
        oprot.WriteFieldEnd();
      }
      if (__isset.color) {
        field.Name = "color";
        field.Type = TType.I32;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Color);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("PotentialResponse(");
      sb.Append("Role_instance_id: ");
      sb.Append(Role_instance_id);
      sb.Append(",Old_property: ");
      sb.Append(Old_property== null ? "<null>" : Old_property.ToString());
      sb.Append(",New_property: ");
      sb.Append(New_property== null ? "<null>" : New_property.ToString());
      sb.Append(",PotentialValue: ");
      sb.Append(PotentialValue);
      sb.Append(",Percent: ");
      sb.Append(Percent);
      sb.Append(",Color: ");
      sb.Append(Color);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
