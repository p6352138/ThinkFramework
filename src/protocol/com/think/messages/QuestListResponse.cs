/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace com.think.messages
{

  [Serializable]
  public partial class QuestListResponse : TBase
  {
    private byte _type;
    private List<QuestResponse> _questResponseList;
    private int _refeshGold;
    private int _neendGold;
    private int _times;
    private int _maxTimes;

    public byte Type
    {
      get
      {
        return _type;
      }
      set
      {
        __isset.type = true;
        this._type = value;
      }
    }

    public List<QuestResponse> QuestResponseList
    {
      get
      {
        return _questResponseList;
      }
      set
      {
        __isset.questResponseList = true;
        this._questResponseList = value;
      }
    }

    public int RefeshGold
    {
      get
      {
        return _refeshGold;
      }
      set
      {
        __isset.refeshGold = true;
        this._refeshGold = value;
      }
    }

    public int NeendGold
    {
      get
      {
        return _neendGold;
      }
      set
      {
        __isset.neendGold = true;
        this._neendGold = value;
      }
    }

    public int Times
    {
      get
      {
        return _times;
      }
      set
      {
        __isset.times = true;
        this._times = value;
      }
    }

    public int MaxTimes
    {
      get
      {
        return _maxTimes;
      }
      set
      {
        __isset.maxTimes = true;
        this._maxTimes = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool type;
      public bool questResponseList;
      public bool refeshGold;
      public bool neendGold;
      public bool times;
      public bool maxTimes;
    }

    public QuestListResponse() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Byte) {
              Type = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.List) {
              {
                QuestResponseList = new List<QuestResponse>();
                TList _list319 = iprot.ReadListBegin();
                for( int _i320 = 0; _i320 < _list319.Count; ++_i320)
                {
                  QuestResponse _elem321 = new QuestResponse();
                  _elem321 = new QuestResponse();
                  _elem321.Read(iprot);
                  QuestResponseList.Add(_elem321);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              RefeshGold = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              NeendGold = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              Times = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              MaxTimes = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("QuestListResponse");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.type) {
        field.Name = "type";
        field.Type = TType.Byte;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(Type);
        oprot.WriteFieldEnd();
      }
      if (QuestResponseList != null && __isset.questResponseList) {
        field.Name = "questResponseList";
        field.Type = TType.List;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, QuestResponseList.Count));
          foreach (QuestResponse _iter322 in QuestResponseList)
          {
            _iter322.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.refeshGold) {
        field.Name = "refeshGold";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(RefeshGold);
        oprot.WriteFieldEnd();
      }
      if (__isset.neendGold) {
        field.Name = "neendGold";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(NeendGold);
        oprot.WriteFieldEnd();
      }
      if (__isset.times) {
        field.Name = "times";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Times);
        oprot.WriteFieldEnd();
      }
      if (__isset.maxTimes) {
        field.Name = "maxTimes";
        field.Type = TType.I32;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(MaxTimes);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("QuestListResponse(");
      sb.Append("Type: ");
      sb.Append(Type);
      sb.Append(",QuestResponseList: ");
      sb.Append(QuestResponseList);
      sb.Append(",RefeshGold: ");
      sb.Append(RefeshGold);
      sb.Append(",NeendGold: ");
      sb.Append(NeendGold);
      sb.Append(",Times: ");
      sb.Append(Times);
      sb.Append(",MaxTimes: ");
      sb.Append(MaxTimes);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
