/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace com.think.messages
{

  [Serializable]
  public partial class QuestNotifyResponse : TBase
  {
    private int _questID;
    private string _questName;
    private byte _questType;
    private int _questIcon;
    private byte _questState;
    private string _questTarget;

    public int QuestID
    {
      get
      {
        return _questID;
      }
      set
      {
        __isset.questID = true;
        this._questID = value;
      }
    }

    public string QuestName
    {
      get
      {
        return _questName;
      }
      set
      {
        __isset.questName = true;
        this._questName = value;
      }
    }

    public byte QuestType
    {
      get
      {
        return _questType;
      }
      set
      {
        __isset.questType = true;
        this._questType = value;
      }
    }

    public int QuestIcon
    {
      get
      {
        return _questIcon;
      }
      set
      {
        __isset.questIcon = true;
        this._questIcon = value;
      }
    }

    public byte QuestState
    {
      get
      {
        return _questState;
      }
      set
      {
        __isset.questState = true;
        this._questState = value;
      }
    }

    public string QuestTarget
    {
      get
      {
        return _questTarget;
      }
      set
      {
        __isset.questTarget = true;
        this._questTarget = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool questID;
      public bool questName;
      public bool questType;
      public bool questIcon;
      public bool questState;
      public bool questTarget;
    }

    public QuestNotifyResponse() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              QuestID = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              QuestName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Byte) {
              QuestType = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              QuestIcon = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Byte) {
              QuestState = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.String) {
              QuestTarget = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("QuestNotifyResponse");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.questID) {
        field.Name = "questID";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(QuestID);
        oprot.WriteFieldEnd();
      }
      if (QuestName != null && __isset.questName) {
        field.Name = "questName";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(QuestName);
        oprot.WriteFieldEnd();
      }
      if (__isset.questType) {
        field.Name = "questType";
        field.Type = TType.Byte;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(QuestType);
        oprot.WriteFieldEnd();
      }
      if (__isset.questIcon) {
        field.Name = "questIcon";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(QuestIcon);
        oprot.WriteFieldEnd();
      }
      if (__isset.questState) {
        field.Name = "questState";
        field.Type = TType.Byte;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(QuestState);
        oprot.WriteFieldEnd();
      }
      if (QuestTarget != null && __isset.questTarget) {
        field.Name = "questTarget";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(QuestTarget);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("QuestNotifyResponse(");
      sb.Append("QuestID: ");
      sb.Append(QuestID);
      sb.Append(",QuestName: ");
      sb.Append(QuestName);
      sb.Append(",QuestType: ");
      sb.Append(QuestType);
      sb.Append(",QuestIcon: ");
      sb.Append(QuestIcon);
      sb.Append(",QuestState: ");
      sb.Append(QuestState);
      sb.Append(",QuestTarget: ");
      sb.Append(QuestTarget);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
