/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace com.think.messages
{

  [Serializable]
  public partial class QuestResponse : TBase
  {
    private int _questID;
    private string _questName;
    private int _questLevel;
    private byte _questType;
    private byte _questTrait;
    private string _questDesc;
    private string _questTargetProgressDesc;
    private int _money;
    private int _exploit;
    private int _prestige;
    private int _exp;
    private byte _questState;
    private string _questTarget;
    private int _itemID;
    private int _itemNum;
    private ItemDetailResponse _itemDetailResponse;
    private int _general_exp;
    private int _gold;
    private byte _token;

    public int QuestID
    {
      get
      {
        return _questID;
      }
      set
      {
        __isset.questID = true;
        this._questID = value;
      }
    }

    public string QuestName
    {
      get
      {
        return _questName;
      }
      set
      {
        __isset.questName = true;
        this._questName = value;
      }
    }

    public int QuestLevel
    {
      get
      {
        return _questLevel;
      }
      set
      {
        __isset.questLevel = true;
        this._questLevel = value;
      }
    }

    public byte QuestType
    {
      get
      {
        return _questType;
      }
      set
      {
        __isset.questType = true;
        this._questType = value;
      }
    }

    public byte QuestTrait
    {
      get
      {
        return _questTrait;
      }
      set
      {
        __isset.questTrait = true;
        this._questTrait = value;
      }
    }

    public string QuestDesc
    {
      get
      {
        return _questDesc;
      }
      set
      {
        __isset.questDesc = true;
        this._questDesc = value;
      }
    }

    public string QuestTargetProgressDesc
    {
      get
      {
        return _questTargetProgressDesc;
      }
      set
      {
        __isset.questTargetProgressDesc = true;
        this._questTargetProgressDesc = value;
      }
    }

    public int Money
    {
      get
      {
        return _money;
      }
      set
      {
        __isset.money = true;
        this._money = value;
      }
    }

    public int Exploit
    {
      get
      {
        return _exploit;
      }
      set
      {
        __isset.exploit = true;
        this._exploit = value;
      }
    }

    public int Prestige
    {
      get
      {
        return _prestige;
      }
      set
      {
        __isset.prestige = true;
        this._prestige = value;
      }
    }

    public int Exp
    {
      get
      {
        return _exp;
      }
      set
      {
        __isset.exp = true;
        this._exp = value;
      }
    }

    public byte QuestState
    {
      get
      {
        return _questState;
      }
      set
      {
        __isset.questState = true;
        this._questState = value;
      }
    }

    public string QuestTarget
    {
      get
      {
        return _questTarget;
      }
      set
      {
        __isset.questTarget = true;
        this._questTarget = value;
      }
    }

    public int ItemID
    {
      get
      {
        return _itemID;
      }
      set
      {
        __isset.itemID = true;
        this._itemID = value;
      }
    }

    public int ItemNum
    {
      get
      {
        return _itemNum;
      }
      set
      {
        __isset.itemNum = true;
        this._itemNum = value;
      }
    }

    public ItemDetailResponse ItemDetailResponse
    {
      get
      {
        return _itemDetailResponse;
      }
      set
      {
        __isset.itemDetailResponse = true;
        this._itemDetailResponse = value;
      }
    }

    public int General_exp
    {
      get
      {
        return _general_exp;
      }
      set
      {
        __isset.general_exp = true;
        this._general_exp = value;
      }
    }

    public int Gold
    {
      get
      {
        return _gold;
      }
      set
      {
        __isset.gold = true;
        this._gold = value;
      }
    }

    public byte Token
    {
      get
      {
        return _token;
      }
      set
      {
        __isset.token = true;
        this._token = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool questID;
      public bool questName;
      public bool questLevel;
      public bool questType;
      public bool questTrait;
      public bool questDesc;
      public bool questTargetProgressDesc;
      public bool money;
      public bool exploit;
      public bool prestige;
      public bool exp;
      public bool questState;
      public bool questTarget;
      public bool itemID;
      public bool itemNum;
      public bool itemDetailResponse;
      public bool general_exp;
      public bool gold;
      public bool token;
    }

    public QuestResponse() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              QuestID = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              QuestName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              QuestLevel = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Byte) {
              QuestType = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Byte) {
              QuestTrait = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.String) {
              QuestDesc = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.String) {
              QuestTargetProgressDesc = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.I32) {
              Money = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.I32) {
              Exploit = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.I32) {
              Prestige = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.I32) {
              Exp = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.Byte) {
              QuestState = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.String) {
              QuestTarget = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 14:
            if (field.Type == TType.I32) {
              ItemID = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 15:
            if (field.Type == TType.I32) {
              ItemNum = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 16:
            if (field.Type == TType.Struct) {
              ItemDetailResponse = new ItemDetailResponse();
              ItemDetailResponse.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 17:
            if (field.Type == TType.I32) {
              General_exp = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 18:
            if (field.Type == TType.I32) {
              Gold = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 19:
            if (field.Type == TType.Byte) {
              Token = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("QuestResponse");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.questID) {
        field.Name = "questID";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(QuestID);
        oprot.WriteFieldEnd();
      }
      if (QuestName != null && __isset.questName) {
        field.Name = "questName";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(QuestName);
        oprot.WriteFieldEnd();
      }
      if (__isset.questLevel) {
        field.Name = "questLevel";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(QuestLevel);
        oprot.WriteFieldEnd();
      }
      if (__isset.questType) {
        field.Name = "questType";
        field.Type = TType.Byte;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(QuestType);
        oprot.WriteFieldEnd();
      }
      if (__isset.questTrait) {
        field.Name = "questTrait";
        field.Type = TType.Byte;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(QuestTrait);
        oprot.WriteFieldEnd();
      }
      if (QuestDesc != null && __isset.questDesc) {
        field.Name = "questDesc";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(QuestDesc);
        oprot.WriteFieldEnd();
      }
      if (QuestTargetProgressDesc != null && __isset.questTargetProgressDesc) {
        field.Name = "questTargetProgressDesc";
        field.Type = TType.String;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(QuestTargetProgressDesc);
        oprot.WriteFieldEnd();
      }
      if (__isset.money) {
        field.Name = "money";
        field.Type = TType.I32;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Money);
        oprot.WriteFieldEnd();
      }
      if (__isset.exploit) {
        field.Name = "exploit";
        field.Type = TType.I32;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Exploit);
        oprot.WriteFieldEnd();
      }
      if (__isset.prestige) {
        field.Name = "prestige";
        field.Type = TType.I32;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Prestige);
        oprot.WriteFieldEnd();
      }
      if (__isset.exp) {
        field.Name = "exp";
        field.Type = TType.I32;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Exp);
        oprot.WriteFieldEnd();
      }
      if (__isset.questState) {
        field.Name = "questState";
        field.Type = TType.Byte;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(QuestState);
        oprot.WriteFieldEnd();
      }
      if (QuestTarget != null && __isset.questTarget) {
        field.Name = "questTarget";
        field.Type = TType.String;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(QuestTarget);
        oprot.WriteFieldEnd();
      }
      if (__isset.itemID) {
        field.Name = "itemID";
        field.Type = TType.I32;
        field.ID = 14;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ItemID);
        oprot.WriteFieldEnd();
      }
      if (__isset.itemNum) {
        field.Name = "itemNum";
        field.Type = TType.I32;
        field.ID = 15;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ItemNum);
        oprot.WriteFieldEnd();
      }
      if (ItemDetailResponse != null && __isset.itemDetailResponse) {
        field.Name = "itemDetailResponse";
        field.Type = TType.Struct;
        field.ID = 16;
        oprot.WriteFieldBegin(field);
        ItemDetailResponse.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (__isset.general_exp) {
        field.Name = "general_exp";
        field.Type = TType.I32;
        field.ID = 17;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(General_exp);
        oprot.WriteFieldEnd();
      }
      if (__isset.gold) {
        field.Name = "gold";
        field.Type = TType.I32;
        field.ID = 18;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Gold);
        oprot.WriteFieldEnd();
      }
      if (__isset.token) {
        field.Name = "token";
        field.Type = TType.Byte;
        field.ID = 19;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(Token);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("QuestResponse(");
      sb.Append("QuestID: ");
      sb.Append(QuestID);
      sb.Append(",QuestName: ");
      sb.Append(QuestName);
      sb.Append(",QuestLevel: ");
      sb.Append(QuestLevel);
      sb.Append(",QuestType: ");
      sb.Append(QuestType);
      sb.Append(",QuestTrait: ");
      sb.Append(QuestTrait);
      sb.Append(",QuestDesc: ");
      sb.Append(QuestDesc);
      sb.Append(",QuestTargetProgressDesc: ");
      sb.Append(QuestTargetProgressDesc);
      sb.Append(",Money: ");
      sb.Append(Money);
      sb.Append(",Exploit: ");
      sb.Append(Exploit);
      sb.Append(",Prestige: ");
      sb.Append(Prestige);
      sb.Append(",Exp: ");
      sb.Append(Exp);
      sb.Append(",QuestState: ");
      sb.Append(QuestState);
      sb.Append(",QuestTarget: ");
      sb.Append(QuestTarget);
      sb.Append(",ItemID: ");
      sb.Append(ItemID);
      sb.Append(",ItemNum: ");
      sb.Append(ItemNum);
      sb.Append(",ItemDetailResponse: ");
      sb.Append(ItemDetailResponse== null ? "<null>" : ItemDetailResponse.ToString());
      sb.Append(",General_exp: ");
      sb.Append(General_exp);
      sb.Append(",Gold: ");
      sb.Append(Gold);
      sb.Append(",Token: ");
      sb.Append(Token);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
