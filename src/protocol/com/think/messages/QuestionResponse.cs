/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace com.think.messages
{

  [Serializable]
  public partial class QuestionResponse : TBase
  {
    private int _question_id;
    private string _question;
    private int _question_icon;
    private List<Answer> _answerList;

    public int Question_id
    {
      get
      {
        return _question_id;
      }
      set
      {
        __isset.question_id = true;
        this._question_id = value;
      }
    }

    public string Question
    {
      get
      {
        return _question;
      }
      set
      {
        __isset.question = true;
        this._question = value;
      }
    }

    public int Question_icon
    {
      get
      {
        return _question_icon;
      }
      set
      {
        __isset.question_icon = true;
        this._question_icon = value;
      }
    }

    public List<Answer> AnswerList
    {
      get
      {
        return _answerList;
      }
      set
      {
        __isset.answerList = true;
        this._answerList = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool question_id;
      public bool question;
      public bool question_icon;
      public bool answerList;
    }

    public QuestionResponse() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              Question_id = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Question = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              Question_icon = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.List) {
              {
                AnswerList = new List<Answer>();
                TList _list128 = iprot.ReadListBegin();
                for( int _i129 = 0; _i129 < _list128.Count; ++_i129)
                {
                  Answer _elem130 = new Answer();
                  _elem130 = new Answer();
                  _elem130.Read(iprot);
                  AnswerList.Add(_elem130);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("QuestionResponse");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.question_id) {
        field.Name = "question_id";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Question_id);
        oprot.WriteFieldEnd();
      }
      if (Question != null && __isset.question) {
        field.Name = "question";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Question);
        oprot.WriteFieldEnd();
      }
      if (__isset.question_icon) {
        field.Name = "question_icon";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Question_icon);
        oprot.WriteFieldEnd();
      }
      if (AnswerList != null && __isset.answerList) {
        field.Name = "answerList";
        field.Type = TType.List;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, AnswerList.Count));
          foreach (Answer _iter131 in AnswerList)
          {
            _iter131.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("QuestionResponse(");
      sb.Append("Question_id: ");
      sb.Append(Question_id);
      sb.Append(",Question: ");
      sb.Append(Question);
      sb.Append(",Question_icon: ");
      sb.Append(Question_icon);
      sb.Append(",AnswerList: ");
      sb.Append(AnswerList);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
