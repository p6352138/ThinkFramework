/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace com.think.messages
{

  [Serializable]
  public partial class RankingResponse : TBase
  {
    private int _award_money;
    private int _award_prestige;
    private int _rewards_time;
    private CDTimeResponse _cdTime;
    private List<PlayerInfoResponse> _playerList;
    private List<RankingFightLogResponse> _rankingFightList;
    private int _ranking_id;
    private byte _challenge_num;
    private string _official;
    private string _next_official;
    private string _award_msg;

    public int Award_money
    {
      get
      {
        return _award_money;
      }
      set
      {
        __isset.award_money = true;
        this._award_money = value;
      }
    }

    public int Award_prestige
    {
      get
      {
        return _award_prestige;
      }
      set
      {
        __isset.award_prestige = true;
        this._award_prestige = value;
      }
    }

    public int Rewards_time
    {
      get
      {
        return _rewards_time;
      }
      set
      {
        __isset.rewards_time = true;
        this._rewards_time = value;
      }
    }

    public CDTimeResponse CdTime
    {
      get
      {
        return _cdTime;
      }
      set
      {
        __isset.cdTime = true;
        this._cdTime = value;
      }
    }

    public List<PlayerInfoResponse> PlayerList
    {
      get
      {
        return _playerList;
      }
      set
      {
        __isset.playerList = true;
        this._playerList = value;
      }
    }

    public List<RankingFightLogResponse> RankingFightList
    {
      get
      {
        return _rankingFightList;
      }
      set
      {
        __isset.rankingFightList = true;
        this._rankingFightList = value;
      }
    }

    public int Ranking_id
    {
      get
      {
        return _ranking_id;
      }
      set
      {
        __isset.ranking_id = true;
        this._ranking_id = value;
      }
    }

    public byte Challenge_num
    {
      get
      {
        return _challenge_num;
      }
      set
      {
        __isset.challenge_num = true;
        this._challenge_num = value;
      }
    }

    public string Official
    {
      get
      {
        return _official;
      }
      set
      {
        __isset.official = true;
        this._official = value;
      }
    }

    public string Next_official
    {
      get
      {
        return _next_official;
      }
      set
      {
        __isset.next_official = true;
        this._next_official = value;
      }
    }

    public string Award_msg
    {
      get
      {
        return _award_msg;
      }
      set
      {
        __isset.award_msg = true;
        this._award_msg = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool award_money;
      public bool award_prestige;
      public bool rewards_time;
      public bool cdTime;
      public bool playerList;
      public bool rankingFightList;
      public bool ranking_id;
      public bool challenge_num;
      public bool official;
      public bool next_official;
      public bool award_msg;
    }

    public RankingResponse() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              Award_money = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              Award_prestige = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              Rewards_time = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Struct) {
              CdTime = new CDTimeResponse();
              CdTime.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.List) {
              {
                PlayerList = new List<PlayerInfoResponse>();
                TList _list327 = iprot.ReadListBegin();
                for( int _i328 = 0; _i328 < _list327.Count; ++_i328)
                {
                  PlayerInfoResponse _elem329 = new PlayerInfoResponse();
                  _elem329 = new PlayerInfoResponse();
                  _elem329.Read(iprot);
                  PlayerList.Add(_elem329);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.List) {
              {
                RankingFightList = new List<RankingFightLogResponse>();
                TList _list330 = iprot.ReadListBegin();
                for( int _i331 = 0; _i331 < _list330.Count; ++_i331)
                {
                  RankingFightLogResponse _elem332 = new RankingFightLogResponse();
                  _elem332 = new RankingFightLogResponse();
                  _elem332.Read(iprot);
                  RankingFightList.Add(_elem332);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I32) {
              Ranking_id = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.Byte) {
              Challenge_num = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.String) {
              Official = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.String) {
              Next_official = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.String) {
              Award_msg = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("RankingResponse");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.award_money) {
        field.Name = "award_money";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Award_money);
        oprot.WriteFieldEnd();
      }
      if (__isset.award_prestige) {
        field.Name = "award_prestige";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Award_prestige);
        oprot.WriteFieldEnd();
      }
      if (__isset.rewards_time) {
        field.Name = "rewards_time";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Rewards_time);
        oprot.WriteFieldEnd();
      }
      if (CdTime != null && __isset.cdTime) {
        field.Name = "cdTime";
        field.Type = TType.Struct;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        CdTime.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (PlayerList != null && __isset.playerList) {
        field.Name = "playerList";
        field.Type = TType.List;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, PlayerList.Count));
          foreach (PlayerInfoResponse _iter333 in PlayerList)
          {
            _iter333.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (RankingFightList != null && __isset.rankingFightList) {
        field.Name = "rankingFightList";
        field.Type = TType.List;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, RankingFightList.Count));
          foreach (RankingFightLogResponse _iter334 in RankingFightList)
          {
            _iter334.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.ranking_id) {
        field.Name = "ranking_id";
        field.Type = TType.I32;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Ranking_id);
        oprot.WriteFieldEnd();
      }
      if (__isset.challenge_num) {
        field.Name = "challenge_num";
        field.Type = TType.Byte;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(Challenge_num);
        oprot.WriteFieldEnd();
      }
      if (Official != null && __isset.official) {
        field.Name = "official";
        field.Type = TType.String;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Official);
        oprot.WriteFieldEnd();
      }
      if (Next_official != null && __isset.next_official) {
        field.Name = "next_official";
        field.Type = TType.String;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Next_official);
        oprot.WriteFieldEnd();
      }
      if (Award_msg != null && __isset.award_msg) {
        field.Name = "award_msg";
        field.Type = TType.String;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Award_msg);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("RankingResponse(");
      sb.Append("Award_money: ");
      sb.Append(Award_money);
      sb.Append(",Award_prestige: ");
      sb.Append(Award_prestige);
      sb.Append(",Rewards_time: ");
      sb.Append(Rewards_time);
      sb.Append(",CdTime: ");
      sb.Append(CdTime== null ? "<null>" : CdTime.ToString());
      sb.Append(",PlayerList: ");
      sb.Append(PlayerList);
      sb.Append(",RankingFightList: ");
      sb.Append(RankingFightList);
      sb.Append(",Ranking_id: ");
      sb.Append(Ranking_id);
      sb.Append(",Challenge_num: ");
      sb.Append(Challenge_num);
      sb.Append(",Official: ");
      sb.Append(Official);
      sb.Append(",Next_official: ");
      sb.Append(Next_official);
      sb.Append(",Award_msg: ");
      sb.Append(Award_msg);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
