/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace com.think.messages
{

  [Serializable]
  public partial class RecruitGeneralResponse : TBase
  {
    private int _general_id;
    private bool _isRecruit;
    private bool _isSuccess;
    private GeneralResponse _general;

    public int General_id
    {
      get
      {
        return _general_id;
      }
      set
      {
        __isset.general_id = true;
        this._general_id = value;
      }
    }

    public bool IsRecruit
    {
      get
      {
        return _isRecruit;
      }
      set
      {
        __isset.isRecruit = true;
        this._isRecruit = value;
      }
    }

    public bool IsSuccess
    {
      get
      {
        return _isSuccess;
      }
      set
      {
        __isset.isSuccess = true;
        this._isSuccess = value;
      }
    }

    public GeneralResponse General
    {
      get
      {
        return _general;
      }
      set
      {
        __isset.general = true;
        this._general = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool general_id;
      public bool isRecruit;
      public bool isSuccess;
      public bool general;
    }

    public RecruitGeneralResponse() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              General_id = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Bool) {
              IsRecruit = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Bool) {
              IsSuccess = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Struct) {
              General = new GeneralResponse();
              General.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("RecruitGeneralResponse");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.general_id) {
        field.Name = "general_id";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(General_id);
        oprot.WriteFieldEnd();
      }
      if (__isset.isRecruit) {
        field.Name = "isRecruit";
        field.Type = TType.Bool;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(IsRecruit);
        oprot.WriteFieldEnd();
      }
      if (__isset.isSuccess) {
        field.Name = "isSuccess";
        field.Type = TType.Bool;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(IsSuccess);
        oprot.WriteFieldEnd();
      }
      if (General != null && __isset.general) {
        field.Name = "general";
        field.Type = TType.Struct;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        General.Write(oprot);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("RecruitGeneralResponse(");
      sb.Append("General_id: ");
      sb.Append(General_id);
      sb.Append(",IsRecruit: ");
      sb.Append(IsRecruit);
      sb.Append(",IsSuccess: ");
      sb.Append(IsSuccess);
      sb.Append(",General: ");
      sb.Append(General== null ? "<null>" : General.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }

}
