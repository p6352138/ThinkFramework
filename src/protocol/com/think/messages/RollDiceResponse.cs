/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace com.think.messages
{

  [Serializable]
  public partial class RollDiceResponse : TBase
  {
    private List<int> _rollPoints;
    private List<ResourceResponse> _award;
    private int _consume_gold;

    public List<int> RollPoints
    {
      get
      {
        return _rollPoints;
      }
      set
      {
        __isset.rollPoints = true;
        this._rollPoints = value;
      }
    }

    public List<ResourceResponse> Award
    {
      get
      {
        return _award;
      }
      set
      {
        __isset.award = true;
        this._award = value;
      }
    }

    public int Consume_gold
    {
      get
      {
        return _consume_gold;
      }
      set
      {
        __isset.consume_gold = true;
        this._consume_gold = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool rollPoints;
      public bool award;
      public bool consume_gold;
    }

    public RollDiceResponse() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.List) {
              {
                RollPoints = new List<int>();
                TList _list584 = iprot.ReadListBegin();
                for( int _i585 = 0; _i585 < _list584.Count; ++_i585)
                {
                  int _elem586 = 0;
                  _elem586 = iprot.ReadI32();
                  RollPoints.Add(_elem586);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.List) {
              {
                Award = new List<ResourceResponse>();
                TList _list587 = iprot.ReadListBegin();
                for( int _i588 = 0; _i588 < _list587.Count; ++_i588)
                {
                  ResourceResponse _elem589 = new ResourceResponse();
                  _elem589 = new ResourceResponse();
                  _elem589.Read(iprot);
                  Award.Add(_elem589);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              Consume_gold = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("RollDiceResponse");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (RollPoints != null && __isset.rollPoints) {
        field.Name = "rollPoints";
        field.Type = TType.List;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.I32, RollPoints.Count));
          foreach (int _iter590 in RollPoints)
          {
            oprot.WriteI32(_iter590);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Award != null && __isset.award) {
        field.Name = "award";
        field.Type = TType.List;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Award.Count));
          foreach (ResourceResponse _iter591 in Award)
          {
            _iter591.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.consume_gold) {
        field.Name = "consume_gold";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Consume_gold);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("RollDiceResponse(");
      sb.Append("RollPoints: ");
      sb.Append(RollPoints);
      sb.Append(",Award: ");
      sb.Append(Award);
      sb.Append(",Consume_gold: ");
      sb.Append(Consume_gold);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
