/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace com.think.messages
{

  [Serializable]
  public partial class RpgFightResponse : TBase
  {
    private byte _resp_type;
    private byte _result_type;
    private string _fight_describe;
    private int _attackerLoss;
    private int _targetLoss;
    private Dictionary<byte, FightFriendDataResponse> _attackerFriend;
    private Dictionary<byte, FightFriendDataResponse> _targetFriend;
    private List<FightActionResponse> _fightActionList;
    private string _attackerName;
    private string _targetName;
    private int _id;
    private int _scene;
    private bool _isLast;
    private bool _isPass;
    private int _attacker_fighting_capacity;
    private int _target_fighting_capacity;
    private int _general_id;
    private int _leader_id;
    private int _fight_time;
    private List<PlayerFightScoreResponse> _defeat_score;
    private QuestionResponse _questionResponse;
    private int _opration_id;
    private List<FightSchemeActionResponse> _fightActionSchemeList;
    private List<BorrowGeneralResponse> _borrowGeneralList;
    private PlunderGarrisonResponse _plunderGarrison;
    private List<int> _attacker_banner;
    private List<int> _target_banner;
    private List<ResourceResponse> _listAward;
    private string _fight_share_name;
    private List<FightStrategyResponse> _listFightStrategy;
    private byte _isFightStrategy;
    private bool _isSucc;
    private List<SkillData> _skillDataList;

    public byte Resp_type
    {
      get
      {
        return _resp_type;
      }
      set
      {
        __isset.resp_type = true;
        this._resp_type = value;
      }
    }

    public byte Result_type
    {
      get
      {
        return _result_type;
      }
      set
      {
        __isset.result_type = true;
        this._result_type = value;
      }
    }

    public string Fight_describe
    {
      get
      {
        return _fight_describe;
      }
      set
      {
        __isset.fight_describe = true;
        this._fight_describe = value;
      }
    }

    public int AttackerLoss
    {
      get
      {
        return _attackerLoss;
      }
      set
      {
        __isset.attackerLoss = true;
        this._attackerLoss = value;
      }
    }

    public int TargetLoss
    {
      get
      {
        return _targetLoss;
      }
      set
      {
        __isset.targetLoss = true;
        this._targetLoss = value;
      }
    }

    public Dictionary<byte, FightFriendDataResponse> AttackerFriend
    {
      get
      {
        return _attackerFriend;
      }
      set
      {
        __isset.attackerFriend = true;
        this._attackerFriend = value;
      }
    }

    public Dictionary<byte, FightFriendDataResponse> TargetFriend
    {
      get
      {
        return _targetFriend;
      }
      set
      {
        __isset.targetFriend = true;
        this._targetFriend = value;
      }
    }

    public List<FightActionResponse> FightActionList
    {
      get
      {
        return _fightActionList;
      }
      set
      {
        __isset.fightActionList = true;
        this._fightActionList = value;
      }
    }

    public string AttackerName
    {
      get
      {
        return _attackerName;
      }
      set
      {
        __isset.attackerName = true;
        this._attackerName = value;
      }
    }

    public string TargetName
    {
      get
      {
        return _targetName;
      }
      set
      {
        __isset.targetName = true;
        this._targetName = value;
      }
    }

    public int Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }

    public int Scene
    {
      get
      {
        return _scene;
      }
      set
      {
        __isset.scene = true;
        this._scene = value;
      }
    }

    public bool IsLast
    {
      get
      {
        return _isLast;
      }
      set
      {
        __isset.isLast = true;
        this._isLast = value;
      }
    }

    public bool IsPass
    {
      get
      {
        return _isPass;
      }
      set
      {
        __isset.isPass = true;
        this._isPass = value;
      }
    }

    public int Attacker_fighting_capacity
    {
      get
      {
        return _attacker_fighting_capacity;
      }
      set
      {
        __isset.attacker_fighting_capacity = true;
        this._attacker_fighting_capacity = value;
      }
    }

    public int Target_fighting_capacity
    {
      get
      {
        return _target_fighting_capacity;
      }
      set
      {
        __isset.target_fighting_capacity = true;
        this._target_fighting_capacity = value;
      }
    }

    public int General_id
    {
      get
      {
        return _general_id;
      }
      set
      {
        __isset.general_id = true;
        this._general_id = value;
      }
    }

    public int Leader_id
    {
      get
      {
        return _leader_id;
      }
      set
      {
        __isset.leader_id = true;
        this._leader_id = value;
      }
    }

    public int Fight_time
    {
      get
      {
        return _fight_time;
      }
      set
      {
        __isset.fight_time = true;
        this._fight_time = value;
      }
    }

    public List<PlayerFightScoreResponse> Defeat_score
    {
      get
      {
        return _defeat_score;
      }
      set
      {
        __isset.defeat_score = true;
        this._defeat_score = value;
      }
    }

    public QuestionResponse QuestionResponse
    {
      get
      {
        return _questionResponse;
      }
      set
      {
        __isset.questionResponse = true;
        this._questionResponse = value;
      }
    }

    public int Opration_id
    {
      get
      {
        return _opration_id;
      }
      set
      {
        __isset.opration_id = true;
        this._opration_id = value;
      }
    }

    public List<FightSchemeActionResponse> FightActionSchemeList
    {
      get
      {
        return _fightActionSchemeList;
      }
      set
      {
        __isset.fightActionSchemeList = true;
        this._fightActionSchemeList = value;
      }
    }

    public List<BorrowGeneralResponse> BorrowGeneralList
    {
      get
      {
        return _borrowGeneralList;
      }
      set
      {
        __isset.borrowGeneralList = true;
        this._borrowGeneralList = value;
      }
    }

    public PlunderGarrisonResponse PlunderGarrison
    {
      get
      {
        return _plunderGarrison;
      }
      set
      {
        __isset.plunderGarrison = true;
        this._plunderGarrison = value;
      }
    }

    public List<int> Attacker_banner
    {
      get
      {
        return _attacker_banner;
      }
      set
      {
        __isset.attacker_banner = true;
        this._attacker_banner = value;
      }
    }

    public List<int> Target_banner
    {
      get
      {
        return _target_banner;
      }
      set
      {
        __isset.target_banner = true;
        this._target_banner = value;
      }
    }

    public List<ResourceResponse> ListAward
    {
      get
      {
        return _listAward;
      }
      set
      {
        __isset.listAward = true;
        this._listAward = value;
      }
    }

    public string Fight_share_name
    {
      get
      {
        return _fight_share_name;
      }
      set
      {
        __isset.fight_share_name = true;
        this._fight_share_name = value;
      }
    }

    public List<FightStrategyResponse> ListFightStrategy
    {
      get
      {
        return _listFightStrategy;
      }
      set
      {
        __isset.listFightStrategy = true;
        this._listFightStrategy = value;
      }
    }

    public byte IsFightStrategy
    {
      get
      {
        return _isFightStrategy;
      }
      set
      {
        __isset.isFightStrategy = true;
        this._isFightStrategy = value;
      }
    }

    public bool IsSucc
    {
      get
      {
        return _isSucc;
      }
      set
      {
        __isset.isSucc = true;
        this._isSucc = value;
      }
    }

    public List<SkillData> SkillDataList
    {
      get
      {
        return _skillDataList;
      }
      set
      {
        __isset.skillDataList = true;
        this._skillDataList = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool resp_type;
      public bool result_type;
      public bool fight_describe;
      public bool attackerLoss;
      public bool targetLoss;
      public bool attackerFriend;
      public bool targetFriend;
      public bool fightActionList;
      public bool attackerName;
      public bool targetName;
      public bool id;
      public bool scene;
      public bool isLast;
      public bool isPass;
      public bool attacker_fighting_capacity;
      public bool target_fighting_capacity;
      public bool general_id;
      public bool leader_id;
      public bool fight_time;
      public bool defeat_score;
      public bool questionResponse;
      public bool opration_id;
      public bool fightActionSchemeList;
      public bool borrowGeneralList;
      public bool plunderGarrison;
      public bool attacker_banner;
      public bool target_banner;
      public bool listAward;
      public bool fight_share_name;
      public bool listFightStrategy;
      public bool isFightStrategy;
      public bool isSucc;
      public bool skillDataList;
    }

    public RpgFightResponse() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Byte) {
              Resp_type = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Byte) {
              Result_type = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              Fight_describe = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              AttackerLoss = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              TargetLoss = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.Map) {
              {
                AttackerFriend = new Dictionary<byte, FightFriendDataResponse>();
                TMap _map201 = iprot.ReadMapBegin();
                for( int _i202 = 0; _i202 < _map201.Count; ++_i202)
                {
                  byte _key203;
                  FightFriendDataResponse _val204;
                  _key203 = iprot.ReadByte();
                  _val204 = new FightFriendDataResponse();
                  _val204.Read(iprot);
                  AttackerFriend[_key203] = _val204;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.Map) {
              {
                TargetFriend = new Dictionary<byte, FightFriendDataResponse>();
                TMap _map205 = iprot.ReadMapBegin();
                for( int _i206 = 0; _i206 < _map205.Count; ++_i206)
                {
                  byte _key207;
                  FightFriendDataResponse _val208;
                  _key207 = iprot.ReadByte();
                  _val208 = new FightFriendDataResponse();
                  _val208.Read(iprot);
                  TargetFriend[_key207] = _val208;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.List) {
              {
                FightActionList = new List<FightActionResponse>();
                TList _list209 = iprot.ReadListBegin();
                for( int _i210 = 0; _i210 < _list209.Count; ++_i210)
                {
                  FightActionResponse _elem211 = new FightActionResponse();
                  _elem211 = new FightActionResponse();
                  _elem211.Read(iprot);
                  FightActionList.Add(_elem211);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.String) {
              AttackerName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.String) {
              TargetName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.I32) {
              Id = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.I32) {
              Scene = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.Bool) {
              IsLast = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 14:
            if (field.Type == TType.Bool) {
              IsPass = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 15:
            if (field.Type == TType.I32) {
              Attacker_fighting_capacity = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 16:
            if (field.Type == TType.I32) {
              Target_fighting_capacity = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 17:
            if (field.Type == TType.I32) {
              General_id = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 18:
            if (field.Type == TType.I32) {
              Leader_id = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 19:
            if (field.Type == TType.I32) {
              Fight_time = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 20:
            if (field.Type == TType.List) {
              {
                Defeat_score = new List<PlayerFightScoreResponse>();
                TList _list212 = iprot.ReadListBegin();
                for( int _i213 = 0; _i213 < _list212.Count; ++_i213)
                {
                  PlayerFightScoreResponse _elem214 = new PlayerFightScoreResponse();
                  _elem214 = new PlayerFightScoreResponse();
                  _elem214.Read(iprot);
                  Defeat_score.Add(_elem214);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 21:
            if (field.Type == TType.Struct) {
              QuestionResponse = new QuestionResponse();
              QuestionResponse.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 22:
            if (field.Type == TType.I32) {
              Opration_id = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 23:
            if (field.Type == TType.List) {
              {
                FightActionSchemeList = new List<FightSchemeActionResponse>();
                TList _list215 = iprot.ReadListBegin();
                for( int _i216 = 0; _i216 < _list215.Count; ++_i216)
                {
                  FightSchemeActionResponse _elem217 = new FightSchemeActionResponse();
                  _elem217 = new FightSchemeActionResponse();
                  _elem217.Read(iprot);
                  FightActionSchemeList.Add(_elem217);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 24:
            if (field.Type == TType.List) {
              {
                BorrowGeneralList = new List<BorrowGeneralResponse>();
                TList _list218 = iprot.ReadListBegin();
                for( int _i219 = 0; _i219 < _list218.Count; ++_i219)
                {
                  BorrowGeneralResponse _elem220 = new BorrowGeneralResponse();
                  _elem220 = new BorrowGeneralResponse();
                  _elem220.Read(iprot);
                  BorrowGeneralList.Add(_elem220);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 25:
            if (field.Type == TType.Struct) {
              PlunderGarrison = new PlunderGarrisonResponse();
              PlunderGarrison.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 26:
            if (field.Type == TType.List) {
              {
                Attacker_banner = new List<int>();
                TList _list221 = iprot.ReadListBegin();
                for( int _i222 = 0; _i222 < _list221.Count; ++_i222)
                {
                  int _elem223 = 0;
                  _elem223 = iprot.ReadI32();
                  Attacker_banner.Add(_elem223);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 27:
            if (field.Type == TType.List) {
              {
                Target_banner = new List<int>();
                TList _list224 = iprot.ReadListBegin();
                for( int _i225 = 0; _i225 < _list224.Count; ++_i225)
                {
                  int _elem226 = 0;
                  _elem226 = iprot.ReadI32();
                  Target_banner.Add(_elem226);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 28:
            if (field.Type == TType.List) {
              {
                ListAward = new List<ResourceResponse>();
                TList _list227 = iprot.ReadListBegin();
                for( int _i228 = 0; _i228 < _list227.Count; ++_i228)
                {
                  ResourceResponse _elem229 = new ResourceResponse();
                  _elem229 = new ResourceResponse();
                  _elem229.Read(iprot);
                  ListAward.Add(_elem229);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 29:
            if (field.Type == TType.String) {
              Fight_share_name = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 30:
            if (field.Type == TType.List) {
              {
                ListFightStrategy = new List<FightStrategyResponse>();
                TList _list230 = iprot.ReadListBegin();
                for( int _i231 = 0; _i231 < _list230.Count; ++_i231)
                {
                  FightStrategyResponse _elem232 = new FightStrategyResponse();
                  _elem232 = new FightStrategyResponse();
                  _elem232.Read(iprot);
                  ListFightStrategy.Add(_elem232);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 31:
            if (field.Type == TType.Byte) {
              IsFightStrategy = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 32:
            if (field.Type == TType.Bool) {
              IsSucc = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 33:
            if (field.Type == TType.List) {
              {
                SkillDataList = new List<SkillData>();
                TList _list233 = iprot.ReadListBegin();
                for( int _i234 = 0; _i234 < _list233.Count; ++_i234)
                {
                  SkillData _elem235 = new SkillData();
                  _elem235 = new SkillData();
                  _elem235.Read(iprot);
                  SkillDataList.Add(_elem235);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("RpgFightResponse");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.resp_type) {
        field.Name = "resp_type";
        field.Type = TType.Byte;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(Resp_type);
        oprot.WriteFieldEnd();
      }
      if (__isset.result_type) {
        field.Name = "result_type";
        field.Type = TType.Byte;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(Result_type);
        oprot.WriteFieldEnd();
      }
      if (Fight_describe != null && __isset.fight_describe) {
        field.Name = "fight_describe";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Fight_describe);
        oprot.WriteFieldEnd();
      }
      if (__isset.attackerLoss) {
        field.Name = "attackerLoss";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(AttackerLoss);
        oprot.WriteFieldEnd();
      }
      if (__isset.targetLoss) {
        field.Name = "targetLoss";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(TargetLoss);
        oprot.WriteFieldEnd();
      }
      if (AttackerFriend != null && __isset.attackerFriend) {
        field.Name = "attackerFriend";
        field.Type = TType.Map;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.Byte, TType.Struct, AttackerFriend.Count));
          foreach (byte _iter236 in AttackerFriend.Keys)
          {
            oprot.WriteByte(_iter236);
            AttackerFriend[_iter236].Write(oprot);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (TargetFriend != null && __isset.targetFriend) {
        field.Name = "targetFriend";
        field.Type = TType.Map;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.Byte, TType.Struct, TargetFriend.Count));
          foreach (byte _iter237 in TargetFriend.Keys)
          {
            oprot.WriteByte(_iter237);
            TargetFriend[_iter237].Write(oprot);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (FightActionList != null && __isset.fightActionList) {
        field.Name = "fightActionList";
        field.Type = TType.List;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, FightActionList.Count));
          foreach (FightActionResponse _iter238 in FightActionList)
          {
            _iter238.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (AttackerName != null && __isset.attackerName) {
        field.Name = "attackerName";
        field.Type = TType.String;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(AttackerName);
        oprot.WriteFieldEnd();
      }
      if (TargetName != null && __isset.targetName) {
        field.Name = "targetName";
        field.Type = TType.String;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(TargetName);
        oprot.WriteFieldEnd();
      }
      if (__isset.id) {
        field.Name = "id";
        field.Type = TType.I32;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Id);
        oprot.WriteFieldEnd();
      }
      if (__isset.scene) {
        field.Name = "scene";
        field.Type = TType.I32;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Scene);
        oprot.WriteFieldEnd();
      }
      if (__isset.isLast) {
        field.Name = "isLast";
        field.Type = TType.Bool;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(IsLast);
        oprot.WriteFieldEnd();
      }
      if (__isset.isPass) {
        field.Name = "isPass";
        field.Type = TType.Bool;
        field.ID = 14;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(IsPass);
        oprot.WriteFieldEnd();
      }
      if (__isset.attacker_fighting_capacity) {
        field.Name = "attacker_fighting_capacity";
        field.Type = TType.I32;
        field.ID = 15;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Attacker_fighting_capacity);
        oprot.WriteFieldEnd();
      }
      if (__isset.target_fighting_capacity) {
        field.Name = "target_fighting_capacity";
        field.Type = TType.I32;
        field.ID = 16;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Target_fighting_capacity);
        oprot.WriteFieldEnd();
      }
      if (__isset.general_id) {
        field.Name = "general_id";
        field.Type = TType.I32;
        field.ID = 17;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(General_id);
        oprot.WriteFieldEnd();
      }
      if (__isset.leader_id) {
        field.Name = "leader_id";
        field.Type = TType.I32;
        field.ID = 18;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Leader_id);
        oprot.WriteFieldEnd();
      }
      if (__isset.fight_time) {
        field.Name = "fight_time";
        field.Type = TType.I32;
        field.ID = 19;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Fight_time);
        oprot.WriteFieldEnd();
      }
      if (Defeat_score != null && __isset.defeat_score) {
        field.Name = "defeat_score";
        field.Type = TType.List;
        field.ID = 20;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Defeat_score.Count));
          foreach (PlayerFightScoreResponse _iter239 in Defeat_score)
          {
            _iter239.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (QuestionResponse != null && __isset.questionResponse) {
        field.Name = "questionResponse";
        field.Type = TType.Struct;
        field.ID = 21;
        oprot.WriteFieldBegin(field);
        QuestionResponse.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (__isset.opration_id) {
        field.Name = "opration_id";
        field.Type = TType.I32;
        field.ID = 22;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Opration_id);
        oprot.WriteFieldEnd();
      }
      if (FightActionSchemeList != null && __isset.fightActionSchemeList) {
        field.Name = "fightActionSchemeList";
        field.Type = TType.List;
        field.ID = 23;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, FightActionSchemeList.Count));
          foreach (FightSchemeActionResponse _iter240 in FightActionSchemeList)
          {
            _iter240.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (BorrowGeneralList != null && __isset.borrowGeneralList) {
        field.Name = "borrowGeneralList";
        field.Type = TType.List;
        field.ID = 24;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, BorrowGeneralList.Count));
          foreach (BorrowGeneralResponse _iter241 in BorrowGeneralList)
          {
            _iter241.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (PlunderGarrison != null && __isset.plunderGarrison) {
        field.Name = "plunderGarrison";
        field.Type = TType.Struct;
        field.ID = 25;
        oprot.WriteFieldBegin(field);
        PlunderGarrison.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (Attacker_banner != null && __isset.attacker_banner) {
        field.Name = "attacker_banner";
        field.Type = TType.List;
        field.ID = 26;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.I32, Attacker_banner.Count));
          foreach (int _iter242 in Attacker_banner)
          {
            oprot.WriteI32(_iter242);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Target_banner != null && __isset.target_banner) {
        field.Name = "target_banner";
        field.Type = TType.List;
        field.ID = 27;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.I32, Target_banner.Count));
          foreach (int _iter243 in Target_banner)
          {
            oprot.WriteI32(_iter243);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (ListAward != null && __isset.listAward) {
        field.Name = "listAward";
        field.Type = TType.List;
        field.ID = 28;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, ListAward.Count));
          foreach (ResourceResponse _iter244 in ListAward)
          {
            _iter244.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Fight_share_name != null && __isset.fight_share_name) {
        field.Name = "fight_share_name";
        field.Type = TType.String;
        field.ID = 29;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Fight_share_name);
        oprot.WriteFieldEnd();
      }
      if (ListFightStrategy != null && __isset.listFightStrategy) {
        field.Name = "listFightStrategy";
        field.Type = TType.List;
        field.ID = 30;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, ListFightStrategy.Count));
          foreach (FightStrategyResponse _iter245 in ListFightStrategy)
          {
            _iter245.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.isFightStrategy) {
        field.Name = "isFightStrategy";
        field.Type = TType.Byte;
        field.ID = 31;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(IsFightStrategy);
        oprot.WriteFieldEnd();
      }
      if (__isset.isSucc) {
        field.Name = "isSucc";
        field.Type = TType.Bool;
        field.ID = 32;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(IsSucc);
        oprot.WriteFieldEnd();
      }
      if (SkillDataList != null && __isset.skillDataList) {
        field.Name = "skillDataList";
        field.Type = TType.List;
        field.ID = 33;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, SkillDataList.Count));
          foreach (SkillData _iter246 in SkillDataList)
          {
            _iter246.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("RpgFightResponse(");
      sb.Append("Resp_type: ");
      sb.Append(Resp_type);
      sb.Append(",Result_type: ");
      sb.Append(Result_type);
      sb.Append(",Fight_describe: ");
      sb.Append(Fight_describe);
      sb.Append(",AttackerLoss: ");
      sb.Append(AttackerLoss);
      sb.Append(",TargetLoss: ");
      sb.Append(TargetLoss);
      sb.Append(",AttackerFriend: ");
      sb.Append(AttackerFriend);
      sb.Append(",TargetFriend: ");
      sb.Append(TargetFriend);
      sb.Append(",FightActionList: ");
      sb.Append(FightActionList);
      sb.Append(",AttackerName: ");
      sb.Append(AttackerName);
      sb.Append(",TargetName: ");
      sb.Append(TargetName);
      sb.Append(",Id: ");
      sb.Append(Id);
      sb.Append(",Scene: ");
      sb.Append(Scene);
      sb.Append(",IsLast: ");
      sb.Append(IsLast);
      sb.Append(",IsPass: ");
      sb.Append(IsPass);
      sb.Append(",Attacker_fighting_capacity: ");
      sb.Append(Attacker_fighting_capacity);
      sb.Append(",Target_fighting_capacity: ");
      sb.Append(Target_fighting_capacity);
      sb.Append(",General_id: ");
      sb.Append(General_id);
      sb.Append(",Leader_id: ");
      sb.Append(Leader_id);
      sb.Append(",Fight_time: ");
      sb.Append(Fight_time);
      sb.Append(",Defeat_score: ");
      sb.Append(Defeat_score);
      sb.Append(",QuestionResponse: ");
      sb.Append(QuestionResponse== null ? "<null>" : QuestionResponse.ToString());
      sb.Append(",Opration_id: ");
      sb.Append(Opration_id);
      sb.Append(",FightActionSchemeList: ");
      sb.Append(FightActionSchemeList);
      sb.Append(",BorrowGeneralList: ");
      sb.Append(BorrowGeneralList);
      sb.Append(",PlunderGarrison: ");
      sb.Append(PlunderGarrison== null ? "<null>" : PlunderGarrison.ToString());
      sb.Append(",Attacker_banner: ");
      sb.Append(Attacker_banner);
      sb.Append(",Target_banner: ");
      sb.Append(Target_banner);
      sb.Append(",ListAward: ");
      sb.Append(ListAward);
      sb.Append(",Fight_share_name: ");
      sb.Append(Fight_share_name);
      sb.Append(",ListFightStrategy: ");
      sb.Append(ListFightStrategy);
      sb.Append(",IsFightStrategy: ");
      sb.Append(IsFightStrategy);
      sb.Append(",IsSucc: ");
      sb.Append(IsSucc);
      sb.Append(",SkillDataList: ");
      sb.Append(SkillDataList);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
