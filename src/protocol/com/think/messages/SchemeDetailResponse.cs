/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace com.think.messages
{

  [Serializable]
  public partial class SchemeDetailResponse : TBase
  {
    private int _instance_id;
    private int _scheme_id;
    private string _schemeName;
    private byte _trait;
    private byte _type;
    private int _requiredLevel;
    private int _iconID;
    private int _specialEfficiencyID;
    private string _description;
    private string _attribute_description;
    private byte _star_lvl;
    private int _synthetize_probability;

    public int Instance_id
    {
      get
      {
        return _instance_id;
      }
      set
      {
        __isset.instance_id = true;
        this._instance_id = value;
      }
    }

    public int Scheme_id
    {
      get
      {
        return _scheme_id;
      }
      set
      {
        __isset.scheme_id = true;
        this._scheme_id = value;
      }
    }

    public string SchemeName
    {
      get
      {
        return _schemeName;
      }
      set
      {
        __isset.schemeName = true;
        this._schemeName = value;
      }
    }

    public byte Trait
    {
      get
      {
        return _trait;
      }
      set
      {
        __isset.trait = true;
        this._trait = value;
      }
    }

    public byte Type
    {
      get
      {
        return _type;
      }
      set
      {
        __isset.type = true;
        this._type = value;
      }
    }

    public int RequiredLevel
    {
      get
      {
        return _requiredLevel;
      }
      set
      {
        __isset.requiredLevel = true;
        this._requiredLevel = value;
      }
    }

    public int IconID
    {
      get
      {
        return _iconID;
      }
      set
      {
        __isset.iconID = true;
        this._iconID = value;
      }
    }

    public int SpecialEfficiencyID
    {
      get
      {
        return _specialEfficiencyID;
      }
      set
      {
        __isset.specialEfficiencyID = true;
        this._specialEfficiencyID = value;
      }
    }

    public string Description
    {
      get
      {
        return _description;
      }
      set
      {
        __isset.description = true;
        this._description = value;
      }
    }

    public string Attribute_description
    {
      get
      {
        return _attribute_description;
      }
      set
      {
        __isset.attribute_description = true;
        this._attribute_description = value;
      }
    }

    public byte Star_lvl
    {
      get
      {
        return _star_lvl;
      }
      set
      {
        __isset.star_lvl = true;
        this._star_lvl = value;
      }
    }

    public int Synthetize_probability
    {
      get
      {
        return _synthetize_probability;
      }
      set
      {
        __isset.synthetize_probability = true;
        this._synthetize_probability = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool instance_id;
      public bool scheme_id;
      public bool schemeName;
      public bool trait;
      public bool type;
      public bool requiredLevel;
      public bool iconID;
      public bool specialEfficiencyID;
      public bool description;
      public bool attribute_description;
      public bool star_lvl;
      public bool synthetize_probability;
    }

    public SchemeDetailResponse() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              Instance_id = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              Scheme_id = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              SchemeName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Byte) {
              Trait = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Byte) {
              Type = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              RequiredLevel = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I32) {
              IconID = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.I32) {
              SpecialEfficiencyID = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.String) {
              Description = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.String) {
              Attribute_description = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.Byte) {
              Star_lvl = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.I32) {
              Synthetize_probability = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("SchemeDetailResponse");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.instance_id) {
        field.Name = "instance_id";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Instance_id);
        oprot.WriteFieldEnd();
      }
      if (__isset.scheme_id) {
        field.Name = "scheme_id";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Scheme_id);
        oprot.WriteFieldEnd();
      }
      if (SchemeName != null && __isset.schemeName) {
        field.Name = "schemeName";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(SchemeName);
        oprot.WriteFieldEnd();
      }
      if (__isset.trait) {
        field.Name = "trait";
        field.Type = TType.Byte;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(Trait);
        oprot.WriteFieldEnd();
      }
      if (__isset.type) {
        field.Name = "type";
        field.Type = TType.Byte;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(Type);
        oprot.WriteFieldEnd();
      }
      if (__isset.requiredLevel) {
        field.Name = "requiredLevel";
        field.Type = TType.I32;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(RequiredLevel);
        oprot.WriteFieldEnd();
      }
      if (__isset.iconID) {
        field.Name = "iconID";
        field.Type = TType.I32;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(IconID);
        oprot.WriteFieldEnd();
      }
      if (__isset.specialEfficiencyID) {
        field.Name = "specialEfficiencyID";
        field.Type = TType.I32;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(SpecialEfficiencyID);
        oprot.WriteFieldEnd();
      }
      if (Description != null && __isset.description) {
        field.Name = "description";
        field.Type = TType.String;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Description);
        oprot.WriteFieldEnd();
      }
      if (Attribute_description != null && __isset.attribute_description) {
        field.Name = "attribute_description";
        field.Type = TType.String;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Attribute_description);
        oprot.WriteFieldEnd();
      }
      if (__isset.star_lvl) {
        field.Name = "star_lvl";
        field.Type = TType.Byte;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(Star_lvl);
        oprot.WriteFieldEnd();
      }
      if (__isset.synthetize_probability) {
        field.Name = "synthetize_probability";
        field.Type = TType.I32;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Synthetize_probability);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("SchemeDetailResponse(");
      sb.Append("Instance_id: ");
      sb.Append(Instance_id);
      sb.Append(",Scheme_id: ");
      sb.Append(Scheme_id);
      sb.Append(",SchemeName: ");
      sb.Append(SchemeName);
      sb.Append(",Trait: ");
      sb.Append(Trait);
      sb.Append(",Type: ");
      sb.Append(Type);
      sb.Append(",RequiredLevel: ");
      sb.Append(RequiredLevel);
      sb.Append(",IconID: ");
      sb.Append(IconID);
      sb.Append(",SpecialEfficiencyID: ");
      sb.Append(SpecialEfficiencyID);
      sb.Append(",Description: ");
      sb.Append(Description);
      sb.Append(",Attribute_description: ");
      sb.Append(Attribute_description);
      sb.Append(",Star_lvl: ");
      sb.Append(Star_lvl);
      sb.Append(",Synthetize_probability: ");
      sb.Append(Synthetize_probability);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
