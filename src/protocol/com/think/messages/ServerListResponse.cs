/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace com.think.messages
{

  [Serializable]
  public partial class ServerListResponse : TBase
  {
    private List<ServerResponse> _hasLoginServerResponseList;
    private List<ServerResponse> _newServerResponseList;
    private byte _resType;
    private List<ServerRole> _roleList;

    public List<ServerResponse> HasLoginServerResponseList
    {
      get
      {
        return _hasLoginServerResponseList;
      }
      set
      {
        __isset.hasLoginServerResponseList = true;
        this._hasLoginServerResponseList = value;
      }
    }

    public List<ServerResponse> NewServerResponseList
    {
      get
      {
        return _newServerResponseList;
      }
      set
      {
        __isset.newServerResponseList = true;
        this._newServerResponseList = value;
      }
    }

    public byte ResType
    {
      get
      {
        return _resType;
      }
      set
      {
        __isset.resType = true;
        this._resType = value;
      }
    }

    public List<ServerRole> RoleList
    {
      get
      {
        return _roleList;
      }
      set
      {
        __isset.roleList = true;
        this._roleList = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool hasLoginServerResponseList;
      public bool newServerResponseList;
      public bool resType;
      public bool roleList;
    }

    public ServerListResponse() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.List) {
              {
                HasLoginServerResponseList = new List<ServerResponse>();
                TList _list0 = iprot.ReadListBegin();
                for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                {
                  ServerResponse _elem2 = new ServerResponse();
                  _elem2 = new ServerResponse();
                  _elem2.Read(iprot);
                  HasLoginServerResponseList.Add(_elem2);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.List) {
              {
                NewServerResponseList = new List<ServerResponse>();
                TList _list3 = iprot.ReadListBegin();
                for( int _i4 = 0; _i4 < _list3.Count; ++_i4)
                {
                  ServerResponse _elem5 = new ServerResponse();
                  _elem5 = new ServerResponse();
                  _elem5.Read(iprot);
                  NewServerResponseList.Add(_elem5);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Byte) {
              ResType = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.List) {
              {
                RoleList = new List<ServerRole>();
                TList _list6 = iprot.ReadListBegin();
                for( int _i7 = 0; _i7 < _list6.Count; ++_i7)
                {
                  ServerRole _elem8 = new ServerRole();
                  _elem8 = new ServerRole();
                  _elem8.Read(iprot);
                  RoleList.Add(_elem8);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("ServerListResponse");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (HasLoginServerResponseList != null && __isset.hasLoginServerResponseList) {
        field.Name = "hasLoginServerResponseList";
        field.Type = TType.List;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, HasLoginServerResponseList.Count));
          foreach (ServerResponse _iter9 in HasLoginServerResponseList)
          {
            _iter9.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (NewServerResponseList != null && __isset.newServerResponseList) {
        field.Name = "newServerResponseList";
        field.Type = TType.List;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, NewServerResponseList.Count));
          foreach (ServerResponse _iter10 in NewServerResponseList)
          {
            _iter10.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.resType) {
        field.Name = "resType";
        field.Type = TType.Byte;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(ResType);
        oprot.WriteFieldEnd();
      }
      if (RoleList != null && __isset.roleList) {
        field.Name = "roleList";
        field.Type = TType.List;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, RoleList.Count));
          foreach (ServerRole _iter11 in RoleList)
          {
            _iter11.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("ServerListResponse(");
      sb.Append("HasLoginServerResponseList: ");
      sb.Append(HasLoginServerResponseList);
      sb.Append(",NewServerResponseList: ");
      sb.Append(NewServerResponseList);
      sb.Append(",ResType: ");
      sb.Append(ResType);
      sb.Append(",RoleList: ");
      sb.Append(RoleList);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
