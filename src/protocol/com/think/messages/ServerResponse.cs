/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace com.think.messages
{

  [Serializable]
  public partial class ServerResponse : TBase
  {
    private int _server_id;
    private string _server_name;
    private byte _state;
    private string _remote_host;
    private int _remote_port;
    private bool _isHasRole;
    private bool _isNewServer;

    public int Server_id
    {
      get
      {
        return _server_id;
      }
      set
      {
        __isset.server_id = true;
        this._server_id = value;
      }
    }

    public string Server_name
    {
      get
      {
        return _server_name;
      }
      set
      {
        __isset.server_name = true;
        this._server_name = value;
      }
    }

    public byte State
    {
      get
      {
        return _state;
      }
      set
      {
        __isset.state = true;
        this._state = value;
      }
    }

    public string Remote_host
    {
      get
      {
        return _remote_host;
      }
      set
      {
        __isset.remote_host = true;
        this._remote_host = value;
      }
    }

    public int Remote_port
    {
      get
      {
        return _remote_port;
      }
      set
      {
        __isset.remote_port = true;
        this._remote_port = value;
      }
    }

    public bool IsHasRole
    {
      get
      {
        return _isHasRole;
      }
      set
      {
        __isset.isHasRole = true;
        this._isHasRole = value;
      }
    }

    public bool IsNewServer
    {
      get
      {
        return _isNewServer;
      }
      set
      {
        __isset.isNewServer = true;
        this._isNewServer = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool server_id;
      public bool server_name;
      public bool state;
      public bool remote_host;
      public bool remote_port;
      public bool isHasRole;
      public bool isNewServer;
    }

    public ServerResponse() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              Server_id = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Server_name = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Byte) {
              State = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              Remote_host = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              Remote_port = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.Bool) {
              IsHasRole = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.Bool) {
              IsNewServer = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("ServerResponse");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.server_id) {
        field.Name = "server_id";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Server_id);
        oprot.WriteFieldEnd();
      }
      if (Server_name != null && __isset.server_name) {
        field.Name = "server_name";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Server_name);
        oprot.WriteFieldEnd();
      }
      if (__isset.state) {
        field.Name = "state";
        field.Type = TType.Byte;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(State);
        oprot.WriteFieldEnd();
      }
      if (Remote_host != null && __isset.remote_host) {
        field.Name = "remote_host";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Remote_host);
        oprot.WriteFieldEnd();
      }
      if (__isset.remote_port) {
        field.Name = "remote_port";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Remote_port);
        oprot.WriteFieldEnd();
      }
      if (__isset.isHasRole) {
        field.Name = "isHasRole";
        field.Type = TType.Bool;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(IsHasRole);
        oprot.WriteFieldEnd();
      }
      if (__isset.isNewServer) {
        field.Name = "isNewServer";
        field.Type = TType.Bool;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(IsNewServer);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("ServerResponse(");
      sb.Append("Server_id: ");
      sb.Append(Server_id);
      sb.Append(",Server_name: ");
      sb.Append(Server_name);
      sb.Append(",State: ");
      sb.Append(State);
      sb.Append(",Remote_host: ");
      sb.Append(Remote_host);
      sb.Append(",Remote_port: ");
      sb.Append(Remote_port);
      sb.Append(",IsHasRole: ");
      sb.Append(IsHasRole);
      sb.Append(",IsNewServer: ");
      sb.Append(IsNewServer);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
