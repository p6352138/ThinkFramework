/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace com.think.messages
{

  [Serializable]
  public partial class ShortMsgRequest : TBase
  {
    private byte _msgType;
    private long _msgID;

    public byte MsgType
    {
      get
      {
        return _msgType;
      }
      set
      {
        __isset.msgType = true;
        this._msgType = value;
      }
    }

    public long MsgID
    {
      get
      {
        return _msgID;
      }
      set
      {
        __isset.msgID = true;
        this._msgID = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool msgType;
      public bool msgID;
    }

    public ShortMsgRequest() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Byte) {
              MsgType = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I64) {
              MsgID = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("ShortMsgRequest");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.msgType) {
        field.Name = "msgType";
        field.Type = TType.Byte;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(MsgType);
        oprot.WriteFieldEnd();
      }
      if (__isset.msgID) {
        field.Name = "msgID";
        field.Type = TType.I64;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(MsgID);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("ShortMsgRequest(");
      sb.Append("MsgType: ");
      sb.Append(MsgType);
      sb.Append(",MsgID: ");
      sb.Append(MsgID);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
