/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace com.think.messages
{

  [Serializable]
  public partial class StarDetailResponse : TBase
  {
    private int _general_id;
    private int _star_id;
    private string _starName;
    private byte _trait;
    private int _requiredLevel;
    private int _iconID;
    private int _specialEfficiencyID;
    private string _description;
    private int _star_lvl;
    private int _probability;
    private Dictionary<byte, int> _attributeMap;
    private int _categoryImage;
    private string _categoryName;
    private int _next_categoryImage;
    private string _next_categoryName;
    private int _next_categoryStarLvl;

    public int General_id
    {
      get
      {
        return _general_id;
      }
      set
      {
        __isset.general_id = true;
        this._general_id = value;
      }
    }

    public int Star_id
    {
      get
      {
        return _star_id;
      }
      set
      {
        __isset.star_id = true;
        this._star_id = value;
      }
    }

    public string StarName
    {
      get
      {
        return _starName;
      }
      set
      {
        __isset.starName = true;
        this._starName = value;
      }
    }

    public byte Trait
    {
      get
      {
        return _trait;
      }
      set
      {
        __isset.trait = true;
        this._trait = value;
      }
    }

    public int RequiredLevel
    {
      get
      {
        return _requiredLevel;
      }
      set
      {
        __isset.requiredLevel = true;
        this._requiredLevel = value;
      }
    }

    public int IconID
    {
      get
      {
        return _iconID;
      }
      set
      {
        __isset.iconID = true;
        this._iconID = value;
      }
    }

    public int SpecialEfficiencyID
    {
      get
      {
        return _specialEfficiencyID;
      }
      set
      {
        __isset.specialEfficiencyID = true;
        this._specialEfficiencyID = value;
      }
    }

    public string Description
    {
      get
      {
        return _description;
      }
      set
      {
        __isset.description = true;
        this._description = value;
      }
    }

    public int Star_lvl
    {
      get
      {
        return _star_lvl;
      }
      set
      {
        __isset.star_lvl = true;
        this._star_lvl = value;
      }
    }

    public int Probability
    {
      get
      {
        return _probability;
      }
      set
      {
        __isset.probability = true;
        this._probability = value;
      }
    }

    public Dictionary<byte, int> AttributeMap
    {
      get
      {
        return _attributeMap;
      }
      set
      {
        __isset.attributeMap = true;
        this._attributeMap = value;
      }
    }

    public int CategoryImage
    {
      get
      {
        return _categoryImage;
      }
      set
      {
        __isset.categoryImage = true;
        this._categoryImage = value;
      }
    }

    public string CategoryName
    {
      get
      {
        return _categoryName;
      }
      set
      {
        __isset.categoryName = true;
        this._categoryName = value;
      }
    }

    public int Next_categoryImage
    {
      get
      {
        return _next_categoryImage;
      }
      set
      {
        __isset.next_categoryImage = true;
        this._next_categoryImage = value;
      }
    }

    public string Next_categoryName
    {
      get
      {
        return _next_categoryName;
      }
      set
      {
        __isset.next_categoryName = true;
        this._next_categoryName = value;
      }
    }

    public int Next_categoryStarLvl
    {
      get
      {
        return _next_categoryStarLvl;
      }
      set
      {
        __isset.next_categoryStarLvl = true;
        this._next_categoryStarLvl = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool general_id;
      public bool star_id;
      public bool starName;
      public bool trait;
      public bool requiredLevel;
      public bool iconID;
      public bool specialEfficiencyID;
      public bool description;
      public bool star_lvl;
      public bool probability;
      public bool attributeMap;
      public bool categoryImage;
      public bool categoryName;
      public bool next_categoryImage;
      public bool next_categoryName;
      public bool next_categoryStarLvl;
    }

    public StarDetailResponse() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              General_id = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              Star_id = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              StarName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Byte) {
              Trait = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              RequiredLevel = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              IconID = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I32) {
              SpecialEfficiencyID = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.String) {
              Description = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.I32) {
              Star_lvl = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.I32) {
              Probability = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.Map) {
              {
                AttributeMap = new Dictionary<byte, int>();
                TMap _map35 = iprot.ReadMapBegin();
                for( int _i36 = 0; _i36 < _map35.Count; ++_i36)
                {
                  byte _key37;
                  int _val38;
                  _key37 = iprot.ReadByte();
                  _val38 = iprot.ReadI32();
                  AttributeMap[_key37] = _val38;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.I32) {
              CategoryImage = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.String) {
              CategoryName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 14:
            if (field.Type == TType.I32) {
              Next_categoryImage = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 15:
            if (field.Type == TType.String) {
              Next_categoryName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 16:
            if (field.Type == TType.I32) {
              Next_categoryStarLvl = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("StarDetailResponse");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.general_id) {
        field.Name = "general_id";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(General_id);
        oprot.WriteFieldEnd();
      }
      if (__isset.star_id) {
        field.Name = "star_id";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Star_id);
        oprot.WriteFieldEnd();
      }
      if (StarName != null && __isset.starName) {
        field.Name = "starName";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(StarName);
        oprot.WriteFieldEnd();
      }
      if (__isset.trait) {
        field.Name = "trait";
        field.Type = TType.Byte;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(Trait);
        oprot.WriteFieldEnd();
      }
      if (__isset.requiredLevel) {
        field.Name = "requiredLevel";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(RequiredLevel);
        oprot.WriteFieldEnd();
      }
      if (__isset.iconID) {
        field.Name = "iconID";
        field.Type = TType.I32;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(IconID);
        oprot.WriteFieldEnd();
      }
      if (__isset.specialEfficiencyID) {
        field.Name = "specialEfficiencyID";
        field.Type = TType.I32;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(SpecialEfficiencyID);
        oprot.WriteFieldEnd();
      }
      if (Description != null && __isset.description) {
        field.Name = "description";
        field.Type = TType.String;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Description);
        oprot.WriteFieldEnd();
      }
      if (__isset.star_lvl) {
        field.Name = "star_lvl";
        field.Type = TType.I32;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Star_lvl);
        oprot.WriteFieldEnd();
      }
      if (__isset.probability) {
        field.Name = "probability";
        field.Type = TType.I32;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Probability);
        oprot.WriteFieldEnd();
      }
      if (AttributeMap != null && __isset.attributeMap) {
        field.Name = "attributeMap";
        field.Type = TType.Map;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.Byte, TType.I32, AttributeMap.Count));
          foreach (byte _iter39 in AttributeMap.Keys)
          {
            oprot.WriteByte(_iter39);
            oprot.WriteI32(AttributeMap[_iter39]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.categoryImage) {
        field.Name = "categoryImage";
        field.Type = TType.I32;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(CategoryImage);
        oprot.WriteFieldEnd();
      }
      if (CategoryName != null && __isset.categoryName) {
        field.Name = "categoryName";
        field.Type = TType.String;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(CategoryName);
        oprot.WriteFieldEnd();
      }
      if (__isset.next_categoryImage) {
        field.Name = "next_categoryImage";
        field.Type = TType.I32;
        field.ID = 14;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Next_categoryImage);
        oprot.WriteFieldEnd();
      }
      if (Next_categoryName != null && __isset.next_categoryName) {
        field.Name = "next_categoryName";
        field.Type = TType.String;
        field.ID = 15;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Next_categoryName);
        oprot.WriteFieldEnd();
      }
      if (__isset.next_categoryStarLvl) {
        field.Name = "next_categoryStarLvl";
        field.Type = TType.I32;
        field.ID = 16;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Next_categoryStarLvl);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("StarDetailResponse(");
      sb.Append("General_id: ");
      sb.Append(General_id);
      sb.Append(",Star_id: ");
      sb.Append(Star_id);
      sb.Append(",StarName: ");
      sb.Append(StarName);
      sb.Append(",Trait: ");
      sb.Append(Trait);
      sb.Append(",RequiredLevel: ");
      sb.Append(RequiredLevel);
      sb.Append(",IconID: ");
      sb.Append(IconID);
      sb.Append(",SpecialEfficiencyID: ");
      sb.Append(SpecialEfficiencyID);
      sb.Append(",Description: ");
      sb.Append(Description);
      sb.Append(",Star_lvl: ");
      sb.Append(Star_lvl);
      sb.Append(",Probability: ");
      sb.Append(Probability);
      sb.Append(",AttributeMap: ");
      sb.Append(AttributeMap);
      sb.Append(",CategoryImage: ");
      sb.Append(CategoryImage);
      sb.Append(",CategoryName: ");
      sb.Append(CategoryName);
      sb.Append(",Next_categoryImage: ");
      sb.Append(Next_categoryImage);
      sb.Append(",Next_categoryName: ");
      sb.Append(Next_categoryName);
      sb.Append(",Next_categoryStarLvl: ");
      sb.Append(Next_categoryStarLvl);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
