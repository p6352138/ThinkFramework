/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace com.think.messages
{

  [Serializable]
  public partial class StoreListResponse : TBase
  {
    private byte _list_type;
    private List<StoreResponse> _listStore;

    public byte List_type
    {
      get
      {
        return _list_type;
      }
      set
      {
        __isset.list_type = true;
        this._list_type = value;
      }
    }

    public List<StoreResponse> ListStore
    {
      get
      {
        return _listStore;
      }
      set
      {
        __isset.listStore = true;
        this._listStore = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool list_type;
      public bool listStore;
    }

    public StoreListResponse() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Byte) {
              List_type = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.List) {
              {
                ListStore = new List<StoreResponse>();
                TList _list464 = iprot.ReadListBegin();
                for( int _i465 = 0; _i465 < _list464.Count; ++_i465)
                {
                  StoreResponse _elem466 = new StoreResponse();
                  _elem466 = new StoreResponse();
                  _elem466.Read(iprot);
                  ListStore.Add(_elem466);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("StoreListResponse");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.list_type) {
        field.Name = "list_type";
        field.Type = TType.Byte;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(List_type);
        oprot.WriteFieldEnd();
      }
      if (ListStore != null && __isset.listStore) {
        field.Name = "listStore";
        field.Type = TType.List;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, ListStore.Count));
          foreach (StoreResponse _iter467 in ListStore)
          {
            _iter467.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("StoreListResponse(");
      sb.Append("List_type: ");
      sb.Append(List_type);
      sb.Append(",ListStore: ");
      sb.Append(ListStore);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
