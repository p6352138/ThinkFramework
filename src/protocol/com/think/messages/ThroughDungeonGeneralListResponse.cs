/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace com.think.messages
{

  [Serializable]
  public partial class ThroughDungeonGeneralListResponse : TBase
  {
    private int _dungeonId;
    private int _currentDungeonMapId;
    private string _currentDungeonMapName;
    private int _refeshGold;
    private List<ThroughDungeonGeneralResponse> _throughDungeonGeneralResponseList;
    private int _cg_image_id;
    private int _currentCheckPointsNum;
    private int _notPassCheckPointsNum;
    private string _dropItem;
    private bool _canAatomatic;

    public int DungeonId
    {
      get
      {
        return _dungeonId;
      }
      set
      {
        __isset.dungeonId = true;
        this._dungeonId = value;
      }
    }

    public int CurrentDungeonMapId
    {
      get
      {
        return _currentDungeonMapId;
      }
      set
      {
        __isset.currentDungeonMapId = true;
        this._currentDungeonMapId = value;
      }
    }

    public string CurrentDungeonMapName
    {
      get
      {
        return _currentDungeonMapName;
      }
      set
      {
        __isset.currentDungeonMapName = true;
        this._currentDungeonMapName = value;
      }
    }

    public int RefeshGold
    {
      get
      {
        return _refeshGold;
      }
      set
      {
        __isset.refeshGold = true;
        this._refeshGold = value;
      }
    }

    public List<ThroughDungeonGeneralResponse> ThroughDungeonGeneralResponseList
    {
      get
      {
        return _throughDungeonGeneralResponseList;
      }
      set
      {
        __isset.throughDungeonGeneralResponseList = true;
        this._throughDungeonGeneralResponseList = value;
      }
    }

    public int Cg_image_id
    {
      get
      {
        return _cg_image_id;
      }
      set
      {
        __isset.cg_image_id = true;
        this._cg_image_id = value;
      }
    }

    public int CurrentCheckPointsNum
    {
      get
      {
        return _currentCheckPointsNum;
      }
      set
      {
        __isset.currentCheckPointsNum = true;
        this._currentCheckPointsNum = value;
      }
    }

    public int NotPassCheckPointsNum
    {
      get
      {
        return _notPassCheckPointsNum;
      }
      set
      {
        __isset.notPassCheckPointsNum = true;
        this._notPassCheckPointsNum = value;
      }
    }

    public string DropItem
    {
      get
      {
        return _dropItem;
      }
      set
      {
        __isset.dropItem = true;
        this._dropItem = value;
      }
    }

    public bool CanAatomatic
    {
      get
      {
        return _canAatomatic;
      }
      set
      {
        __isset.canAatomatic = true;
        this._canAatomatic = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool dungeonId;
      public bool currentDungeonMapId;
      public bool currentDungeonMapName;
      public bool refeshGold;
      public bool throughDungeonGeneralResponseList;
      public bool cg_image_id;
      public bool currentCheckPointsNum;
      public bool notPassCheckPointsNum;
      public bool dropItem;
      public bool canAatomatic;
    }

    public ThroughDungeonGeneralListResponse() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              DungeonId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              CurrentDungeonMapId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              CurrentDungeonMapName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              RefeshGold = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.List) {
              {
                ThroughDungeonGeneralResponseList = new List<ThroughDungeonGeneralResponse>();
                TList _list291 = iprot.ReadListBegin();
                for( int _i292 = 0; _i292 < _list291.Count; ++_i292)
                {
                  ThroughDungeonGeneralResponse _elem293 = new ThroughDungeonGeneralResponse();
                  _elem293 = new ThroughDungeonGeneralResponse();
                  _elem293.Read(iprot);
                  ThroughDungeonGeneralResponseList.Add(_elem293);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              Cg_image_id = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I32) {
              CurrentCheckPointsNum = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.I32) {
              NotPassCheckPointsNum = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.String) {
              DropItem = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.Bool) {
              CanAatomatic = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("ThroughDungeonGeneralListResponse");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.dungeonId) {
        field.Name = "dungeonId";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(DungeonId);
        oprot.WriteFieldEnd();
      }
      if (__isset.currentDungeonMapId) {
        field.Name = "currentDungeonMapId";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(CurrentDungeonMapId);
        oprot.WriteFieldEnd();
      }
      if (CurrentDungeonMapName != null && __isset.currentDungeonMapName) {
        field.Name = "currentDungeonMapName";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(CurrentDungeonMapName);
        oprot.WriteFieldEnd();
      }
      if (__isset.refeshGold) {
        field.Name = "refeshGold";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(RefeshGold);
        oprot.WriteFieldEnd();
      }
      if (ThroughDungeonGeneralResponseList != null && __isset.throughDungeonGeneralResponseList) {
        field.Name = "throughDungeonGeneralResponseList";
        field.Type = TType.List;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, ThroughDungeonGeneralResponseList.Count));
          foreach (ThroughDungeonGeneralResponse _iter294 in ThroughDungeonGeneralResponseList)
          {
            _iter294.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.cg_image_id) {
        field.Name = "cg_image_id";
        field.Type = TType.I32;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Cg_image_id);
        oprot.WriteFieldEnd();
      }
      if (__isset.currentCheckPointsNum) {
        field.Name = "currentCheckPointsNum";
        field.Type = TType.I32;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(CurrentCheckPointsNum);
        oprot.WriteFieldEnd();
      }
      if (__isset.notPassCheckPointsNum) {
        field.Name = "notPassCheckPointsNum";
        field.Type = TType.I32;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(NotPassCheckPointsNum);
        oprot.WriteFieldEnd();
      }
      if (DropItem != null && __isset.dropItem) {
        field.Name = "dropItem";
        field.Type = TType.String;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(DropItem);
        oprot.WriteFieldEnd();
      }
      if (__isset.canAatomatic) {
        field.Name = "canAatomatic";
        field.Type = TType.Bool;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(CanAatomatic);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("ThroughDungeonGeneralListResponse(");
      sb.Append("DungeonId: ");
      sb.Append(DungeonId);
      sb.Append(",CurrentDungeonMapId: ");
      sb.Append(CurrentDungeonMapId);
      sb.Append(",CurrentDungeonMapName: ");
      sb.Append(CurrentDungeonMapName);
      sb.Append(",RefeshGold: ");
      sb.Append(RefeshGold);
      sb.Append(",ThroughDungeonGeneralResponseList: ");
      sb.Append(ThroughDungeonGeneralResponseList);
      sb.Append(",Cg_image_id: ");
      sb.Append(Cg_image_id);
      sb.Append(",CurrentCheckPointsNum: ");
      sb.Append(CurrentCheckPointsNum);
      sb.Append(",NotPassCheckPointsNum: ");
      sb.Append(NotPassCheckPointsNum);
      sb.Append(",DropItem: ");
      sb.Append(DropItem);
      sb.Append(",CanAatomatic: ");
      sb.Append(CanAatomatic);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
