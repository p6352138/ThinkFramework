/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace com.think.messages
{

  [Serializable]
  public partial class ToShowOffRequest : TBase
  {
    private byte _showOff_type;
    private int _showOff_id;
    private string _show_name;

    public byte ShowOff_type
    {
      get
      {
        return _showOff_type;
      }
      set
      {
        __isset.showOff_type = true;
        this._showOff_type = value;
      }
    }

    public int ShowOff_id
    {
      get
      {
        return _showOff_id;
      }
      set
      {
        __isset.showOff_id = true;
        this._showOff_id = value;
      }
    }

    public string Show_name
    {
      get
      {
        return _show_name;
      }
      set
      {
        __isset.show_name = true;
        this._show_name = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool showOff_type;
      public bool showOff_id;
      public bool show_name;
    }

    public ToShowOffRequest() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Byte) {
              ShowOff_type = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              ShowOff_id = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              Show_name = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("ToShowOffRequest");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.showOff_type) {
        field.Name = "showOff_type";
        field.Type = TType.Byte;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(ShowOff_type);
        oprot.WriteFieldEnd();
      }
      if (__isset.showOff_id) {
        field.Name = "showOff_id";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ShowOff_id);
        oprot.WriteFieldEnd();
      }
      if (Show_name != null && __isset.show_name) {
        field.Name = "show_name";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Show_name);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("ToShowOffRequest(");
      sb.Append("ShowOff_type: ");
      sb.Append(ShowOff_type);
      sb.Append(",ShowOff_id: ");
      sb.Append(ShowOff_id);
      sb.Append(",Show_name: ");
      sb.Append(Show_name);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
