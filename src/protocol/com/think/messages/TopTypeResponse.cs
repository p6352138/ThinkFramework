/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace com.think.messages
{

  [Serializable]
  public partial class TopTypeResponse : TBase
  {
    private byte _type;
    private string _type_name;
    private string _type_value;
    private List<TopPlayerResponse> _top;

    public byte Type
    {
      get
      {
        return _type;
      }
      set
      {
        __isset.type = true;
        this._type = value;
      }
    }

    public string Type_name
    {
      get
      {
        return _type_name;
      }
      set
      {
        __isset.type_name = true;
        this._type_name = value;
      }
    }

    public string Type_value
    {
      get
      {
        return _type_value;
      }
      set
      {
        __isset.type_value = true;
        this._type_value = value;
      }
    }

    public List<TopPlayerResponse> Top
    {
      get
      {
        return _top;
      }
      set
      {
        __isset.top = true;
        this._top = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool type;
      public bool type_name;
      public bool type_value;
      public bool top;
    }

    public TopTypeResponse() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Byte) {
              Type = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Type_name = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              Type_value = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.List) {
              {
                Top = new List<TopPlayerResponse>();
                TList _list670 = iprot.ReadListBegin();
                for( int _i671 = 0; _i671 < _list670.Count; ++_i671)
                {
                  TopPlayerResponse _elem672 = new TopPlayerResponse();
                  _elem672 = new TopPlayerResponse();
                  _elem672.Read(iprot);
                  Top.Add(_elem672);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("TopTypeResponse");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.type) {
        field.Name = "type";
        field.Type = TType.Byte;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(Type);
        oprot.WriteFieldEnd();
      }
      if (Type_name != null && __isset.type_name) {
        field.Name = "type_name";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Type_name);
        oprot.WriteFieldEnd();
      }
      if (Type_value != null && __isset.type_value) {
        field.Name = "type_value";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Type_value);
        oprot.WriteFieldEnd();
      }
      if (Top != null && __isset.top) {
        field.Name = "top";
        field.Type = TType.List;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Top.Count));
          foreach (TopPlayerResponse _iter673 in Top)
          {
            _iter673.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("TopTypeResponse(");
      sb.Append("Type: ");
      sb.Append(Type);
      sb.Append(",Type_name: ");
      sb.Append(Type_name);
      sb.Append(",Type_value: ");
      sb.Append(Type_value);
      sb.Append(",Top: ");
      sb.Append(Top);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
