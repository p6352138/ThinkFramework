/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace com.think.messages
{

  [Serializable]
  public partial class TreasuryResponse : TBase
  {
    private List<string> _plunder_log;
    private List<TreasuryResourceResponse> _listResource;
    private int _obtain_Time;

    public List<string> Plunder_log
    {
      get
      {
        return _plunder_log;
      }
      set
      {
        __isset.plunder_log = true;
        this._plunder_log = value;
      }
    }

    public List<TreasuryResourceResponse> ListResource
    {
      get
      {
        return _listResource;
      }
      set
      {
        __isset.listResource = true;
        this._listResource = value;
      }
    }

    public int Obtain_Time
    {
      get
      {
        return _obtain_Time;
      }
      set
      {
        __isset.obtain_Time = true;
        this._obtain_Time = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool plunder_log;
      public bool listResource;
      public bool obtain_Time;
    }

    public TreasuryResponse() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.List) {
              {
                Plunder_log = new List<string>();
                TList _list520 = iprot.ReadListBegin();
                for( int _i521 = 0; _i521 < _list520.Count; ++_i521)
                {
                  string _elem522 = null;
                  _elem522 = iprot.ReadString();
                  Plunder_log.Add(_elem522);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.List) {
              {
                ListResource = new List<TreasuryResourceResponse>();
                TList _list523 = iprot.ReadListBegin();
                for( int _i524 = 0; _i524 < _list523.Count; ++_i524)
                {
                  TreasuryResourceResponse _elem525 = new TreasuryResourceResponse();
                  _elem525 = new TreasuryResourceResponse();
                  _elem525.Read(iprot);
                  ListResource.Add(_elem525);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              Obtain_Time = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("TreasuryResponse");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Plunder_log != null && __isset.plunder_log) {
        field.Name = "plunder_log";
        field.Type = TType.List;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, Plunder_log.Count));
          foreach (string _iter526 in Plunder_log)
          {
            oprot.WriteString(_iter526);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (ListResource != null && __isset.listResource) {
        field.Name = "listResource";
        field.Type = TType.List;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, ListResource.Count));
          foreach (TreasuryResourceResponse _iter527 in ListResource)
          {
            _iter527.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.obtain_Time) {
        field.Name = "obtain_Time";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Obtain_Time);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("TreasuryResponse(");
      sb.Append("Plunder_log: ");
      sb.Append(Plunder_log);
      sb.Append(",ListResource: ");
      sb.Append(ListResource);
      sb.Append(",Obtain_Time: ");
      sb.Append(Obtain_Time);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
