/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace com.think.messages
{

  [Serializable]
  public partial class UniqueSkillListResponse : TBase
  {
    private List<UniqueSkillGroupResponse> _uniqueSkillGroupList;
    private string _uniqueSkillIntro;

    public List<UniqueSkillGroupResponse> UniqueSkillGroupList
    {
      get
      {
        return _uniqueSkillGroupList;
      }
      set
      {
        __isset.uniqueSkillGroupList = true;
        this._uniqueSkillGroupList = value;
      }
    }

    public string UniqueSkillIntro
    {
      get
      {
        return _uniqueSkillIntro;
      }
      set
      {
        __isset.uniqueSkillIntro = true;
        this._uniqueSkillIntro = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool uniqueSkillGroupList;
      public bool uniqueSkillIntro;
    }

    public UniqueSkillListResponse() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.List) {
              {
                UniqueSkillGroupList = new List<UniqueSkillGroupResponse>();
                TList _list437 = iprot.ReadListBegin();
                for( int _i438 = 0; _i438 < _list437.Count; ++_i438)
                {
                  UniqueSkillGroupResponse _elem439 = new UniqueSkillGroupResponse();
                  _elem439 = new UniqueSkillGroupResponse();
                  _elem439.Read(iprot);
                  UniqueSkillGroupList.Add(_elem439);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              UniqueSkillIntro = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("UniqueSkillListResponse");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (UniqueSkillGroupList != null && __isset.uniqueSkillGroupList) {
        field.Name = "uniqueSkillGroupList";
        field.Type = TType.List;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, UniqueSkillGroupList.Count));
          foreach (UniqueSkillGroupResponse _iter440 in UniqueSkillGroupList)
          {
            _iter440.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (UniqueSkillIntro != null && __isset.uniqueSkillIntro) {
        field.Name = "uniqueSkillIntro";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(UniqueSkillIntro);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("UniqueSkillListResponse(");
      sb.Append("UniqueSkillGroupList: ");
      sb.Append(UniqueSkillGroupList);
      sb.Append(",UniqueSkillIntro: ");
      sb.Append(UniqueSkillIntro);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
