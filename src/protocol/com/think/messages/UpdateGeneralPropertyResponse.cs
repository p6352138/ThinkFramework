/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace com.think.messages
{

  [Serializable]
  public partial class UpdateGeneralPropertyResponse : TBase
  {
    private int _general_id;
    private long _exp;
    private long _upgradeNeedExp;
    private Dictionary<byte, int> _attributeMap;

    public int General_id
    {
      get
      {
        return _general_id;
      }
      set
      {
        __isset.general_id = true;
        this._general_id = value;
      }
    }

    public long Exp
    {
      get
      {
        return _exp;
      }
      set
      {
        __isset.exp = true;
        this._exp = value;
      }
    }

    public long UpgradeNeedExp
    {
      get
      {
        return _upgradeNeedExp;
      }
      set
      {
        __isset.upgradeNeedExp = true;
        this._upgradeNeedExp = value;
      }
    }

    public Dictionary<byte, int> AttributeMap
    {
      get
      {
        return _attributeMap;
      }
      set
      {
        __isset.attributeMap = true;
        this._attributeMap = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool general_id;
      public bool exp;
      public bool upgradeNeedExp;
      public bool attributeMap;
    }

    public UpdateGeneralPropertyResponse() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              General_id = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I64) {
              Exp = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I64) {
              UpgradeNeedExp = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Map) {
              {
                AttributeMap = new Dictionary<byte, int>();
                TMap _map445 = iprot.ReadMapBegin();
                for( int _i446 = 0; _i446 < _map445.Count; ++_i446)
                {
                  byte _key447;
                  int _val448;
                  _key447 = iprot.ReadByte();
                  _val448 = iprot.ReadI32();
                  AttributeMap[_key447] = _val448;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("UpdateGeneralPropertyResponse");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.general_id) {
        field.Name = "general_id";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(General_id);
        oprot.WriteFieldEnd();
      }
      if (__isset.exp) {
        field.Name = "exp";
        field.Type = TType.I64;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Exp);
        oprot.WriteFieldEnd();
      }
      if (__isset.upgradeNeedExp) {
        field.Name = "upgradeNeedExp";
        field.Type = TType.I64;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(UpgradeNeedExp);
        oprot.WriteFieldEnd();
      }
      if (AttributeMap != null && __isset.attributeMap) {
        field.Name = "attributeMap";
        field.Type = TType.Map;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.Byte, TType.I32, AttributeMap.Count));
          foreach (byte _iter449 in AttributeMap.Keys)
          {
            oprot.WriteByte(_iter449);
            oprot.WriteI32(AttributeMap[_iter449]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("UpdateGeneralPropertyResponse(");
      sb.Append("General_id: ");
      sb.Append(General_id);
      sb.Append(",Exp: ");
      sb.Append(Exp);
      sb.Append(",UpgradeNeedExp: ");
      sb.Append(UpgradeNeedExp);
      sb.Append(",AttributeMap: ");
      sb.Append(AttributeMap);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
