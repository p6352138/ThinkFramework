/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace com.think.messages
{

  [Serializable]
  public partial class VipPayResponse : TBase
  {
    private int _vip_id;
    private string _name;
    private byte _vip_lvl;
    private int _pay_gold;
    private string _desc;
    private string _intro;
    private List<VipPayAwardResponse> _award;
    private byte _state;

    public int Vip_id
    {
      get
      {
        return _vip_id;
      }
      set
      {
        __isset.vip_id = true;
        this._vip_id = value;
      }
    }

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    public byte Vip_lvl
    {
      get
      {
        return _vip_lvl;
      }
      set
      {
        __isset.vip_lvl = true;
        this._vip_lvl = value;
      }
    }

    public int Pay_gold
    {
      get
      {
        return _pay_gold;
      }
      set
      {
        __isset.pay_gold = true;
        this._pay_gold = value;
      }
    }

    public string Desc
    {
      get
      {
        return _desc;
      }
      set
      {
        __isset.desc = true;
        this._desc = value;
      }
    }

    public string Intro
    {
      get
      {
        return _intro;
      }
      set
      {
        __isset.intro = true;
        this._intro = value;
      }
    }

    public List<VipPayAwardResponse> Award
    {
      get
      {
        return _award;
      }
      set
      {
        __isset.award = true;
        this._award = value;
      }
    }

    public byte State
    {
      get
      {
        return _state;
      }
      set
      {
        __isset.state = true;
        this._state = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool vip_id;
      public bool name;
      public bool vip_lvl;
      public bool pay_gold;
      public bool desc;
      public bool intro;
      public bool award;
      public bool state;
    }

    public VipPayResponse() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              Vip_id = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Name = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Byte) {
              Vip_lvl = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              Pay_gold = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              Desc = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.String) {
              Intro = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.List) {
              {
                Award = new List<VipPayAwardResponse>();
                TList _list450 = iprot.ReadListBegin();
                for( int _i451 = 0; _i451 < _list450.Count; ++_i451)
                {
                  VipPayAwardResponse _elem452 = new VipPayAwardResponse();
                  _elem452 = new VipPayAwardResponse();
                  _elem452.Read(iprot);
                  Award.Add(_elem452);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.Byte) {
              State = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("VipPayResponse");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.vip_id) {
        field.Name = "vip_id";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Vip_id);
        oprot.WriteFieldEnd();
      }
      if (Name != null && __isset.name) {
        field.Name = "name";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Name);
        oprot.WriteFieldEnd();
      }
      if (__isset.vip_lvl) {
        field.Name = "vip_lvl";
        field.Type = TType.Byte;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(Vip_lvl);
        oprot.WriteFieldEnd();
      }
      if (__isset.pay_gold) {
        field.Name = "pay_gold";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Pay_gold);
        oprot.WriteFieldEnd();
      }
      if (Desc != null && __isset.desc) {
        field.Name = "desc";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Desc);
        oprot.WriteFieldEnd();
      }
      if (Intro != null && __isset.intro) {
        field.Name = "intro";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Intro);
        oprot.WriteFieldEnd();
      }
      if (Award != null && __isset.award) {
        field.Name = "award";
        field.Type = TType.List;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Award.Count));
          foreach (VipPayAwardResponse _iter453 in Award)
          {
            _iter453.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.state) {
        field.Name = "state";
        field.Type = TType.Byte;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(State);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("VipPayResponse(");
      sb.Append("Vip_id: ");
      sb.Append(Vip_id);
      sb.Append(",Name: ");
      sb.Append(Name);
      sb.Append(",Vip_lvl: ");
      sb.Append(Vip_lvl);
      sb.Append(",Pay_gold: ");
      sb.Append(Pay_gold);
      sb.Append(",Desc: ");
      sb.Append(Desc);
      sb.Append(",Intro: ");
      sb.Append(Intro);
      sb.Append(",Award: ");
      sb.Append(Award);
      sb.Append(",State: ");
      sb.Append(State);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
