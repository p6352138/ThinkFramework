/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace com.think.messages
{

  [Serializable]
  public partial class WalkRequest : TBase
  {
    private byte _startx;
    private byte _starty;
    private byte _endx;
    private byte _endy;

    public byte Startx
    {
      get
      {
        return _startx;
      }
      set
      {
        __isset.startx = true;
        this._startx = value;
      }
    }

    public byte Starty
    {
      get
      {
        return _starty;
      }
      set
      {
        __isset.starty = true;
        this._starty = value;
      }
    }

    public byte Endx
    {
      get
      {
        return _endx;
      }
      set
      {
        __isset.endx = true;
        this._endx = value;
      }
    }

    public byte Endy
    {
      get
      {
        return _endy;
      }
      set
      {
        __isset.endy = true;
        this._endy = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool startx;
      public bool starty;
      public bool endx;
      public bool endy;
    }

    public WalkRequest() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Byte) {
              Startx = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Byte) {
              Starty = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Byte) {
              Endx = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Byte) {
              Endy = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("WalkRequest");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.startx) {
        field.Name = "startx";
        field.Type = TType.Byte;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(Startx);
        oprot.WriteFieldEnd();
      }
      if (__isset.starty) {
        field.Name = "starty";
        field.Type = TType.Byte;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(Starty);
        oprot.WriteFieldEnd();
      }
      if (__isset.endx) {
        field.Name = "endx";
        field.Type = TType.Byte;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(Endx);
        oprot.WriteFieldEnd();
      }
      if (__isset.endy) {
        field.Name = "endy";
        field.Type = TType.Byte;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(Endy);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("WalkRequest(");
      sb.Append("Startx: ");
      sb.Append(Startx);
      sb.Append(",Starty: ");
      sb.Append(Starty);
      sb.Append(",Endx: ");
      sb.Append(Endx);
      sb.Append(",Endy: ");
      sb.Append(Endy);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
