/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace com.think.messages
{

  [Serializable]
  public partial class WorldMapInfluenceResponse : TBase
  {
    private int _mapID;
    private string _map_influence;
    private string _influence_info;
    private int _icon;
    private ResourceListResponse _resource;
    private int _image;

    public int MapID
    {
      get
      {
        return _mapID;
      }
      set
      {
        __isset.mapID = true;
        this._mapID = value;
      }
    }

    public string Map_influence
    {
      get
      {
        return _map_influence;
      }
      set
      {
        __isset.map_influence = true;
        this._map_influence = value;
      }
    }

    public string Influence_info
    {
      get
      {
        return _influence_info;
      }
      set
      {
        __isset.influence_info = true;
        this._influence_info = value;
      }
    }

    public int Icon
    {
      get
      {
        return _icon;
      }
      set
      {
        __isset.icon = true;
        this._icon = value;
      }
    }

    public ResourceListResponse Resource
    {
      get
      {
        return _resource;
      }
      set
      {
        __isset.resource = true;
        this._resource = value;
      }
    }

    public int Image
    {
      get
      {
        return _image;
      }
      set
      {
        __isset.image = true;
        this._image = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool mapID;
      public bool map_influence;
      public bool influence_info;
      public bool icon;
      public bool resource;
      public bool image;
    }

    public WorldMapInfluenceResponse() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              MapID = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Map_influence = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              Influence_info = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              Icon = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Struct) {
              Resource = new ResourceListResponse();
              Resource.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              Image = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("WorldMapInfluenceResponse");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.mapID) {
        field.Name = "mapID";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(MapID);
        oprot.WriteFieldEnd();
      }
      if (Map_influence != null && __isset.map_influence) {
        field.Name = "map_influence";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Map_influence);
        oprot.WriteFieldEnd();
      }
      if (Influence_info != null && __isset.influence_info) {
        field.Name = "influence_info";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Influence_info);
        oprot.WriteFieldEnd();
      }
      if (__isset.icon) {
        field.Name = "icon";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Icon);
        oprot.WriteFieldEnd();
      }
      if (Resource != null && __isset.resource) {
        field.Name = "resource";
        field.Type = TType.Struct;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        Resource.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (__isset.image) {
        field.Name = "image";
        field.Type = TType.I32;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Image);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("WorldMapInfluenceResponse(");
      sb.Append("MapID: ");
      sb.Append(MapID);
      sb.Append(",Map_influence: ");
      sb.Append(Map_influence);
      sb.Append(",Influence_info: ");
      sb.Append(Influence_info);
      sb.Append(",Icon: ");
      sb.Append(Icon);
      sb.Append(",Resource: ");
      sb.Append(Resource== null ? "<null>" : Resource.ToString());
      sb.Append(",Image: ");
      sb.Append(Image);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
